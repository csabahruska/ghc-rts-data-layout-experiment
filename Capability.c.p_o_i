# 1 "rts/Capability.c"
# 1 "/home/csaba/haskell/grin-compiler/ghc-whole-program-compiler-project/foundation-pak/foundation-pak-ghc-9.2.7-wpc/ghc-wpc//"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "/home/csaba/haskell/grin-compiler/ghc-whole-program-compiler-project/foundation-pak/foundation-pak-ghc-9.2.7-wpc/ghc-wpc/_build/stage1/lib/ghcversion.h" 1
# 1 "<command-line>" 2
# 1 "./_build/stage1/rts/build/autogen/cabal_macros.h" 1
# 1 "<command-line>" 2
# 1 "rts/Capability.c"
# 19 "rts/Capability.c"
# 1 "rts/PosixSource.h" 1
# 9 "rts/PosixSource.h"
       

# 1 "_build/stage1/lib/ghcplatform.h" 1
# 12 "rts/PosixSource.h" 2
# 20 "rts/Capability.c" 2
# 1 "includes/Rts.h" 1
# 13 "includes/Rts.h"
       






# 1 "includes/ghcconfig.h" 1
       

# 1 "_build/stage1/lib/ghcautoconf.h" 1
# 4 "includes/ghcconfig.h" 2
# 21 "includes/Rts.h" 2


# 1 "includes/stg/Types.h" 1
# 21 "includes/stg/Types.h"
       
# 44 "includes/stg/Types.h"
# 1 "/usr/include/inttypes.h" 1 3 4
# 25 "/usr/include/inttypes.h" 3 4
# 1 "/usr/include/features.h" 1 3 4
# 367 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 1 3 4
# 410 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 411 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 368 "/usr/include/features.h" 2 3 4
# 391 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs-64.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 2 3 4
# 392 "/usr/include/features.h" 2 3 4
# 26 "/usr/include/inttypes.h" 2 3 4

# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stdint.h" 1 3 4
# 9 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stdint.h" 3 4
# 1 "/usr/include/stdint.h" 1 3 4
# 26 "/usr/include/stdint.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wchar.h" 1 3 4
# 27 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/stdint.h" 2 3 4
# 36 "/usr/include/stdint.h" 3 4

# 36 "/usr/include/stdint.h" 3 4
typedef signed char int8_t;
typedef short int int16_t;
typedef int int32_t;

typedef long int int64_t;







typedef unsigned char uint8_t;
typedef unsigned short int uint16_t;

typedef unsigned int uint32_t;



typedef unsigned long int uint64_t;
# 65 "/usr/include/stdint.h" 3 4
typedef signed char int_least8_t;
typedef short int int_least16_t;
typedef int int_least32_t;

typedef long int int_least64_t;






typedef unsigned char uint_least8_t;
typedef unsigned short int uint_least16_t;
typedef unsigned int uint_least32_t;

typedef unsigned long int uint_least64_t;
# 90 "/usr/include/stdint.h" 3 4
typedef signed char int_fast8_t;

typedef long int int_fast16_t;
typedef long int int_fast32_t;
typedef long int int_fast64_t;
# 103 "/usr/include/stdint.h" 3 4
typedef unsigned char uint_fast8_t;

typedef unsigned long int uint_fast16_t;
typedef unsigned long int uint_fast32_t;
typedef unsigned long int uint_fast64_t;
# 119 "/usr/include/stdint.h" 3 4
typedef long int intptr_t;


typedef unsigned long int uintptr_t;
# 134 "/usr/include/stdint.h" 3 4
typedef long int intmax_t;
typedef unsigned long int uintmax_t;
# 10 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stdint.h" 2 3 4
# 28 "/usr/include/inttypes.h" 2 3 4






typedef int __gwchar_t;
# 266 "/usr/include/inttypes.h" 3 4





typedef struct
  {
    long int quot;
    long int rem;
  } imaxdiv_t;
# 290 "/usr/include/inttypes.h" 3 4
extern intmax_t imaxabs (intmax_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern imaxdiv_t imaxdiv (intmax_t __numer, intmax_t __denom)
      __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern intmax_t strtoimax (const char *__restrict __nptr,
      char **__restrict __endptr, int __base) __attribute__ ((__nothrow__ , __leaf__));


extern uintmax_t strtoumax (const char *__restrict __nptr,
       char ** __restrict __endptr, int __base) __attribute__ ((__nothrow__ , __leaf__));


extern intmax_t wcstoimax (const __gwchar_t *__restrict __nptr,
      __gwchar_t **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__));


extern uintmax_t wcstoumax (const __gwchar_t *__restrict __nptr,
       __gwchar_t ** __restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__));





extern long int __strtol_internal (const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, int __group)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));

extern __inline __attribute__ ((__gnu_inline__)) intmax_t
__attribute__ ((__nothrow__ , __leaf__)) strtoimax (const char *__restrict nptr, char **__restrict endptr, int base)

{
  return __strtol_internal (nptr, endptr, base, 0);
}

extern unsigned long int __strtoul_internal (const char *__restrict __nptr,
          char ** __restrict __endptr,
          int __base, int __group)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));

extern __inline __attribute__ ((__gnu_inline__)) uintmax_t
__attribute__ ((__nothrow__ , __leaf__)) strtoumax (const char *__restrict nptr, char **__restrict endptr, int base)

{
  return __strtoul_internal (nptr, endptr, base, 0);
}

extern long int __wcstol_internal (const __gwchar_t * __restrict __nptr,
       __gwchar_t **__restrict __endptr,
       int __base, int __group)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));

extern __inline __attribute__ ((__gnu_inline__)) intmax_t
__attribute__ ((__nothrow__ , __leaf__)) wcstoimax (const __gwchar_t *__restrict nptr, __gwchar_t **__restrict endptr, int base)

{
  return __wcstol_internal (nptr, endptr, base, 0);
}

extern unsigned long int __wcstoul_internal (const __gwchar_t *
          __restrict __nptr,
          __gwchar_t **
          __restrict __endptr,
          int __base, int __group)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));

extern __inline __attribute__ ((__gnu_inline__)) uintmax_t
__attribute__ ((__nothrow__ , __leaf__)) wcstoumax (const __gwchar_t *__restrict nptr, __gwchar_t **__restrict endptr, int base)

{
  return __wcstoul_internal (nptr, endptr, base, 0);
}
# 432 "/usr/include/inttypes.h" 3 4

# 45 "includes/stg/Types.h" 2
# 71 "includes/stg/Types.h"

# 71 "includes/stg/Types.h"
typedef int8_t StgInt8;
typedef uint8_t StgWord8;
# 81 "includes/stg/Types.h"
typedef int16_t StgInt16;
typedef uint16_t StgWord16;
# 91 "includes/stg/Types.h"
typedef int32_t StgInt32;
typedef uint32_t StgWord32;
# 102 "includes/stg/Types.h"
typedef int64_t StgInt64;
typedef uint64_t StgWord64;
# 113 "includes/stg/Types.h"
typedef struct { StgWord64 h; StgWord64 l; } StgWord128;

typedef struct { StgWord128 h; StgWord128 l; } StgWord256;

typedef struct { StgWord256 h; StgWord256 l; } StgWord512;







typedef int64_t StgInt;
typedef uint64_t StgWord;

typedef int32_t StgHalfInt;
typedef uint32_t StgHalfWord;
# 168 "includes/stg/Types.h"
typedef void* StgAddr;
typedef StgWord32 StgChar;
typedef int StgBool;
typedef float StgFloat;
typedef double StgDouble;
typedef StgWord* StgPtr;
typedef StgWord volatile* StgVolatilePtr;
typedef StgWord StgOffset;
typedef StgWord8 StgCode;
typedef void* StgStablePtr;
typedef StgWord8* StgByteArray;
# 195 "includes/stg/Types.h"
typedef void *(*(*StgFunPtr)(void))(void);
typedef StgFunPtr StgFun(void);






struct StgClosure_;
struct StgThunk_;
struct Capability_;
# 24 "includes/Rts.h" 2
# 33 "includes/Rts.h"
# 1 "/usr/include/assert.h" 1 3 4
# 66 "/usr/include/assert.h" 3 4




# 69 "/usr/include/assert.h" 3 4
extern void __assert_fail (const char *__assertion, const char *__file,
      unsigned int __line, const char *__function)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));


extern void __assert_perror_fail (int __errnum, const char *__file,
      unsigned int __line, const char *__function)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));




extern void __assert (const char *__assertion, const char *__file, int __line)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));



# 34 "includes/Rts.h" 2




# 1 "includes/Stg.h" 1
# 26 "includes/Stg.h"
       
# 83 "includes/Stg.h"
# 1 "/usr/include/math.h" 1 3 4
# 28 "/usr/include/math.h" 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/math-vector.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/math-vector.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libm-simd-decl-stubs.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/math-vector.h" 2 3 4
# 32 "/usr/include/math.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/huge_val.h" 1 3 4
# 36 "/usr/include/math.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/huge_valf.h" 1 3 4
# 38 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/huge_vall.h" 1 3 4
# 39 "/usr/include/math.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/inf.h" 1 3 4
# 42 "/usr/include/math.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/nan.h" 1 3 4
# 45 "/usr/include/math.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/mathdef.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/mathdef.h" 3 4
typedef float float_t;
typedef double double_t;
# 49 "/usr/include/math.h" 2 3 4
# 83 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 52 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4


extern double acos (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __acos (double __x) __attribute__ ((__nothrow__ , __leaf__));

extern double asin (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __asin (double __x) __attribute__ ((__nothrow__ , __leaf__));

extern double atan (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __atan (double __x) __attribute__ ((__nothrow__ , __leaf__));

extern double atan2 (double __y, double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __atan2 (double __y, double __x) __attribute__ ((__nothrow__ , __leaf__));


 extern double cos (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __cos (double __x) __attribute__ ((__nothrow__ , __leaf__));

 extern double sin (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __sin (double __x) __attribute__ ((__nothrow__ , __leaf__));

extern double tan (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __tan (double __x) __attribute__ ((__nothrow__ , __leaf__));




extern double cosh (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __cosh (double __x) __attribute__ ((__nothrow__ , __leaf__));

extern double sinh (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __sinh (double __x) __attribute__ ((__nothrow__ , __leaf__));

extern double tanh (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __tanh (double __x) __attribute__ ((__nothrow__ , __leaf__));




 extern void sincos (double __x, double *__sinx, double *__cosx) __attribute__ ((__nothrow__ , __leaf__)); extern void __sincos (double __x, double *__sinx, double *__cosx) __attribute__ ((__nothrow__ , __leaf__))
                                                        ;





extern double acosh (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __acosh (double __x) __attribute__ ((__nothrow__ , __leaf__));

extern double asinh (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __asinh (double __x) __attribute__ ((__nothrow__ , __leaf__));

extern double atanh (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __atanh (double __x) __attribute__ ((__nothrow__ , __leaf__));







 extern double exp (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __exp (double __x) __attribute__ ((__nothrow__ , __leaf__));


extern double frexp (double __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__)); extern double __frexp (double __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__));


extern double ldexp (double __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__)); extern double __ldexp (double __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__));


 extern double log (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __log (double __x) __attribute__ ((__nothrow__ , __leaf__));


extern double log10 (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __log10 (double __x) __attribute__ ((__nothrow__ , __leaf__));


extern double modf (double __x, double *__iptr) __attribute__ ((__nothrow__ , __leaf__)); extern double __modf (double __x, double *__iptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));




extern double exp10 (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __exp10 (double __x) __attribute__ ((__nothrow__ , __leaf__));

extern double pow10 (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __pow10 (double __x) __attribute__ ((__nothrow__ , __leaf__));





extern double expm1 (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __expm1 (double __x) __attribute__ ((__nothrow__ , __leaf__));


extern double log1p (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __log1p (double __x) __attribute__ ((__nothrow__ , __leaf__));


extern double logb (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __logb (double __x) __attribute__ ((__nothrow__ , __leaf__));






extern double exp2 (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __exp2 (double __x) __attribute__ ((__nothrow__ , __leaf__));


extern double log2 (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __log2 (double __x) __attribute__ ((__nothrow__ , __leaf__));








 extern double pow (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)); extern double __pow (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));


extern double sqrt (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __sqrt (double __x) __attribute__ ((__nothrow__ , __leaf__));





extern double hypot (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)); extern double __hypot (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));






extern double cbrt (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __cbrt (double __x) __attribute__ ((__nothrow__ , __leaf__));








extern double ceil (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __ceil (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern double fabs (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __fabs (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern double floor (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __floor (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern double fmod (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)); extern double __fmod (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));




extern int __isinf (double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern int __finite (double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));








extern int isinf (double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern int finite (double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern double drem (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)); extern double __drem (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));



extern double significand (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __significand (double __x) __attribute__ ((__nothrow__ , __leaf__));





extern double copysign (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __copysign (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));






extern double nan (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __nan (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));





extern int __isnan (double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));






extern int isnan (double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));





extern double j0 (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __j0 (double) __attribute__ ((__nothrow__ , __leaf__));
extern double j1 (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __j1 (double) __attribute__ ((__nothrow__ , __leaf__));
extern double jn (int, double) __attribute__ ((__nothrow__ , __leaf__)); extern double __jn (int, double) __attribute__ ((__nothrow__ , __leaf__));
extern double y0 (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __y0 (double) __attribute__ ((__nothrow__ , __leaf__));
extern double y1 (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __y1 (double) __attribute__ ((__nothrow__ , __leaf__));
extern double yn (int, double) __attribute__ ((__nothrow__ , __leaf__)); extern double __yn (int, double) __attribute__ ((__nothrow__ , __leaf__));






extern double erf (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __erf (double) __attribute__ ((__nothrow__ , __leaf__));
extern double erfc (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __erfc (double) __attribute__ ((__nothrow__ , __leaf__));
extern double lgamma (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __lgamma (double) __attribute__ ((__nothrow__ , __leaf__));






extern double tgamma (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __tgamma (double) __attribute__ ((__nothrow__ , __leaf__));





extern double gamma (double) __attribute__ ((__nothrow__ , __leaf__)); extern double __gamma (double) __attribute__ ((__nothrow__ , __leaf__));






extern double lgamma_r (double, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__)); extern double __lgamma_r (double, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__));







extern double rint (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __rint (double __x) __attribute__ ((__nothrow__ , __leaf__));


extern double nextafter (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __nextafter (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));

extern double nexttoward (double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __nexttoward (double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern double remainder (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)); extern double __remainder (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));



extern double scalbn (double __x, int __n) __attribute__ ((__nothrow__ , __leaf__)); extern double __scalbn (double __x, int __n) __attribute__ ((__nothrow__ , __leaf__));



extern int ilogb (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern int __ilogb (double __x) __attribute__ ((__nothrow__ , __leaf__));




extern double scalbln (double __x, long int __n) __attribute__ ((__nothrow__ , __leaf__)); extern double __scalbln (double __x, long int __n) __attribute__ ((__nothrow__ , __leaf__));



extern double nearbyint (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern double __nearbyint (double __x) __attribute__ ((__nothrow__ , __leaf__));



extern double round (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __round (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern double trunc (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __trunc (double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern double remquo (double __x, double __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__)); extern double __remquo (double __x, double __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__));






extern long int lrint (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lrint (double __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llrint (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llrint (double __x) __attribute__ ((__nothrow__ , __leaf__));



extern long int lround (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lround (double __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llround (double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llround (double __x) __attribute__ ((__nothrow__ , __leaf__));



extern double fdim (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)); extern double __fdim (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__));


extern double fmax (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __fmax (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern double fmin (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern double __fmin (double __x, double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern int __fpclassify (double __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));


extern int __signbit (double __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));



extern double fma (double __x, double __y, double __z) __attribute__ ((__nothrow__ , __leaf__)); extern double __fma (double __x, double __y, double __z) __attribute__ ((__nothrow__ , __leaf__));








extern int __issignaling (double __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));






extern double scalb (double __x, double __n) __attribute__ ((__nothrow__ , __leaf__)); extern double __scalb (double __x, double __n) __attribute__ ((__nothrow__ , __leaf__));
# 84 "/usr/include/math.h" 2 3 4
# 104 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 52 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4


extern float acosf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __acosf (float __x) __attribute__ ((__nothrow__ , __leaf__));

extern float asinf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __asinf (float __x) __attribute__ ((__nothrow__ , __leaf__));

extern float atanf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __atanf (float __x) __attribute__ ((__nothrow__ , __leaf__));

extern float atan2f (float __y, float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __atan2f (float __y, float __x) __attribute__ ((__nothrow__ , __leaf__));


 extern float cosf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __cosf (float __x) __attribute__ ((__nothrow__ , __leaf__));

 extern float sinf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __sinf (float __x) __attribute__ ((__nothrow__ , __leaf__));

extern float tanf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __tanf (float __x) __attribute__ ((__nothrow__ , __leaf__));




extern float coshf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __coshf (float __x) __attribute__ ((__nothrow__ , __leaf__));

extern float sinhf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __sinhf (float __x) __attribute__ ((__nothrow__ , __leaf__));

extern float tanhf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __tanhf (float __x) __attribute__ ((__nothrow__ , __leaf__));




 extern void sincosf (float __x, float *__sinx, float *__cosx) __attribute__ ((__nothrow__ , __leaf__)); extern void __sincosf (float __x, float *__sinx, float *__cosx) __attribute__ ((__nothrow__ , __leaf__))
                                                        ;





extern float acoshf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __acoshf (float __x) __attribute__ ((__nothrow__ , __leaf__));

extern float asinhf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __asinhf (float __x) __attribute__ ((__nothrow__ , __leaf__));

extern float atanhf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __atanhf (float __x) __attribute__ ((__nothrow__ , __leaf__));







 extern float expf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __expf (float __x) __attribute__ ((__nothrow__ , __leaf__));


extern float frexpf (float __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__)); extern float __frexpf (float __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__));


extern float ldexpf (float __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__)); extern float __ldexpf (float __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__));


 extern float logf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __logf (float __x) __attribute__ ((__nothrow__ , __leaf__));


extern float log10f (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __log10f (float __x) __attribute__ ((__nothrow__ , __leaf__));


extern float modff (float __x, float *__iptr) __attribute__ ((__nothrow__ , __leaf__)); extern float __modff (float __x, float *__iptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));




extern float exp10f (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __exp10f (float __x) __attribute__ ((__nothrow__ , __leaf__));

extern float pow10f (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __pow10f (float __x) __attribute__ ((__nothrow__ , __leaf__));





extern float expm1f (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __expm1f (float __x) __attribute__ ((__nothrow__ , __leaf__));


extern float log1pf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __log1pf (float __x) __attribute__ ((__nothrow__ , __leaf__));


extern float logbf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __logbf (float __x) __attribute__ ((__nothrow__ , __leaf__));






extern float exp2f (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __exp2f (float __x) __attribute__ ((__nothrow__ , __leaf__));


extern float log2f (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __log2f (float __x) __attribute__ ((__nothrow__ , __leaf__));








 extern float powf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)); extern float __powf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__));


extern float sqrtf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __sqrtf (float __x) __attribute__ ((__nothrow__ , __leaf__));





extern float hypotf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)); extern float __hypotf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__));






extern float cbrtf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __cbrtf (float __x) __attribute__ ((__nothrow__ , __leaf__));








extern float ceilf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __ceilf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern float fabsf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __fabsf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern float floorf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __floorf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern float fmodf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)); extern float __fmodf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__));




extern int __isinff (float __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern int __finitef (float __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));








extern int isinff (float __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern int finitef (float __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern float dremf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)); extern float __dremf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__));



extern float significandf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __significandf (float __x) __attribute__ ((__nothrow__ , __leaf__));





extern float copysignf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __copysignf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));






extern float nanf (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __nanf (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));





extern int __isnanf (float __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));






extern int isnanf (float __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));





extern float j0f (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __j0f (float) __attribute__ ((__nothrow__ , __leaf__));
extern float j1f (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __j1f (float) __attribute__ ((__nothrow__ , __leaf__));
extern float jnf (int, float) __attribute__ ((__nothrow__ , __leaf__)); extern float __jnf (int, float) __attribute__ ((__nothrow__ , __leaf__));
extern float y0f (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __y0f (float) __attribute__ ((__nothrow__ , __leaf__));
extern float y1f (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __y1f (float) __attribute__ ((__nothrow__ , __leaf__));
extern float ynf (int, float) __attribute__ ((__nothrow__ , __leaf__)); extern float __ynf (int, float) __attribute__ ((__nothrow__ , __leaf__));






extern float erff (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __erff (float) __attribute__ ((__nothrow__ , __leaf__));
extern float erfcf (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __erfcf (float) __attribute__ ((__nothrow__ , __leaf__));
extern float lgammaf (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __lgammaf (float) __attribute__ ((__nothrow__ , __leaf__));






extern float tgammaf (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __tgammaf (float) __attribute__ ((__nothrow__ , __leaf__));





extern float gammaf (float) __attribute__ ((__nothrow__ , __leaf__)); extern float __gammaf (float) __attribute__ ((__nothrow__ , __leaf__));






extern float lgammaf_r (float, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__)); extern float __lgammaf_r (float, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__));







extern float rintf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __rintf (float __x) __attribute__ ((__nothrow__ , __leaf__));


extern float nextafterf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __nextafterf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));

extern float nexttowardf (float __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __nexttowardf (float __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern float remainderf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)); extern float __remainderf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__));



extern float scalbnf (float __x, int __n) __attribute__ ((__nothrow__ , __leaf__)); extern float __scalbnf (float __x, int __n) __attribute__ ((__nothrow__ , __leaf__));



extern int ilogbf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern int __ilogbf (float __x) __attribute__ ((__nothrow__ , __leaf__));




extern float scalblnf (float __x, long int __n) __attribute__ ((__nothrow__ , __leaf__)); extern float __scalblnf (float __x, long int __n) __attribute__ ((__nothrow__ , __leaf__));



extern float nearbyintf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern float __nearbyintf (float __x) __attribute__ ((__nothrow__ , __leaf__));



extern float roundf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __roundf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern float truncf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __truncf (float __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern float remquof (float __x, float __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__)); extern float __remquof (float __x, float __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__));






extern long int lrintf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lrintf (float __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llrintf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llrintf (float __x) __attribute__ ((__nothrow__ , __leaf__));



extern long int lroundf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lroundf (float __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llroundf (float __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llroundf (float __x) __attribute__ ((__nothrow__ , __leaf__));



extern float fdimf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)); extern float __fdimf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__));


extern float fmaxf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __fmaxf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern float fminf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern float __fminf (float __x, float __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern int __fpclassifyf (float __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));


extern int __signbitf (float __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));



extern float fmaf (float __x, float __y, float __z) __attribute__ ((__nothrow__ , __leaf__)); extern float __fmaf (float __x, float __y, float __z) __attribute__ ((__nothrow__ , __leaf__));








extern int __issignalingf (float __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));






extern float scalbf (float __x, float __n) __attribute__ ((__nothrow__ , __leaf__)); extern float __scalbf (float __x, float __n) __attribute__ ((__nothrow__ , __leaf__));
# 105 "/usr/include/math.h" 2 3 4
# 151 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 52 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4


extern long double acosl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __acosl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

extern long double asinl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __asinl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

extern long double atanl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __atanl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

extern long double atan2l (long double __y, long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __atan2l (long double __y, long double __x) __attribute__ ((__nothrow__ , __leaf__));


 extern long double cosl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __cosl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

 extern long double sinl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __sinl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

extern long double tanl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __tanl (long double __x) __attribute__ ((__nothrow__ , __leaf__));




extern long double coshl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __coshl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

extern long double sinhl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __sinhl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

extern long double tanhl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __tanhl (long double __x) __attribute__ ((__nothrow__ , __leaf__));




 extern void sincosl (long double __x, long double *__sinx, long double *__cosx) __attribute__ ((__nothrow__ , __leaf__)); extern void __sincosl (long double __x, long double *__sinx, long double *__cosx) __attribute__ ((__nothrow__ , __leaf__))
                                                        ;





extern long double acoshl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __acoshl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

extern long double asinhl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __asinhl (long double __x) __attribute__ ((__nothrow__ , __leaf__));

extern long double atanhl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __atanhl (long double __x) __attribute__ ((__nothrow__ , __leaf__));







 extern long double expl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __expl (long double __x) __attribute__ ((__nothrow__ , __leaf__));


extern long double frexpl (long double __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__)); extern long double __frexpl (long double __x, int *__exponent) __attribute__ ((__nothrow__ , __leaf__));


extern long double ldexpl (long double __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__)); extern long double __ldexpl (long double __x, int __exponent) __attribute__ ((__nothrow__ , __leaf__));


 extern long double logl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __logl (long double __x) __attribute__ ((__nothrow__ , __leaf__));


extern long double log10l (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __log10l (long double __x) __attribute__ ((__nothrow__ , __leaf__));


extern long double modfl (long double __x, long double *__iptr) __attribute__ ((__nothrow__ , __leaf__)); extern long double __modfl (long double __x, long double *__iptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));




extern long double exp10l (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __exp10l (long double __x) __attribute__ ((__nothrow__ , __leaf__));

extern long double pow10l (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __pow10l (long double __x) __attribute__ ((__nothrow__ , __leaf__));





extern long double expm1l (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __expm1l (long double __x) __attribute__ ((__nothrow__ , __leaf__));


extern long double log1pl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __log1pl (long double __x) __attribute__ ((__nothrow__ , __leaf__));


extern long double logbl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __logbl (long double __x) __attribute__ ((__nothrow__ , __leaf__));






extern long double exp2l (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __exp2l (long double __x) __attribute__ ((__nothrow__ , __leaf__));


extern long double log2l (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __log2l (long double __x) __attribute__ ((__nothrow__ , __leaf__));








 extern long double powl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double __powl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));


extern long double sqrtl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __sqrtl (long double __x) __attribute__ ((__nothrow__ , __leaf__));





extern long double hypotl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double __hypotl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));






extern long double cbrtl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __cbrtl (long double __x) __attribute__ ((__nothrow__ , __leaf__));








extern long double ceill (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __ceill (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern long double fabsl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __fabsl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern long double floorl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __floorl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern long double fmodl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double __fmodl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));




extern int __isinfl (long double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern int __finitel (long double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));








extern int isinfl (long double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern int finitel (long double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern long double dreml (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double __dreml (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));



extern long double significandl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __significandl (long double __x) __attribute__ ((__nothrow__ , __leaf__));





extern long double copysignl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __copysignl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));






extern long double nanl (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __nanl (const char *__tagb) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));





extern int __isnanl (long double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));






extern int isnanl (long double __value) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));





extern long double j0l (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __j0l (long double) __attribute__ ((__nothrow__ , __leaf__));
extern long double j1l (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __j1l (long double) __attribute__ ((__nothrow__ , __leaf__));
extern long double jnl (int, long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __jnl (int, long double) __attribute__ ((__nothrow__ , __leaf__));
extern long double y0l (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __y0l (long double) __attribute__ ((__nothrow__ , __leaf__));
extern long double y1l (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __y1l (long double) __attribute__ ((__nothrow__ , __leaf__));
extern long double ynl (int, long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __ynl (int, long double) __attribute__ ((__nothrow__ , __leaf__));






extern long double erfl (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __erfl (long double) __attribute__ ((__nothrow__ , __leaf__));
extern long double erfcl (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __erfcl (long double) __attribute__ ((__nothrow__ , __leaf__));
extern long double lgammal (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __lgammal (long double) __attribute__ ((__nothrow__ , __leaf__));






extern long double tgammal (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __tgammal (long double) __attribute__ ((__nothrow__ , __leaf__));





extern long double gammal (long double) __attribute__ ((__nothrow__ , __leaf__)); extern long double __gammal (long double) __attribute__ ((__nothrow__ , __leaf__));






extern long double lgammal_r (long double, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__)); extern long double __lgammal_r (long double, int *__signgamp) __attribute__ ((__nothrow__ , __leaf__));







extern long double rintl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __rintl (long double __x) __attribute__ ((__nothrow__ , __leaf__));


extern long double nextafterl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __nextafterl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));

extern long double nexttowardl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __nexttowardl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern long double remainderl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double __remainderl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));



extern long double scalbnl (long double __x, int __n) __attribute__ ((__nothrow__ , __leaf__)); extern long double __scalbnl (long double __x, int __n) __attribute__ ((__nothrow__ , __leaf__));



extern int ilogbl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern int __ilogbl (long double __x) __attribute__ ((__nothrow__ , __leaf__));




extern long double scalblnl (long double __x, long int __n) __attribute__ ((__nothrow__ , __leaf__)); extern long double __scalblnl (long double __x, long int __n) __attribute__ ((__nothrow__ , __leaf__));



extern long double nearbyintl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long double __nearbyintl (long double __x) __attribute__ ((__nothrow__ , __leaf__));



extern long double roundl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __roundl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern long double truncl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __truncl (long double __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern long double remquol (long double __x, long double __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__)); extern long double __remquol (long double __x, long double __y, int *__quo) __attribute__ ((__nothrow__ , __leaf__));






extern long int lrintl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lrintl (long double __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llrintl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llrintl (long double __x) __attribute__ ((__nothrow__ , __leaf__));



extern long int lroundl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long int __lroundl (long double __x) __attribute__ ((__nothrow__ , __leaf__));
__extension__
extern long long int llroundl (long double __x) __attribute__ ((__nothrow__ , __leaf__)); extern long long int __llroundl (long double __x) __attribute__ ((__nothrow__ , __leaf__));



extern long double fdiml (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)); extern long double __fdiml (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__));


extern long double fmaxl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __fmaxl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern long double fminl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)); extern long double __fminl (long double __x, long double __y) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern int __fpclassifyl (long double __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));


extern int __signbitl (long double __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));



extern long double fmal (long double __x, long double __y, long double __z) __attribute__ ((__nothrow__ , __leaf__)); extern long double __fmal (long double __x, long double __y, long double __z) __attribute__ ((__nothrow__ , __leaf__));








extern int __issignalingl (long double __value) __attribute__ ((__nothrow__ , __leaf__))
     __attribute__ ((__const__));






extern long double scalbl (long double __x, long double __n) __attribute__ ((__nothrow__ , __leaf__)); extern long double __scalbl (long double __x, long double __n) __attribute__ ((__nothrow__ , __leaf__));
# 152 "/usr/include/math.h" 2 3 4
# 168 "/usr/include/math.h" 3 4
extern int signgam;
# 209 "/usr/include/math.h" 3 4
enum
  {
    FP_NAN =

      0,
    FP_INFINITE =

      1,
    FP_ZERO =

      2,
    FP_SUBNORMAL =

      3,
    FP_NORMAL =

      4
  };
# 347 "/usr/include/math.h" 3 4
typedef enum
{
  _IEEE_ = -1,
  _SVID_,
  _XOPEN_,
  _POSIX_,
  _ISOC_
} _LIB_VERSION_TYPE;




extern _LIB_VERSION_TYPE _LIB_VERSION;
# 372 "/usr/include/math.h" 3 4
struct exception

  {
    int type;
    char *name;
    double arg1;
    double arg2;
    double retval;
  };




extern int matherr (struct exception *__exc);
# 472 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathinline.h" 1 3 4
# 123 "/usr/include/x86_64-linux-gnu/bits/mathinline.h" 3 4



extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) int
__attribute__ ((__nothrow__ , __leaf__)) __signbitf (float __x)
{

  int __m;
  __asm ("pmovmskb %1, %0" : "=r" (__m) : "x" (__x));
  return (__m & 0x8) != 0;




}
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) int
__attribute__ ((__nothrow__ , __leaf__)) __signbit (double __x)
{

  int __m;
  __asm ("pmovmskb %1, %0" : "=r" (__m) : "x" (__x));
  return (__m & 0x80) != 0;




}
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) int
__attribute__ ((__nothrow__ , __leaf__)) __signbitl (long double __x)
{
  __extension__ union { long double __l; int __i[3]; } __u = { __l: __x };
  return (__u.__i[2] & 0x8000) != 0;
}


# 473 "/usr/include/math.h" 2 3 4
# 534 "/usr/include/math.h" 3 4

# 84 "includes/Stg.h" 2
# 238 "includes/Stg.h"
# 1 "includes/MachDeps.h" 1
# 16 "includes/MachDeps.h"
       
# 239 "includes/Stg.h" 2







# 245 "includes/Stg.h"
typedef StgChar C_;
typedef StgWord W_;
typedef StgWord* P_;
typedef StgInt I_;
typedef StgWord StgWordArray[];
typedef StgFunPtr F_;
# 322 "includes/Stg.h"
# 1 "includes/stg/DLL.h" 1
# 14 "includes/stg/DLL.h"
       
# 323 "includes/Stg.h" 2
# 1 "includes/stg/MachRegsForHost.h" 1
# 15 "includes/stg/MachRegsForHost.h"
       
# 80 "includes/stg/MachRegsForHost.h"
# 1 "includes/stg/MachRegs.h" 1
# 15 "includes/stg/MachRegs.h"
       
# 80 "includes/stg/MachRegsForHost.h" 2
# 324 "includes/Stg.h" 2
# 1 "includes/stg/Regs.h" 1
# 14 "includes/stg/Regs.h"
       
# 32 "includes/stg/Regs.h"
typedef struct {
  StgWord stgEagerBlackholeInfo;
  StgFunPtr stgGCEnter1;
  StgFunPtr stgGCFun;
} StgFunTable;






typedef union {
    StgWord w;
    StgAddr a;
    StgChar c;
    StgFloat f;
    StgInt i;
    StgPtr p;
} StgUnion;
# 60 "includes/stg/Regs.h"
typedef struct {
  StgUnion rR1;
  StgUnion rR2;
  StgUnion rR3;
  StgUnion rR4;
  StgUnion rR5;
  StgUnion rR6;
  StgUnion rR7;
  StgUnion rR8;
  StgUnion rR9;
  StgUnion rR10;
  StgFloat rF1;
  StgFloat rF2;
  StgFloat rF3;
  StgFloat rF4;
  StgFloat rF5;
  StgFloat rF6;
  StgDouble rD1;
  StgDouble rD2;
  StgDouble rD3;
  StgDouble rD4;
  StgDouble rD5;
  StgDouble rD6;
  StgWord128 rXMM1;
  StgWord128 rXMM2;
  StgWord128 rXMM3;
  StgWord128 rXMM4;
  StgWord128 rXMM5;
  StgWord128 rXMM6;
  StgWord256 rYMM1;
  StgWord256 rYMM2;
  StgWord256 rYMM3;
  StgWord256 rYMM4;
  StgWord256 rYMM5;
  StgWord256 rYMM6;
  StgWord512 rZMM1;
  StgWord512 rZMM2;
  StgWord512 rZMM3;
  StgWord512 rZMM4;
  StgWord512 rZMM5;
  StgWord512 rZMM6;
  StgWord64 rL1;
  StgPtr rSp;
  StgPtr rSpLim;
  StgPtr rHp;
  StgPtr rHpLim;
  struct CostCentreStack_ * rCCCS;
  struct StgTSO_ * rCurrentTSO;
  struct nursery_ * rNursery;
  struct bdescr_ * rCurrentNursery;
  struct bdescr_ * rCurrentAlloc;
  StgWord rHpAlloc;
  StgWord rRet;
} StgRegTable;
# 325 "includes/Stg.h" 2
# 1 "includes/stg/Ticky.h" 1
# 14 "includes/stg/Ticky.h"
       
# 46 "includes/stg/Ticky.h"
extern StgInt ENT_VIA_NODE_ctr ;
extern StgInt ENT_STATIC_THK_SINGLE_ctr ;
extern StgInt ENT_DYN_THK_SINGLE_ctr ;
extern StgInt ENT_STATIC_THK_MANY_ctr ;
extern StgInt ENT_DYN_THK_MANY_ctr ;
extern StgInt ENT_STATIC_FUN_DIRECT_ctr ;
extern StgInt ENT_DYN_FUN_DIRECT_ctr ;
extern StgInt ENT_STATIC_CON_ctr ;
extern StgInt ENT_DYN_CON_ctr ;
extern StgInt ENT_STATIC_IND_ctr ;
extern StgInt ENT_DYN_IND_ctr ;
extern StgInt ENT_PERM_IND_ctr ;
extern StgInt ENT_PAP_ctr ;
extern StgInt ENT_AP_ctr ;
extern StgInt ENT_AP_STACK_ctr ;
extern StgInt ENT_BH_ctr ;
extern StgInt ENT_LNE_ctr ;

extern StgInt UNKNOWN_CALL_ctr ;

extern StgInt SLOW_CALL_fast_v16_ctr ;
extern StgInt SLOW_CALL_fast_v_ctr ;
extern StgInt SLOW_CALL_fast_f_ctr ;
extern StgInt SLOW_CALL_fast_d_ctr ;
extern StgInt SLOW_CALL_fast_l_ctr ;
extern StgInt SLOW_CALL_fast_n_ctr ;
extern StgInt SLOW_CALL_fast_p_ctr ;
extern StgInt SLOW_CALL_fast_pv_ctr ;
extern StgInt SLOW_CALL_fast_pp_ctr ;
extern StgInt SLOW_CALL_fast_ppv_ctr ;
extern StgInt SLOW_CALL_fast_ppp_ctr ;
extern StgInt SLOW_CALL_fast_pppv_ctr ;
extern StgInt SLOW_CALL_fast_pppp_ctr ;
extern StgInt SLOW_CALL_fast_ppppp_ctr ;
extern StgInt SLOW_CALL_fast_pppppp_ctr ;
extern StgInt VERY_SLOW_CALL_ctr ;

extern StgInt ticky_slow_call_unevald;
extern StgInt SLOW_CALL_ctr ;
extern StgInt MULTI_CHUNK_SLOW_CALL_ctr ;
extern StgInt MULTI_CHUNK_SLOW_CALL_CHUNKS_ctr ;
extern StgInt KNOWN_CALL_ctr ;
extern StgInt KNOWN_CALL_TOO_FEW_ARGS_ctr ;
extern StgInt KNOWN_CALL_EXTRA_ARGS_ctr ;
extern StgInt SLOW_CALL_FUN_TOO_FEW_ctr ;
extern StgInt SLOW_CALL_FUN_CORRECT_ctr ;
extern StgInt SLOW_CALL_FUN_TOO_MANY_ctr ;
extern StgInt SLOW_CALL_PAP_TOO_FEW_ctr ;
extern StgInt SLOW_CALL_PAP_CORRECT_ctr ;
extern StgInt SLOW_CALL_PAP_TOO_MANY_ctr ;
extern StgInt SLOW_CALL_UNEVALD_ctr ;


extern StgInt UPDF_OMITTED_ctr ;
extern StgInt UPDF_PUSHED_ctr ;
extern StgInt CATCHF_PUSHED_ctr ;
extern StgInt UPDF_RCC_PUSHED_ctr ;
extern StgInt UPDF_RCC_OMITTED_ctr ;

extern StgInt UPD_SQUEEZED_ctr ;
extern StgInt UPD_CON_IN_NEW_ctr ;
extern StgInt UPD_CON_IN_PLACE_ctr ;
extern StgInt UPD_PAP_IN_NEW_ctr ;
extern StgInt UPD_PAP_IN_PLACE_ctr ;

extern StgInt ALLOC_HEAP_ctr ;
extern StgInt ALLOC_HEAP_tot ;

extern StgInt HEAP_CHK_ctr ;
extern StgInt STK_CHK_ctr ;

extern StgInt ALLOC_RTS_ctr ;
extern StgInt ALLOC_RTS_tot ;

extern StgInt ALLOC_FUN_ctr ;
extern StgInt ALLOC_FUN_adm ;
extern StgInt ALLOC_FUN_gds ;
extern StgInt ALLOC_FUN_slp ;

extern StgInt UPD_NEW_IND_ctr ;
extern StgInt UPD_NEW_PERM_IND_ctr ;
extern StgInt UPD_OLD_IND_ctr ;
extern StgInt UPD_OLD_PERM_IND_ctr ;

extern StgInt UPD_BH_UPDATABLE_ctr ;
extern StgInt UPD_CAF_BH_UPDATABLE_ctr ;
extern StgInt UPD_CAF_BH_SINGLE_ENTRY_ctr ;

extern StgInt GC_SEL_ABANDONED_ctr ;
extern StgInt GC_SEL_MINOR_ctr ;
extern StgInt GC_SEL_MAJOR_ctr ;

extern StgInt GC_FAILED_PROMOTION_ctr ;

extern StgInt ALLOC_UP_THK_ctr ;
extern StgInt ALLOC_SE_THK_ctr ;
extern StgInt ALLOC_THK_adm ;
extern StgInt ALLOC_THK_gds ;
extern StgInt ALLOC_THK_slp ;

extern StgInt ALLOC_CON_ctr ;
extern StgInt ALLOC_CON_adm ;
extern StgInt ALLOC_CON_gds ;
extern StgInt ALLOC_CON_slp ;

extern StgInt ALLOC_TUP_ctr ;
extern StgInt ALLOC_TUP_adm ;
extern StgInt ALLOC_TUP_gds ;
extern StgInt ALLOC_TUP_slp ;

extern StgInt ALLOC_BH_ctr ;
extern StgInt ALLOC_BH_adm ;
extern StgInt ALLOC_BH_gds ;
extern StgInt ALLOC_BH_slp ;

extern StgInt ALLOC_PRIM_ctr ;
extern StgInt ALLOC_PRIM_adm ;
extern StgInt ALLOC_PRIM_gds ;
extern StgInt ALLOC_PRIM_slp ;

extern StgInt ALLOC_PAP_ctr ;
extern StgInt ALLOC_PAP_adm ;
extern StgInt ALLOC_PAP_gds ;
extern StgInt ALLOC_PAP_slp ;

extern StgInt ALLOC_TSO_ctr ;
extern StgInt ALLOC_TSO_adm ;
extern StgInt ALLOC_TSO_gds ;
extern StgInt ALLOC_TSO_slp ;

extern StgInt RET_NEW_ctr ;
extern StgInt RET_OLD_ctr ;
extern StgInt RET_UNBOXED_TUP_ctr ;

extern StgInt RET_SEMI_loads_avoided ;






extern StgInt RET_NEW_hst[9] ;
extern StgInt RET_OLD_hst[9] ;
extern StgInt RET_UNBOXED_TUP_hst[9] ;
# 326 "includes/Stg.h" 2
# 335 "includes/Stg.h"
# 1 "includes/stg/Prim.h" 1
# 14 "includes/stg/Prim.h"
       


StgWord hs_atomic_add8(StgWord x, StgWord val);
StgWord hs_atomic_add16(StgWord x, StgWord val);
StgWord hs_atomic_add32(StgWord x, StgWord val);
StgWord64 hs_atomic_add64(StgWord x, StgWord64 val);
StgWord hs_atomic_sub8(StgWord x, StgWord val);
StgWord hs_atomic_sub16(StgWord x, StgWord val);
StgWord hs_atomic_sub32(StgWord x, StgWord val);
StgWord64 hs_atomic_sub64(StgWord x, StgWord64 val);
StgWord hs_atomic_and8(StgWord x, StgWord val);
StgWord hs_atomic_and16(StgWord x, StgWord val);
StgWord hs_atomic_and32(StgWord x, StgWord val);
StgWord64 hs_atomic_and64(StgWord x, StgWord64 val);
StgWord hs_atomic_nand8(StgWord x, StgWord val);
StgWord hs_atomic_nand16(StgWord x, StgWord val);
StgWord hs_atomic_nand32(StgWord x, StgWord val);
StgWord64 hs_atomic_nand64(StgWord x, StgWord64 val);
StgWord hs_atomic_or8(StgWord x, StgWord val);
StgWord hs_atomic_or16(StgWord x, StgWord val);
StgWord hs_atomic_or32(StgWord x, StgWord val);
StgWord64 hs_atomic_or64(StgWord x, StgWord64 val);
StgWord hs_atomic_xor8(StgWord x, StgWord val);
StgWord hs_atomic_xor16(StgWord x, StgWord val);
StgWord hs_atomic_xor32(StgWord x, StgWord val);
StgWord64 hs_atomic_xor64(StgWord x, StgWord64 val);
StgWord hs_cmpxchg8(StgWord x, StgWord old, StgWord new_);
StgWord hs_cmpxchg16(StgWord x, StgWord old, StgWord new_);
StgWord hs_cmpxchg32(StgWord x, StgWord old, StgWord new_);
StgWord hs_cmpxchg64(StgWord x, StgWord64 old, StgWord64 new_);
StgWord hs_atomicread8(StgWord x);
StgWord hs_atomicread16(StgWord x);
StgWord hs_atomicread32(StgWord x);
StgWord64 hs_atomicread64(StgWord x);
void hs_atomicwrite8(StgWord x, StgWord val);
void hs_atomicwrite16(StgWord x, StgWord val);
void hs_atomicwrite32(StgWord x, StgWord val);
void hs_atomicwrite64(StgWord x, StgWord64 val);
StgWord hs_xchg8(StgWord x, StgWord val);
StgWord hs_xchg16(StgWord x, StgWord val);
StgWord hs_xchg32(StgWord x, StgWord val);
StgWord hs_xchg64(StgWord x, StgWord val);


StgWord16 hs_bswap16(StgWord16 x);
StgWord32 hs_bswap32(StgWord32 x);
StgWord64 hs_bswap64(StgWord64 x);




StgWord hs_bitrev8(StgWord x);
StgWord16 hs_bitrev16(StgWord16 x);
StgWord32 hs_bitrev32(StgWord32 x);
StgWord64 hs_bitrev64(StgWord64 x);
# 107 "includes/stg/Prim.h"
StgWord64 hs_pdep64(StgWord64 src, StgWord64 mask);
StgWord hs_pdep32(StgWord src, StgWord mask);
StgWord hs_pdep16(StgWord src, StgWord mask);
StgWord hs_pdep8(StgWord src, StgWord mask);


StgWord64 hs_pext64(StgWord64 src, StgWord64 mask);
StgWord hs_pext32(StgWord src, StgWord mask);
StgWord hs_pext16(StgWord src, StgWord mask);
StgWord hs_pext8(StgWord src, StgWord mask);


StgWord hs_popcnt8(StgWord x);
StgWord hs_popcnt16(StgWord x);
StgWord hs_popcnt32(StgWord x);
StgWord hs_popcnt64(StgWord64 x);
StgWord hs_popcnt(StgWord x);


StgFloat hs_word2float32(StgWord x);
StgDouble hs_word2float64(StgWord x);


StgWord hs_clz8(StgWord x);
StgWord hs_clz16(StgWord x);
StgWord hs_clz32(StgWord x);
StgWord hs_clz64(StgWord64 x);


StgWord hs_ctz8(StgWord x);
StgWord hs_ctz16(StgWord x);
StgWord hs_ctz32(StgWord x);
StgWord hs_ctz64(StgWord64 x);
# 336 "includes/Stg.h" 2
# 1 "includes/stg/SMP.h" 1
# 14 "includes/stg/SMP.h"
       
# 495 "includes/stg/SMP.h"
inline void write_barrier(void);
inline void store_load_barrier(void);
inline void load_load_barrier(void);
inline void write_barrier () {}
inline void store_load_barrier() {}
inline void load_load_barrier () {}
# 527 "includes/stg/SMP.h"
static inline StgWord
xchg(StgPtr p, StgWord w)
{
    StgWord old = *p;
    *p = w;
    return old;
}

inline StgWord cas(StgVolatilePtr p, StgWord o, StgWord n);
inline StgWord
cas(StgVolatilePtr p, StgWord o, StgWord n)
{
    StgWord result;
    result = *p;
    if (result == o) {
        *p = n;
    }
    return result;
}

inline StgWord8 cas_word8(StgWord8 *volatile p, StgWord8 o, StgWord8 n);
inline StgWord8
cas_word8(StgWord8 *volatile p, StgWord8 o, StgWord8 n)
{
    StgWord8 result;
    result = *p;
    if (result == o) {
        *p = n;
    }
    return result;
}

inline StgWord atomic_inc(StgVolatilePtr p, StgWord incr);
inline StgWord
atomic_inc(StgVolatilePtr p, StgWord incr)
{
    return ((*p) += incr);
}


static inline StgWord
atomic_dec(StgVolatilePtr p)
{
    return --(*p);
}
# 337 "includes/Stg.h" 2
# 349 "includes/Stg.h"
static inline void ASSIGN_FLT (W_ [], StgFloat);
static inline StgFloat PK_FLT (W_ []);



static inline void ASSIGN_FLT(W_ p_dest[], StgFloat src) { *(StgFloat *)p_dest = src; }
static inline StgFloat PK_FLT (W_ p_src[]) { return *(StgFloat *)p_src; }
# 377 "includes/Stg.h"
static inline void ASSIGN_DBL (W_ [], StgDouble);
static inline StgDouble PK_DBL (W_ []);

static inline void ASSIGN_DBL(W_ p_dest[], StgDouble src) { *(StgDouble *)p_dest = src; }
static inline StgDouble PK_DBL (W_ p_src[]) { return *(StgDouble *)p_src; }
# 509 "includes/Stg.h"
static inline void ASSIGN_Word64(W_ p_dest[], StgWord64 src)
{
   p_dest[0] = src;
}

static inline StgWord64 PK_Word64(W_ p_src[])
{
    return p_src[0];
}

static inline void ASSIGN_Int64(W_ p_dest[], StgInt64 src)
{
    p_dest[0] = src;
}

static inline StgInt64 PK_Int64(W_ p_src[])
{
    return p_src[0];
}
# 39 "includes/Rts.h" 2

# 1 "includes/HsFFI.h" 1
# 16 "includes/HsFFI.h"
       
# 27 "includes/HsFFI.h"
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/float.h" 1 3 4
# 28 "includes/HsFFI.h" 2

typedef StgChar HsChar;
typedef StgInt HsInt;
typedef StgInt8 HsInt8;
typedef StgInt16 HsInt16;
typedef StgInt32 HsInt32;
typedef StgInt64 HsInt64;
typedef StgWord HsWord;
typedef StgWord8 HsWord8;
typedef StgWord16 HsWord16;
typedef StgWord32 HsWord32;
typedef StgWord64 HsWord64;
typedef StgFloat HsFloat;
typedef StgDouble HsDouble;
typedef StgInt HsBool;
typedef void* HsPtr;
typedef void (*HsFunPtr)(void);
typedef void* HsStablePtr;
# 100 "includes/HsFFI.h"
extern void hs_init (int *argc, char **argv[]);
extern void hs_exit (void);
extern void hs_exit_nowait(void);
extern void hs_set_argv (int argc, char *argv[]);
extern void hs_thread_done (void);
extern void hs_restoreConsoleCP (void);

extern void hs_perform_gc (void);
# 117 "includes/HsFFI.h"
extern void hs_lock_stable_ptr_table (void);


extern void hs_lock_stable_tables (void);


extern void hs_unlock_stable_ptr_table (void);


extern void hs_unlock_stable_tables (void);




extern void hs_free_stable_ptr_unsafe (HsStablePtr sp);

extern void hs_free_stable_ptr (HsStablePtr sp);
extern void hs_free_fun_ptr (HsFunPtr fp);

extern StgPtr hs_spt_lookup(StgWord64 key[2]);
extern int hs_spt_keys(StgPtr keys[], int szKeys);
extern int hs_spt_key_count (void);

extern void hs_try_putmvar (int capability, HsStablePtr sp);
# 41 "includes/Rts.h" 2
# 1 "includes/RtsAPI.h" 1
# 12 "includes/RtsAPI.h"
       






# 1 "includes/rts/Time.h" 1
# 12 "includes/rts/Time.h"
       





typedef int64_t Time;
# 40 "includes/rts/Time.h"
static inline Time fsecondsToTime (double t)
{
    return (Time)(t * 1000000000);
}

Time getProcessElapsedTime (void);
# 20 "includes/RtsAPI.h" 2
# 1 "includes/rts/Types.h" 1
# 14 "includes/rts/Types.h"
       

# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 149 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 3 4

# 149 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 3 4
typedef long int ptrdiff_t;
# 216 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 328 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 3 4
typedef int wchar_t;
# 426 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 3 4
typedef struct {
  long long __max_align_ll __attribute__((__aligned__(__alignof__(long long))));
  long double __max_align_ld __attribute__((__aligned__(__alignof__(long double))));
# 437 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 3 4
} max_align_t;
# 17 "includes/rts/Types.h" 2
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stdbool.h" 1 3 4
# 18 "includes/rts/Types.h" 2



# 20 "includes/rts/Types.h"
typedef unsigned int nat __attribute__((deprecated));
# 29 "includes/rts/Types.h"
typedef struct StgClosure_ StgClosure;
typedef struct StgInfoTable_ StgInfoTable;
typedef struct StgTSO_ StgTSO;
# 21 "includes/RtsAPI.h" 2




typedef enum {
    NoStatus,
    Success,
    Killed,
    Interrupted,
    HeapExhausted
} SchedulerStatus;

typedef struct StgClosure_ *HaskellObj;





typedef struct Capability_ Capability;




typedef struct PauseToken_ PauseToken;





Capability *pauseTokenCapability(PauseToken *pauseToken);





typedef struct CapabilityPublic_ {
    StgFunTable f;
    StgRegTable r;
} CapabilityPublic;


# 1 "includes/rts/EventLogWriter.h" 1
# 14 "includes/rts/EventLogWriter.h"
       

# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 17 "includes/rts/EventLogWriter.h" 2





typedef struct {

    void (* initEventLogWriter) (void);




    
# 29 "includes/rts/EventLogWriter.h" 3 4
   _Bool 
# 29 "includes/rts/EventLogWriter.h"
        (* writeEventLog) (void *eventlog, size_t eventlog_size);




    void (* flushEventLog) (void);


    void (* stopEventLogWriter) (void);
} EventLogWriter;





extern const EventLogWriter FileEventLogWriter;




extern const EventLogWriter NullEventLogWriter;

enum EventLogStatus {

  EVENTLOG_NOT_SUPPORTED,

  EVENTLOG_NOT_CONFIGURED,

  EVENTLOG_RUNNING,
};




enum EventLogStatus eventLogStatus(void);







# 70 "includes/rts/EventLogWriter.h" 3 4
_Bool 
# 70 "includes/rts/EventLogWriter.h"
    startEventLogging(const EventLogWriter *writer);




void endEventLogging(void);




void flushEventLog(Capability **cap);
# 63 "includes/RtsAPI.h" 2





typedef enum {
    RtsOptsNone,
    RtsOptsIgnore,
    RtsOptsIgnoreAll,
    RtsOptsSafeOnly,
    RtsOptsAll
  } RtsOptsEnabledEnum;

struct GCDetails_;




typedef struct {


    RtsOptsEnabledEnum rts_opts_enabled;


    HsBool rts_opts_suggestions;


    const char *rts_opts;


    HsBool rts_hs_main;


    HsBool keep_cafs;


    const EventLogWriter *eventlog_writer;



    void (* defaultsHook) (void);


    void (* onExitHook) (void);


    void (* stackOverflowHook) (W_ stack_size);


    void (* outOfHeapHook) (W_ request_size, W_ heap_size);


    void (* mallocFailHook) (W_ request_size , const char *msg);


    void (* gcDoneHook) (const struct GCDetails_ *stats);


    void (* longGCSync) (uint32_t this_cap, Time time_ns);
    void (* longGCSyncEnd) (Time time_ns);
} RtsConfig;




extern const RtsConfig defaultRtsConfig;
# 137 "includes/RtsAPI.h"
typedef struct GCDetails_ {

  uint32_t gen;

  uint32_t threads;

  uint64_t allocated_bytes;



  uint64_t live_bytes;

  uint64_t large_objects_bytes;

  uint64_t compact_bytes;

  uint64_t slop_bytes;

  uint64_t mem_in_use_bytes;

  uint64_t copied_bytes;

  uint64_t par_max_copied_bytes;

  uint64_t par_balanced_copied_bytes;

  Time sync_elapsed_ns;

  Time cpu_ns;

  Time elapsed_ns;







  Time nonmoving_gc_sync_cpu_ns;


  Time nonmoving_gc_sync_elapsed_ns;


  Time nonmoving_gc_cpu_ns;


  Time nonmoving_gc_elapsed_ns;
} GCDetails;




typedef struct _RTSStats {





  uint32_t gcs;

  uint32_t major_gcs;

  uint64_t allocated_bytes;


  uint64_t max_live_bytes;

  uint64_t max_large_objects_bytes;

  uint64_t max_compact_bytes;

  uint64_t max_slop_bytes;

  uint64_t max_mem_in_use_bytes;


  uint64_t cumulative_live_bytes;

  uint64_t copied_bytes;

  uint64_t par_copied_bytes;

  uint64_t cumulative_par_max_copied_bytes;

  uint64_t cumulative_par_balanced_copied_bytes;







  Time init_cpu_ns;

  Time init_elapsed_ns;

  Time mutator_cpu_ns;

  Time mutator_elapsed_ns;

  Time gc_cpu_ns;

  Time gc_elapsed_ns;

  Time cpu_ns;

  Time elapsed_ns;




  GCDetails gc;




  uint64_t any_work;


  uint64_t scav_find_work;

  uint64_t max_n_todo_overflow;






  Time nonmoving_gc_sync_cpu_ns;


  Time nonmoving_gc_sync_elapsed_ns;


  Time nonmoving_gc_sync_max_elapsed_ns;


  Time nonmoving_gc_cpu_ns;


  Time nonmoving_gc_elapsed_ns;


  Time nonmoving_gc_max_elapsed_ns;
} RTSStats;

void getRTSStats (RTSStats *s);
int getRTSStatsEnabled (void);



uint64_t getAllocations (void);






extern void startupHaskell ( int argc, char *argv[],
                                     void (*init_root)(void) );


extern void shutdownHaskell ( void );



extern void hs_init_with_rtsopts (int *argc, char **argv[]);







extern void hs_init_ghc (int *argc, char **argv[],
                         RtsConfig rts_config);

extern void shutdownHaskellAndExit (int exitCode, int fastExit)
    __attribute__((__noreturn__));


extern void shutdownHaskellAndSignal (int sig, int fastExit)
     __attribute__((__noreturn__));


extern void getProgArgv ( int *argc, char **argv[] );
extern void setProgArgv ( int argc, char *argv[] );
extern void getFullProgArgv ( int *argc, char **argv[] );
extern void setFullProgArgv ( int argc, char *argv[] );
extern void freeFullProgArgv ( void ) ;


extern void (*exitFn)(int);
# 399 "includes/RtsAPI.h"
Capability *rts_lock (void);



void rts_unlock (Capability *token);
# 412 "includes/RtsAPI.h"
Capability *rts_unsafeGetMyCapability (void);
# 439 "includes/RtsAPI.h"
void rts_setInCallCapability (int preferred_capability, int affinity);





void rts_pinThreadToNumaNode (int node);




HaskellObj rts_mkChar ( Capability *, HsChar c );
HaskellObj rts_mkInt ( Capability *, HsInt i );
HaskellObj rts_mkInt8 ( Capability *, HsInt8 i );
HaskellObj rts_mkInt16 ( Capability *, HsInt16 i );
HaskellObj rts_mkInt32 ( Capability *, HsInt32 i );
HaskellObj rts_mkInt64 ( Capability *, HsInt64 i );
HaskellObj rts_mkWord ( Capability *, HsWord w );
HaskellObj rts_mkWord8 ( Capability *, HsWord8 w );
HaskellObj rts_mkWord16 ( Capability *, HsWord16 w );
HaskellObj rts_mkWord32 ( Capability *, HsWord32 w );
HaskellObj rts_mkWord64 ( Capability *, HsWord64 w );
HaskellObj rts_mkPtr ( Capability *, HsPtr a );
HaskellObj rts_mkFunPtr ( Capability *, HsFunPtr a );
HaskellObj rts_mkFloat ( Capability *, HsFloat f );
HaskellObj rts_mkDouble ( Capability *, HsDouble f );
HaskellObj rts_mkStablePtr ( Capability *, HsStablePtr s );
HaskellObj rts_mkBool ( Capability *, HsBool b );
HaskellObj rts_mkString ( Capability *, char *s );

HaskellObj rts_apply ( Capability *, HaskellObj, HaskellObj );




HsChar rts_getChar ( HaskellObj );
HsInt rts_getInt ( HaskellObj );
HsInt8 rts_getInt8 ( HaskellObj );
HsInt16 rts_getInt16 ( HaskellObj );
HsInt32 rts_getInt32 ( HaskellObj );
HsInt64 rts_getInt64 ( HaskellObj );
HsWord rts_getWord ( HaskellObj );
HsWord8 rts_getWord8 ( HaskellObj );
HsWord16 rts_getWord16 ( HaskellObj );
HsWord32 rts_getWord32 ( HaskellObj );
HsWord64 rts_getWord64 ( HaskellObj );
HsPtr rts_getPtr ( HaskellObj );
HsFunPtr rts_getFunPtr ( HaskellObj );
HsFloat rts_getFloat ( HaskellObj );
HsDouble rts_getDouble ( HaskellObj );
HsStablePtr rts_getStablePtr ( HaskellObj );
HsBool rts_getBool ( HaskellObj );
# 507 "includes/RtsAPI.h"
void rts_eval ( Capability **,
                           HaskellObj p,
                           HaskellObj *ret);

void rts_eval_ ( Capability **,
                            HaskellObj p,
                            unsigned int stack_size,
                            HaskellObj *ret);

void rts_evalIO ( Capability **,
                             HaskellObj p,
                             HaskellObj *ret);

void rts_evalStableIOMain ( Capability **,
                                       HsStablePtr s,
                                       HsStablePtr *ret);

void rts_evalStableIO ( Capability **,
                                   HsStablePtr s,
                                   HsStablePtr *ret);

void rts_evalLazyIO ( Capability **,
                                 HaskellObj p,
                                 HaskellObj *ret);

void rts_evalLazyIO_ ( Capability **,
                                  HaskellObj p,
                                  unsigned int stack_size,
                                  HaskellObj *ret);

void rts_inCall ( Capability **,
                             HaskellObj p,
                             HaskellObj *ret);

void rts_checkSchedStatus (char* site, Capability *);

SchedulerStatus rts_getSchedStatus (Capability *cap);



PauseToken *rts_pause (void);




void rts_resume (PauseToken *pauseToken);



# 555 "includes/RtsAPI.h" 3 4
_Bool 
# 555 "includes/RtsAPI.h"
    rts_isPaused(void);



typedef void (*ListThreadsCb)(void *user, StgTSO *);
void rts_listThreads(ListThreadsCb cb, void *user);



typedef void (*ListRootsCb)(void *user, StgClosure *);
void rts_listMiscRoots(ListRootsCb cb, void *user);
# 578 "includes/RtsAPI.h"
void rts_done (void);
# 596 "includes/RtsAPI.h"
extern StgWord base_GHCziTopHandler_runIO_closure[];
extern StgWord base_GHCziTopHandler_runNonIO_closure[];
# 42 "includes/Rts.h" 2
# 121 "includes/Rts.h"
void _assertFail(const char *filename, unsigned int linenum)
   __attribute__((__noreturn__));

void _warnFail(const char *filename, unsigned int linenum);
# 208 "includes/Rts.h"
# 1 "/usr/include/stdlib.h" 1 3 4
# 32 "/usr/include/stdlib.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 33 "/usr/include/stdlib.h" 2 3 4








# 1 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 1 3 4
# 50 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 3 4

# 50 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 3 4
typedef enum
{
  P_ALL,
  P_PID,
  P_PGID
} idtype_t;
# 42 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 1 3 4
# 64 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 36 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endian.h" 1 3 4
# 37 "/usr/include/endian.h" 2 3 4
# 60 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;







typedef long int __quad_t;
typedef unsigned long int __u_quad_t;
# 121 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/typesizes.h" 1 3 4
# 122 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;

typedef int __daddr_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;


typedef long int __fsword_t;

typedef long int __ssize_t;


typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef __quad_t *__qaddr_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;
# 28 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 2 3 4






# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap-16.h" 1 3 4
# 36 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 2 3 4
# 44 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
static __inline unsigned int
__bswap_32 (unsigned int __bsx)
{
  return __builtin_bswap32 (__bsx);
}
# 108 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
static __inline __uint64_t
__bswap_64 (__uint64_t __bsx)
{
  return __builtin_bswap64 (__bsx);
}
# 61 "/usr/include/endian.h" 2 3 4
# 65 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 2 3 4

union wait
  {
    int w_status;
    struct
      {

 unsigned int __w_termsig:7;
 unsigned int __w_coredump:1;
 unsigned int __w_retcode:8;
 unsigned int:16;







      } __wait_terminated;
    struct
      {

 unsigned int __w_stopval:8;
 unsigned int __w_stopsig:8;
 unsigned int:16;






      } __wait_stopped;
  };
# 43 "/usr/include/stdlib.h" 2 3 4
# 67 "/usr/include/stdlib.h" 3 4
typedef union
  {
    union wait *__uptr;
    int *__iptr;
  } __WAIT_STATUS __attribute__ ((__transparent_union__));
# 95 "/usr/include/stdlib.h" 3 4


typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;







__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;


# 139 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));




extern double atof (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));

extern int atoi (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));

extern long int atol (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));





__extension__ extern long long int atoll (const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));





extern double strtod (const char *__restrict __nptr,
        char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern float strtof (const char *__restrict __nptr,
       char **__restrict __endptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

extern long double strtold (const char *__restrict __nptr,
       char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern long int strtol (const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

extern unsigned long int strtoul (const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));




__extension__
extern long long int strtoq (const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





__extension__
extern long long int strtoll (const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

# 235 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/xlocale.h" 1 3 4
# 27 "/usr/include/xlocale.h" 3 4
typedef struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
} *__locale_t;


typedef __locale_t locale_t;
# 236 "/usr/include/stdlib.h" 2 3 4



extern long int strtol_l (const char *__restrict __nptr,
     char **__restrict __endptr, int __base,
     __locale_t __loc) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 4)));

extern unsigned long int strtoul_l (const char *__restrict __nptr,
        char **__restrict __endptr,
        int __base, __locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern long long int strtoll_l (const char *__restrict __nptr,
    char **__restrict __endptr, int __base,
    __locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern unsigned long long int strtoull_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, __locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 4)));

extern double strtod_l (const char *__restrict __nptr,
   char **__restrict __endptr, __locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));

extern float strtof_l (const char *__restrict __nptr,
         char **__restrict __endptr, __locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));

extern long double strtold_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         __locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));





extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__nothrow__ , __leaf__)) atoi (const char *__nptr)
{
  return (int) strtol (__nptr, (char **) ((void *)0), 10);
}
extern __inline __attribute__ ((__gnu_inline__)) long int
__attribute__ ((__nothrow__ , __leaf__)) atol (const char *__nptr)
{
  return strtol (__nptr, (char **) ((void *)0), 10);
}




__extension__ extern __inline __attribute__ ((__gnu_inline__)) long long int
__attribute__ ((__nothrow__ , __leaf__)) atoll (const char *__nptr)
{
  return strtoll (__nptr, (char **) ((void *)0), 10);
}

# 305 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));


extern long int a64l (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));




# 1 "/usr/include/x86_64-linux-gnu/sys/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4






typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;




typedef __loff_t loff_t;



typedef __ino_t ino_t;






typedef __ino64_t ino64_t;




typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;





typedef __off_t off_t;






typedef __off64_t off64_t;




typedef __pid_t pid_t;





typedef __id_t id_t;




typedef __ssize_t ssize_t;





typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;
# 132 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/time.h" 1 3 4
# 57 "/usr/include/time.h" 3 4


typedef __clock_t clock_t;



# 73 "/usr/include/time.h" 3 4


typedef __time_t time_t;



# 91 "/usr/include/time.h" 3 4
typedef __clockid_t clockid_t;
# 103 "/usr/include/time.h" 3 4
typedef __timer_t timer_t;
# 133 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef __useconds_t useconds_t;



typedef __suseconds_t suseconds_t;





# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 147 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;
# 200 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef unsigned int u_int8_t __attribute__ ((__mode__ (__QI__)));
typedef unsigned int u_int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int u_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int u_int64_t __attribute__ ((__mode__ (__DI__)));

typedef int register_t __attribute__ ((__mode__ (__word__)));
# 219 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/select.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/select.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/select.h" 2 3 4
# 31 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/sigset.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/sigset.h" 3 4
typedef int __sig_atomic_t;




typedef struct
  {
    unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
  } __sigset_t;
# 34 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4



typedef __sigset_t sigset_t;





# 1 "/usr/include/time.h" 1 3 4
# 120 "/usr/include/time.h" 3 4
struct timespec
  {
    __time_t tv_sec;
    __syscall_slong_t tv_nsec;
  };
# 44 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/time.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/bits/time.h" 3 4
struct timeval
  {
    __time_t tv_sec;
    __suseconds_t tv_usec;
  };
# 46 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4
# 54 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef long int __fd_mask;
# 64 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef struct
  {



    __fd_mask fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];





  } fd_set;






typedef __fd_mask fd_mask;
# 96 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4

# 106 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 118 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);





# 1 "/usr/include/x86_64-linux-gnu/bits/select2.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/select2.h" 3 4
extern long int __fdelt_chk (long int __d);
extern long int __fdelt_warn (long int __d)
  __attribute__((__warning__ ("bit outside of fd_set selected")));
# 129 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4



# 220 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 3 4


__extension__
extern unsigned int gnu_dev_major (unsigned long long int __dev)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
__extension__
extern unsigned int gnu_dev_minor (unsigned long long int __dev)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
__extension__
extern unsigned long long int gnu_dev_makedev (unsigned int __major,
            unsigned int __minor)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


__extension__ extern __inline __attribute__ ((__gnu_inline__)) __attribute__ ((__const__)) unsigned int
__attribute__ ((__nothrow__ , __leaf__)) gnu_dev_major (unsigned long long int __dev)
{
  return ((__dev >> 8) & 0xfff) | ((unsigned int) (__dev >> 32) & ~0xfff);
}

__extension__ extern __inline __attribute__ ((__gnu_inline__)) __attribute__ ((__const__)) unsigned int
__attribute__ ((__nothrow__ , __leaf__)) gnu_dev_minor (unsigned long long int __dev)
{
  return (__dev & 0xff) | ((unsigned int) (__dev >> 12) & ~0xff);
}

__extension__ extern __inline __attribute__ ((__gnu_inline__)) __attribute__ ((__const__)) unsigned long long int
__attribute__ ((__nothrow__ , __leaf__)) gnu_dev_makedev (unsigned int __major, unsigned int __minor)
{
  return ((__minor & 0xff) | ((__major & 0xfff) << 8)
   | (((unsigned long long int) (__minor & ~0xff)) << 12)
   | (((unsigned long long int) (__major & ~0xfff)) << 32));
}


# 223 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4





typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 262 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __blkcnt64_t blkcnt64_t;
typedef __fsblkcnt64_t fsblkcnt64_t;
typedef __fsfilcnt64_t fsfilcnt64_t;





# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 2 3 4
# 60 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
typedef unsigned long int pthread_t;


union pthread_attr_t
{
  char __size[56];
  long int __align;
};

typedef union pthread_attr_t pthread_attr_t;





typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;
# 90 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
typedef union
{
  struct __pthread_mutex_s
  {
    int __lock;
    unsigned int __count;
    int __owner;

    unsigned int __nusers;



    int __kind;

    short __spins;
    short __elision;
    __pthread_list_t __list;
# 125 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
  } __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  struct
  {
    int __lock;
    unsigned int __futex;
    __extension__ unsigned long long int __total_seq;
    __extension__ unsigned long long int __wakeup_seq;
    __extension__ unsigned long long int __woken_seq;
    void *__mutex;
    unsigned int __nwaiters;
    unsigned int __broadcast_seq;
  } __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;





typedef union
{

  struct
  {
    int __lock;
    unsigned int __nr_readers;
    unsigned int __readers_wakeup;
    unsigned int __writer_wakeup;
    unsigned int __nr_readers_queued;
    unsigned int __nr_writers_queued;
    int __writer;
    int __shared;
    signed char __rwelision;




    unsigned char __pad1[7];


    unsigned long int __pad2;


    unsigned int __flags;

  } __data;
# 220 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 271 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



# 315 "/usr/include/stdlib.h" 2 3 4






extern long int random (void) __attribute__ ((__nothrow__ , __leaf__));


extern void srandom (unsigned int __seed) __attribute__ ((__nothrow__ , __leaf__));





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));






extern int rand (void) __attribute__ ((__nothrow__ , __leaf__));

extern void srand (unsigned int __seed) __attribute__ ((__nothrow__ , __leaf__));




extern int rand_r (unsigned int *__seed) __attribute__ ((__nothrow__ , __leaf__));







extern double drand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern double erand48 (unsigned short int __xsubi[3]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern long int nrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern long int jrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) __attribute__ ((__nothrow__ , __leaf__));
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    __extension__ unsigned long long int __a;

  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));









extern void *malloc (size_t __size) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__warn_unused_result__));

extern void *calloc (size_t __nmemb, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__warn_unused_result__));










extern void *realloc (void *__ptr, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));

extern void free (void *__ptr) __attribute__ ((__nothrow__ , __leaf__));




extern void cfree (void *__ptr) __attribute__ ((__nothrow__ , __leaf__));



# 1 "/usr/include/alloca.h" 1 3 4
# 24 "/usr/include/alloca.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 25 "/usr/include/alloca.h" 2 3 4







extern void *alloca (size_t __size) __attribute__ ((__nothrow__ , __leaf__));






# 493 "/usr/include/stdlib.h" 2 3 4





extern void *valloc (size_t __size) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__warn_unused_result__));




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));




extern void *aligned_alloc (size_t __alignment, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__alloc_size__ (2))) __attribute__ ((__warn_unused_result__));




extern void abort (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







extern int at_quick_exit (void (*__func) (void)) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern void exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));





extern void quick_exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));







extern void _Exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));






extern char *getenv (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));





extern char *secure_getenv (const char *__name)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));






extern int putenv (char *__string) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int setenv (const char *__name, const char *__value, int __replace)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));


extern int unsetenv (const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) __attribute__ ((__nothrow__ , __leaf__));
# 606 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 619 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 629 "/usr/include/stdlib.h" 3 4
extern int mkstemp64 (char *__template) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 641 "/usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 651 "/usr/include/stdlib.h" 3 4
extern int mkstemps64 (char *__template, int __suffixlen)
     __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 662 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 673 "/usr/include/stdlib.h" 3 4
extern int mkostemp (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 683 "/usr/include/stdlib.h" 3 4
extern int mkostemp64 (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 693 "/usr/include/stdlib.h" 3 4
extern int mkostemps (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 705 "/usr/include/stdlib.h" 3 4
extern int mkostemps64 (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));









extern int system (const char *__command) __attribute__ ((__warn_unused_result__));






extern char *canonicalize_file_name (const char *__name)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 733 "/usr/include/stdlib.h" 3 4
extern char *realpath (const char *__restrict __name,
         char *__restrict __resolved) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));






typedef int (*__compar_fn_t) (const void *, const void *);


typedef __compar_fn_t comparison_fn_t;



typedef int (*__compar_d_fn_t) (const void *, const void *, void *);





extern void *bsearch (const void *__key, const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) __attribute__ ((__warn_unused_result__));


# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib-bsearch.h" 1 3 4
# 19 "/usr/include/x86_64-linux-gnu/bits/stdlib-bsearch.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) void *
bsearch (const void *__key, const void *__base, size_t __nmemb, size_t __size,
  __compar_fn_t __compar)
{
  size_t __l, __u, __idx;
  const void *__p;
  int __comparison;

  __l = 0;
  __u = __nmemb;
  while (__l < __u)
    {
      __idx = (__l + __u) / 2;
      __p = (void *) (((const char *) __base) + (__idx * __size));
      __comparison = (*__compar) (__key, __p);
      if (__comparison < 0)
 __u = __idx;
      else if (__comparison > 0)
 __l = __idx + 1;
      else
 return (void *) __p;
    }

  return ((void *)0);
}
# 760 "/usr/include/stdlib.h" 2 3 4




extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));

extern void qsort_r (void *__base, size_t __nmemb, size_t __size,
       __compar_d_fn_t __compar, void *__arg)
  __attribute__ ((__nonnull__ (1, 4)));




extern int abs (int __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));
extern long int labs (long int __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));



__extension__ extern long long int llabs (long long int __x)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));







extern div_t div (int __numer, int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));
extern ldiv_t ldiv (long int __numer, long int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));




__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));

# 811 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) __attribute__ ((__warn_unused_result__));




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) __attribute__ ((__warn_unused_result__));




extern char *gcvt (double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3))) __attribute__ ((__warn_unused_result__));




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) __attribute__ ((__warn_unused_result__));
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) __attribute__ ((__warn_unused_result__));
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3))) __attribute__ ((__warn_unused_result__));




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));






extern int mblen (const char *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));


extern int mbtowc (wchar_t *__restrict __pwc,
     const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));


extern int wctomb (char *__s, wchar_t __wchar) __attribute__ ((__nothrow__ , __leaf__));



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));

extern size_t wcstombs (char *__restrict __s,
   const wchar_t *__restrict __pwcs, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__));








extern int rpmatch (const char *__response) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 898 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *const *__restrict __tokens,
        char **__restrict __valuep)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2, 3))) __attribute__ ((__warn_unused_result__));





extern void setkey (const char *__key) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







extern int posix_openpt (int __oflag) __attribute__ ((__warn_unused_result__));







extern int grantpt (int __fd) __attribute__ ((__nothrow__ , __leaf__));



extern int unlockpt (int __fd) __attribute__ ((__nothrow__ , __leaf__));




extern char *ptsname (int __fd) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));






extern int ptsname_r (int __fd, char *__buf, size_t __buflen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));


extern int getpt (void);






extern int getloadavg (double __loadavg[], int __nelem)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 3 4

extern __inline __attribute__ ((__gnu_inline__)) double
__attribute__ ((__nothrow__ , __leaf__)) atof (const char *__nptr)
{
  return strtod (__nptr, (char **) ((void *)0));
}

# 955 "/usr/include/stdlib.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/stdlib.h" 3 4
extern char *__realpath_chk (const char *__restrict __name,
        char *__restrict __resolved,
        size_t __resolvedlen) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
extern char *__realpath_alias (const char *__restrict __name, char *__restrict __resolved) __asm__ ("" "realpath") __attribute__ ((__nothrow__ , __leaf__))

                                                 __attribute__ ((__warn_unused_result__));
extern char *__realpath_chk_warn (const char *__restrict __name, char *__restrict __resolved, size_t __resolvedlen) __asm__ ("" "__realpath_chk") __attribute__ ((__nothrow__ , __leaf__))


                                                __attribute__ ((__warn_unused_result__))
     __attribute__((__warning__ ("second argument of realpath must be either NULL or at " "least PATH_MAX bytes long buffer")))
                                      ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) char *
__attribute__ ((__nothrow__ , __leaf__)) realpath (const char *__restrict __name, char *__restrict __resolved)
{
  if (__builtin_object_size (__resolved, 2 > 1) != (size_t) -1)
    {




      return __realpath_chk (__name, __resolved, __builtin_object_size (__resolved, 2 > 1));
    }

  return __realpath_alias (__name, __resolved);
}


extern int __ptsname_r_chk (int __fd, char *__buf, size_t __buflen,
       size_t __nreal) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));
extern int __ptsname_r_alias (int __fd, char *__buf, size_t __buflen) __asm__ ("" "ptsname_r") __attribute__ ((__nothrow__ , __leaf__))

     __attribute__ ((__nonnull__ (2)));
extern int __ptsname_r_chk_warn (int __fd, char *__buf, size_t __buflen, size_t __nreal) __asm__ ("" "__ptsname_r_chk") __attribute__ ((__nothrow__ , __leaf__))


     __attribute__ ((__nonnull__ (2))) __attribute__((__warning__ ("ptsname_r called with buflen bigger than " "size of buf")))
                   ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) ptsname_r (int __fd, char *__buf, size_t __buflen)
{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__buflen))
 return __ptsname_r_chk (__fd, __buf, __buflen, __builtin_object_size (__buf, 2 > 1));
      if (__buflen > __builtin_object_size (__buf, 2 > 1))
 return __ptsname_r_chk_warn (__fd, __buf, __buflen, __builtin_object_size (__buf, 2 > 1));
    }
  return __ptsname_r_alias (__fd, __buf, __buflen);
}


extern int __wctomb_chk (char *__s, wchar_t __wchar, size_t __buflen)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
extern int __wctomb_alias (char *__s, wchar_t __wchar) __asm__ ("" "wctomb") __attribute__ ((__nothrow__ , __leaf__))
              __attribute__ ((__warn_unused_result__));

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) int
__attribute__ ((__nothrow__ , __leaf__)) wctomb (char *__s, wchar_t __wchar)
{







  if (__builtin_object_size (__s, 2 > 1) != (size_t) -1 && 16 > __builtin_object_size (__s, 2 > 1))
    return __wctomb_chk (__s, __wchar, __builtin_object_size (__s, 2 > 1));
  return __wctomb_alias (__s, __wchar);
}


extern size_t __mbstowcs_chk (wchar_t *__restrict __dst,
         const char *__restrict __src,
         size_t __len, size_t __dstlen) __attribute__ ((__nothrow__ , __leaf__));
extern size_t __mbstowcs_alias (wchar_t *__restrict __dst, const char *__restrict __src, size_t __len) __asm__ ("" "mbstowcs") __attribute__ ((__nothrow__ , __leaf__))


                                  ;
extern size_t __mbstowcs_chk_warn (wchar_t *__restrict __dst, const char *__restrict __src, size_t __len, size_t __dstlen) __asm__ ("" "__mbstowcs_chk") __attribute__ ((__nothrow__ , __leaf__))



     __attribute__((__warning__ ("mbstowcs called with dst buffer smaller than len " "* sizeof (wchar_t)")))
                        ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) size_t
__attribute__ ((__nothrow__ , __leaf__)) mbstowcs (wchar_t *__restrict __dst, const char *__restrict __src, size_t __len)

{
  if (__builtin_object_size (__dst, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__len))
 return __mbstowcs_chk (__dst, __src, __len,
          __builtin_object_size (__dst, 2 > 1) / sizeof (wchar_t));

      if (__len > __builtin_object_size (__dst, 2 > 1) / sizeof (wchar_t))
 return __mbstowcs_chk_warn (__dst, __src, __len,
         __builtin_object_size (__dst, 2 > 1) / sizeof (wchar_t));
    }
  return __mbstowcs_alias (__dst, __src, __len);
}


extern size_t __wcstombs_chk (char *__restrict __dst,
         const wchar_t *__restrict __src,
         size_t __len, size_t __dstlen) __attribute__ ((__nothrow__ , __leaf__));
extern size_t __wcstombs_alias (char *__restrict __dst, const wchar_t *__restrict __src, size_t __len) __asm__ ("" "wcstombs") __attribute__ ((__nothrow__ , __leaf__))


                                  ;
extern size_t __wcstombs_chk_warn (char *__restrict __dst, const wchar_t *__restrict __src, size_t __len, size_t __dstlen) __asm__ ("" "__wcstombs_chk") __attribute__ ((__nothrow__ , __leaf__))



     __attribute__((__warning__ ("wcstombs called with dst buffer smaller than len")));

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) size_t
__attribute__ ((__nothrow__ , __leaf__)) wcstombs (char *__restrict __dst, const wchar_t *__restrict __src, size_t __len)

{
  if (__builtin_object_size (__dst, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__len))
 return __wcstombs_chk (__dst, __src, __len, __builtin_object_size (__dst, 2 > 1));
      if (__len > __builtin_object_size (__dst, 2 > 1))
 return __wcstombs_chk_warn (__dst, __src, __len, __builtin_object_size (__dst, 2 > 1));
    }
  return __wcstombs_alias (__dst, __src, __len);
}
# 959 "/usr/include/stdlib.h" 2 3 4
# 967 "/usr/include/stdlib.h" 3 4

# 209 "includes/Rts.h" 2

# 1 "includes/rts/Config.h" 1
# 16 "includes/rts/Config.h"
       
# 211 "includes/Rts.h" 2


# 1 "includes/rts/Constants.h" 1
# 20 "includes/rts/Constants.h"
       
# 214 "includes/Rts.h" 2


# 1 "includes/rts/Flags.h" 1
# 14 "includes/rts/Flags.h"
       

# 1 "/usr/include/stdio.h" 1 3 4
# 29 "/usr/include/stdio.h" 3 4




# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 34 "/usr/include/stdio.h" 2 3 4
# 44 "/usr/include/stdio.h" 3 4
struct _IO_FILE;



typedef struct _IO_FILE FILE;





# 64 "/usr/include/stdio.h" 3 4
typedef struct _IO_FILE __FILE;
# 74 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/libio.h" 1 3 4
# 31 "/usr/include/libio.h" 3 4
# 1 "/usr/include/_G_config.h" 1 3 4
# 15 "/usr/include/_G_config.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 16 "/usr/include/_G_config.h" 2 3 4




# 1 "/usr/include/wchar.h" 1 3 4
# 82 "/usr/include/wchar.h" 3 4
typedef struct
{
  int __count;
  union
  {

    unsigned int __wch;



    char __wchb[4];
  } __value;
} __mbstate_t;
# 21 "/usr/include/_G_config.h" 2 3 4
typedef struct
{
  __off_t __pos;
  __mbstate_t __state;
} _G_fpos_t;
typedef struct
{
  __off64_t __pos;
  __mbstate_t __state;
} _G_fpos64_t;
# 32 "/usr/include/libio.h" 2 3 4
# 49 "/usr/include/libio.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stdarg.h" 1 3 4
# 40 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 50 "/usr/include/libio.h" 2 3 4
# 144 "/usr/include/libio.h" 3 4
struct _IO_jump_t; struct _IO_FILE;





typedef void _IO_lock_t;





struct _IO_marker {
  struct _IO_marker *_next;
  struct _IO_FILE *_sbuf;



  int _pos;
# 173 "/usr/include/libio.h" 3 4
};


enum __codecvt_result
{
  __codecvt_ok,
  __codecvt_partial,
  __codecvt_error,
  __codecvt_noconv
};
# 241 "/usr/include/libio.h" 3 4
struct _IO_FILE {
  int _flags;




  char* _IO_read_ptr;
  char* _IO_read_end;
  char* _IO_read_base;
  char* _IO_write_base;
  char* _IO_write_ptr;
  char* _IO_write_end;
  char* _IO_buf_base;
  char* _IO_buf_end;

  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;



  int _flags2;

  __off_t _old_offset;



  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];



  _IO_lock_t *_lock;
# 289 "/usr/include/libio.h" 3 4
  __off64_t _offset;







  void *__pad1;
  void *__pad2;
  void *__pad3;
  void *__pad4;

  size_t __pad5;
  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];

};


typedef struct _IO_FILE _IO_FILE;


struct _IO_FILE_plus;

extern struct _IO_FILE_plus _IO_2_1_stdin_;
extern struct _IO_FILE_plus _IO_2_1_stdout_;
extern struct _IO_FILE_plus _IO_2_1_stderr_;
# 333 "/usr/include/libio.h" 3 4
typedef __ssize_t __io_read_fn (void *__cookie, char *__buf, size_t __nbytes);







typedef __ssize_t __io_write_fn (void *__cookie, const char *__buf,
     size_t __n);







typedef int __io_seek_fn (void *__cookie, __off64_t *__pos, int __w);


typedef int __io_close_fn (void *__cookie);




typedef __io_read_fn cookie_read_function_t;
typedef __io_write_fn cookie_write_function_t;
typedef __io_seek_fn cookie_seek_function_t;
typedef __io_close_fn cookie_close_function_t;


typedef struct
{
  __io_read_fn *read;
  __io_write_fn *write;
  __io_seek_fn *seek;
  __io_close_fn *close;
} _IO_cookie_io_functions_t;
typedef _IO_cookie_io_functions_t cookie_io_functions_t;

struct _IO_cookie_file;


extern void _IO_cookie_init (struct _IO_cookie_file *__cfile, int __read_write,
        void *__cookie, _IO_cookie_io_functions_t __fns);







extern int __underflow (_IO_FILE *);
extern int __uflow (_IO_FILE *);
extern int __overflow (_IO_FILE *, int);
# 429 "/usr/include/libio.h" 3 4
extern int _IO_getc (_IO_FILE *__fp);
extern int _IO_putc (int __c, _IO_FILE *__fp);
extern int _IO_feof (_IO_FILE *__fp) __attribute__ ((__nothrow__ , __leaf__));
extern int _IO_ferror (_IO_FILE *__fp) __attribute__ ((__nothrow__ , __leaf__));

extern int _IO_peekc_locked (_IO_FILE *__fp);





extern void _IO_flockfile (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__));
extern void _IO_funlockfile (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__));
extern int _IO_ftrylockfile (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__));
# 459 "/usr/include/libio.h" 3 4
extern int _IO_vfscanf (_IO_FILE * __restrict, const char * __restrict,
   __gnuc_va_list, int *__restrict);
extern int _IO_vfprintf (_IO_FILE *__restrict, const char *__restrict,
    __gnuc_va_list);
extern __ssize_t _IO_padn (_IO_FILE *, int, __ssize_t);
extern size_t _IO_sgetn (_IO_FILE *, void *, size_t);

extern __off64_t _IO_seekoff (_IO_FILE *, __off64_t, int, int);
extern __off64_t _IO_seekpos (_IO_FILE *, __off64_t, int);

extern void _IO_free_backup_area (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__));
# 75 "/usr/include/stdio.h" 2 3 4




typedef __gnuc_va_list va_list;
# 108 "/usr/include/stdio.h" 3 4


typedef _G_fpos_t fpos_t;





typedef _G_fpos64_t fpos64_t;
# 164 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio_lim.h" 1 3 4
# 165 "/usr/include/stdio.h" 2 3 4



extern struct _IO_FILE *stdin;
extern struct _IO_FILE *stdout;
extern struct _IO_FILE *stderr;







extern int remove (const char *__filename) __attribute__ ((__nothrow__ , __leaf__));

extern int rename (const char *__old, const char *__new) __attribute__ ((__nothrow__ , __leaf__));




extern int renameat (int __oldfd, const char *__old, int __newfd,
       const char *__new) __attribute__ ((__nothrow__ , __leaf__));








extern FILE *tmpfile (void) __attribute__ ((__warn_unused_result__));
# 205 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile64 (void) __attribute__ ((__warn_unused_result__));



extern char *tmpnam (char *__s) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));





extern char *tmpnam_r (char *__s) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
# 227 "/usr/include/stdio.h" 3 4
extern char *tempnam (const char *__dir, const char *__pfx)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__warn_unused_result__));








extern int fclose (FILE *__stream);




extern int fflush (FILE *__stream);

# 252 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 262 "/usr/include/stdio.h" 3 4
extern int fcloseall (void);









extern FILE *fopen (const char *__restrict __filename,
      const char *__restrict __modes) __attribute__ ((__warn_unused_result__));




extern FILE *freopen (const char *__restrict __filename,
        const char *__restrict __modes,
        FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
# 295 "/usr/include/stdio.h" 3 4


extern FILE *fopen64 (const char *__restrict __filename,
        const char *__restrict __modes) __attribute__ ((__warn_unused_result__));
extern FILE *freopen64 (const char *__restrict __filename,
   const char *__restrict __modes,
   FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));




extern FILE *fdopen (int __fd, const char *__modes) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));





extern FILE *fopencookie (void *__restrict __magic_cookie,
     const char *__restrict __modes,
     _IO_cookie_io_functions_t __io_funcs) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));




extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));






extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) __attribute__ ((__nothrow__ , __leaf__));





extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) __attribute__ ((__nothrow__ , __leaf__));


extern void setlinebuf (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));








extern int fprintf (FILE *__restrict __stream,
      const char *__restrict __format, ...);




extern int printf (const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      const char *__restrict __format, ...) __attribute__ ((__nothrow__));





extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) __attribute__ ((__nothrow__));





extern int snprintf (char *__restrict __s, size_t __maxlen,
       const char *__restrict __format, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 0)));






extern int vasprintf (char **__restrict __ptr, const char *__restrict __f,
        __gnuc_va_list __arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 0))) __attribute__ ((__warn_unused_result__));
extern int __asprintf (char **__restrict __ptr,
         const char *__restrict __fmt, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 3))) __attribute__ ((__warn_unused_result__));
extern int asprintf (char **__restrict __ptr,
       const char *__restrict __fmt, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 3))) __attribute__ ((__warn_unused_result__));




extern int vdprintf (int __fd, const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));








extern int fscanf (FILE *__restrict __stream,
     const char *__restrict __format, ...) __attribute__ ((__warn_unused_result__));




extern int scanf (const char *__restrict __format, ...) __attribute__ ((__warn_unused_result__));

extern int sscanf (const char *__restrict __s,
     const char *__restrict __format, ...) __attribute__ ((__nothrow__ , __leaf__));
# 463 "/usr/include/stdio.h" 3 4








extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) __attribute__ ((__warn_unused_result__));





extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) __attribute__ ((__warn_unused_result__));


extern int vsscanf (const char *__restrict __s,
      const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__format__ (__scanf__, 2, 0)));
# 522 "/usr/include/stdio.h" 3 4









extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);

# 550 "/usr/include/stdio.h" 3 4
extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 561 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);











extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);

# 594 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);








extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     __attribute__ ((__warn_unused_result__));
# 640 "/usr/include/stdio.h" 3 4

# 649 "/usr/include/stdio.h" 3 4
extern char *fgets_unlocked (char *__restrict __s, int __n,
        FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
# 665 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
          size_t *__restrict __n, int __delimiter,
          FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern __ssize_t getdelim (char **__restrict __lineptr,
        size_t *__restrict __n, int __delimiter,
        FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));







extern __ssize_t getline (char **__restrict __lineptr,
       size_t *__restrict __n,
       FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));








extern int fputs (const char *__restrict __s, FILE *__restrict __stream);





extern int puts (const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));




extern size_t fwrite (const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);

# 726 "/usr/include/stdio.h" 3 4
extern int fputs_unlocked (const char *__restrict __s,
      FILE *__restrict __stream);
# 737 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);








extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) __attribute__ ((__warn_unused_result__));




extern void rewind (FILE *__stream);

# 773 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) __attribute__ ((__warn_unused_result__));
# 792 "/usr/include/stdio.h" 3 4






extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, const fpos_t *__pos);
# 815 "/usr/include/stdio.h" 3 4



extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);
extern __off64_t ftello64 (FILE *__stream) __attribute__ ((__warn_unused_result__));
extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos);
extern int fsetpos64 (FILE *__stream, const fpos64_t *__pos);




extern void clearerr (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));

extern int feof (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));

extern int ferror (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));




extern void clearerr_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));
extern int feof_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
extern int ferror_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));








extern void perror (const char *__s);






# 1 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 3 4
extern int sys_nerr;
extern const char *const sys_errlist[];


extern int _sys_nerr;
extern const char *const _sys_errlist[];
# 854 "/usr/include/stdio.h" 2 3 4




extern int fileno (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));




extern int fileno_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
# 872 "/usr/include/stdio.h" 3 4
extern FILE *popen (const char *__command, const char *__modes) __attribute__ ((__warn_unused_result__));





extern int pclose (FILE *__stream);





extern char *ctermid (char *__s) __attribute__ ((__nothrow__ , __leaf__));





extern char *cuserid (char *__s);




struct obstack;


extern int obstack_printf (struct obstack *__restrict __obstack,
      const char *__restrict __format, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 3)));
extern int obstack_vprintf (struct obstack *__restrict __obstack,
       const char *__restrict __format,
       __gnuc_va_list __args)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 0)));







extern void flockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));



extern int ftrylockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));


extern void funlockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));
# 933 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio.h" 1 3 4
# 43 "/usr/include/x86_64-linux-gnu/bits/stdio.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) int
getchar (void)
{
  return _IO_getc (stdin);
}




extern __inline __attribute__ ((__gnu_inline__)) int
fgetc_unlocked (FILE *__fp)
{
  return (__builtin_expect (((__fp)->_IO_read_ptr >= (__fp)->_IO_read_end), 0) ? __uflow (__fp) : *(unsigned char *) (__fp)->_IO_read_ptr++);
}





extern __inline __attribute__ ((__gnu_inline__)) int
getc_unlocked (FILE *__fp)
{
  return (__builtin_expect (((__fp)->_IO_read_ptr >= (__fp)->_IO_read_end), 0) ? __uflow (__fp) : *(unsigned char *) (__fp)->_IO_read_ptr++);
}


extern __inline __attribute__ ((__gnu_inline__)) int
getchar_unlocked (void)
{
  return (__builtin_expect (((stdin)->_IO_read_ptr >= (stdin)->_IO_read_end), 0) ? __uflow (stdin) : *(unsigned char *) (stdin)->_IO_read_ptr++);
}




extern __inline __attribute__ ((__gnu_inline__)) int
putchar (int __c)
{
  return _IO_putc (__c, stdout);
}




extern __inline __attribute__ ((__gnu_inline__)) int
fputc_unlocked (int __c, FILE *__stream)
{
  return (__builtin_expect (((__stream)->_IO_write_ptr >= (__stream)->_IO_write_end), 0) ? __overflow (__stream, (unsigned char) (__c)) : (unsigned char) (*(__stream)->_IO_write_ptr++ = (__c)));
}





extern __inline __attribute__ ((__gnu_inline__)) int
putc_unlocked (int __c, FILE *__stream)
{
  return (__builtin_expect (((__stream)->_IO_write_ptr >= (__stream)->_IO_write_end), 0) ? __overflow (__stream, (unsigned char) (__c)) : (unsigned char) (*(__stream)->_IO_write_ptr++ = (__c)));
}


extern __inline __attribute__ ((__gnu_inline__)) int
putchar_unlocked (int __c)
{
  return (__builtin_expect (((stdout)->_IO_write_ptr >= (stdout)->_IO_write_end), 0) ? __overflow (stdout, (unsigned char) (__c)) : (unsigned char) (*(stdout)->_IO_write_ptr++ = (__c)));
}





extern __inline __attribute__ ((__gnu_inline__)) __ssize_t
getline (char **__lineptr, size_t *__n, FILE *__stream)
{
  return __getdelim (__lineptr, __n, '\n', __stream);
}





extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__nothrow__ , __leaf__)) feof_unlocked (FILE *__stream)
{
  return (((__stream)->_flags & 0x10) != 0);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__nothrow__ , __leaf__)) ferror_unlocked (FILE *__stream)
{
  return (((__stream)->_flags & 0x20) != 0);
}
# 934 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/stdio2.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/stdio2.h" 3 4
extern int __sprintf_chk (char *__restrict __s, int __flag, size_t __slen,
     const char *__restrict __format, ...) __attribute__ ((__nothrow__ , __leaf__));
extern int __vsprintf_chk (char *__restrict __s, int __flag, size_t __slen,
      const char *__restrict __format,
      __gnuc_va_list __ap) __attribute__ ((__nothrow__ , __leaf__));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) sprintf (char *__restrict __s, const char *__restrict __fmt, ...)
{
  return __builtin___sprintf_chk (__s, 2 - 1,
      __builtin_object_size (__s, 2 > 1), __fmt, __builtin_va_arg_pack ());
}






extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) vsprintf (char *__restrict __s, const char *__restrict __fmt, __gnuc_va_list __ap)

{
  return __builtin___vsprintf_chk (__s, 2 - 1,
       __builtin_object_size (__s, 2 > 1), __fmt, __ap);
}



extern int __snprintf_chk (char *__restrict __s, size_t __n, int __flag,
      size_t __slen, const char *__restrict __format,
      ...) __attribute__ ((__nothrow__ , __leaf__));
extern int __vsnprintf_chk (char *__restrict __s, size_t __n, int __flag,
       size_t __slen, const char *__restrict __format,
       __gnuc_va_list __ap) __attribute__ ((__nothrow__ , __leaf__));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) snprintf (char *__restrict __s, size_t __n, const char *__restrict __fmt, ...)

{
  return __builtin___snprintf_chk (__s, __n, 2 - 1,
       __builtin_object_size (__s, 2 > 1), __fmt, __builtin_va_arg_pack ());
}






extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) vsnprintf (char *__restrict __s, size_t __n, const char *__restrict __fmt, __gnuc_va_list __ap)

{
  return __builtin___vsnprintf_chk (__s, __n, 2 - 1,
        __builtin_object_size (__s, 2 > 1), __fmt, __ap);
}





extern int __fprintf_chk (FILE *__restrict __stream, int __flag,
     const char *__restrict __format, ...);
extern int __printf_chk (int __flag, const char *__restrict __format, ...);
extern int __vfprintf_chk (FILE *__restrict __stream, int __flag,
      const char *__restrict __format, __gnuc_va_list __ap);
extern int __vprintf_chk (int __flag, const char *__restrict __format,
     __gnuc_va_list __ap);


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
fprintf (FILE *__restrict __stream, const char *__restrict __fmt, ...)
{
  return __fprintf_chk (__stream, 2 - 1, __fmt,
   __builtin_va_arg_pack ());
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
printf (const char *__restrict __fmt, ...)
{
  return __printf_chk (2 - 1, __fmt, __builtin_va_arg_pack ());
}







extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
vprintf (const char *__restrict __fmt, __gnuc_va_list __ap)
{

  return __vfprintf_chk (stdout, 2 - 1, __fmt, __ap);



}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
vfprintf (FILE *__restrict __stream,
   const char *__restrict __fmt, __gnuc_va_list __ap)
{
  return __vfprintf_chk (__stream, 2 - 1, __fmt, __ap);
}


extern int __dprintf_chk (int __fd, int __flag, const char *__restrict __fmt,
     ...) __attribute__ ((__format__ (__printf__, 3, 4)));
extern int __vdprintf_chk (int __fd, int __flag,
      const char *__restrict __fmt, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 3, 0)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
dprintf (int __fd, const char *__restrict __fmt, ...)
{
  return __dprintf_chk (__fd, 2 - 1, __fmt,
   __builtin_va_arg_pack ());
}





extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
vdprintf (int __fd, const char *__restrict __fmt, __gnuc_va_list __ap)
{
  return __vdprintf_chk (__fd, 2 - 1, __fmt, __ap);
}




extern int __asprintf_chk (char **__restrict __ptr, int __flag,
      const char *__restrict __fmt, ...)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__format__ (__printf__, 3, 4))) __attribute__ ((__warn_unused_result__));
extern int __vasprintf_chk (char **__restrict __ptr, int __flag,
       const char *__restrict __fmt, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__format__ (__printf__, 3, 0))) __attribute__ ((__warn_unused_result__));
extern int __obstack_printf_chk (struct obstack *__restrict __obstack,
     int __flag, const char *__restrict __format,
     ...)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__format__ (__printf__, 3, 4)));
extern int __obstack_vprintf_chk (struct obstack *__restrict __obstack,
      int __flag,
      const char *__restrict __format,
      __gnuc_va_list __args)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__format__ (__printf__, 3, 0)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) asprintf (char **__restrict __ptr, const char *__restrict __fmt, ...)
{
  return __asprintf_chk (__ptr, 2 - 1, __fmt,
    __builtin_va_arg_pack ());
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) __asprintf (char **__restrict __ptr, const char *__restrict __fmt, ...)

{
  return __asprintf_chk (__ptr, 2 - 1, __fmt,
    __builtin_va_arg_pack ());
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) obstack_printf (struct obstack *__restrict __obstack, const char *__restrict __fmt, ...)

{
  return __obstack_printf_chk (__obstack, 2 - 1, __fmt,
          __builtin_va_arg_pack ());
}
# 206 "/usr/include/x86_64-linux-gnu/bits/stdio2.h" 3 4
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) vasprintf (char **__restrict __ptr, const char *__restrict __fmt, __gnuc_va_list __ap)

{
  return __vasprintf_chk (__ptr, 2 - 1, __fmt, __ap);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__nothrow__ , __leaf__)) obstack_vprintf (struct obstack *__restrict __obstack, const char *__restrict __fmt, __gnuc_va_list __ap)

{
  return __obstack_vprintf_chk (__obstack, 2 - 1, __fmt,
    __ap);
}
# 241 "/usr/include/x86_64-linux-gnu/bits/stdio2.h" 3 4
extern char *__fgets_chk (char *__restrict __s, size_t __size, int __n,
     FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern char *__fgets_alias (char *__restrict __s, int __n, FILE *__restrict __stream) __asm__ ("" "fgets")

                                        __attribute__ ((__warn_unused_result__));
extern char *__fgets_chk_warn (char *__restrict __s, size_t __size, int __n, FILE *__restrict __stream) __asm__ ("" "__fgets_chk")


     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("fgets called with bigger size than length " "of destination buffer")))
                                 ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) char *
fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
{
  if (__builtin_object_size (__s, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__n) || __n <= 0)
 return __fgets_chk (__s, __builtin_object_size (__s, 2 > 1), __n, __stream);

      if ((size_t) __n > __builtin_object_size (__s, 2 > 1))
 return __fgets_chk_warn (__s, __builtin_object_size (__s, 2 > 1), __n, __stream);
    }
  return __fgets_alias (__s, __n, __stream);
}

extern size_t __fread_chk (void *__restrict __ptr, size_t __ptrlen,
      size_t __size, size_t __n,
      FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern size_t __fread_alias (void *__restrict __ptr, size_t __size, size_t __n, FILE *__restrict __stream) __asm__ ("" "fread")


            __attribute__ ((__warn_unused_result__));
extern size_t __fread_chk_warn (void *__restrict __ptr, size_t __ptrlen, size_t __size, size_t __n, FILE *__restrict __stream) __asm__ ("" "__fread_chk")




     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("fread called with bigger size * nmemb than length " "of destination buffer")))
                                 ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) size_t
fread (void *__restrict __ptr, size_t __size, size_t __n,
       FILE *__restrict __stream)
{
  if (__builtin_object_size (__ptr, 0) != (size_t) -1)
    {
      if (!__builtin_constant_p (__size)
   || !__builtin_constant_p (__n)
   || (__size | __n) >= (((size_t) 1) << (8 * sizeof (size_t) / 2)))
 return __fread_chk (__ptr, __builtin_object_size (__ptr, 0), __size, __n, __stream);

      if (__size * __n > __builtin_object_size (__ptr, 0))
 return __fread_chk_warn (__ptr, __builtin_object_size (__ptr, 0), __size, __n, __stream);
    }
  return __fread_alias (__ptr, __size, __n, __stream);
}


extern char *__fgets_unlocked_chk (char *__restrict __s, size_t __size,
       int __n, FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern char *__fgets_unlocked_alias (char *__restrict __s, int __n, FILE *__restrict __stream) __asm__ ("" "fgets_unlocked")

                                                 __attribute__ ((__warn_unused_result__));
extern char *__fgets_unlocked_chk_warn (char *__restrict __s, size_t __size, int __n, FILE *__restrict __stream) __asm__ ("" "__fgets_unlocked_chk")


     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("fgets_unlocked called with bigger size than length " "of destination buffer")))
                                 ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) char *
fgets_unlocked (char *__restrict __s, int __n, FILE *__restrict __stream)
{
  if (__builtin_object_size (__s, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__n) || __n <= 0)
 return __fgets_unlocked_chk (__s, __builtin_object_size (__s, 2 > 1), __n, __stream);

      if ((size_t) __n > __builtin_object_size (__s, 2 > 1))
 return __fgets_unlocked_chk_warn (__s, __builtin_object_size (__s, 2 > 1), __n, __stream);
    }
  return __fgets_unlocked_alias (__s, __n, __stream);
}




extern size_t __fread_unlocked_chk (void *__restrict __ptr, size_t __ptrlen,
        size_t __size, size_t __n,
        FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern size_t __fread_unlocked_alias (void *__restrict __ptr, size_t __size, size_t __n, FILE *__restrict __stream) __asm__ ("" "fread_unlocked")


                     __attribute__ ((__warn_unused_result__));
extern size_t __fread_unlocked_chk_warn (void *__restrict __ptr, size_t __ptrlen, size_t __size, size_t __n, FILE *__restrict __stream) __asm__ ("" "__fread_unlocked_chk")




     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("fread_unlocked called with bigger size * nmemb than " "length of destination buffer")))
                                        ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) size_t
fread_unlocked (void *__restrict __ptr, size_t __size, size_t __n,
  FILE *__restrict __stream)
{
  if (__builtin_object_size (__ptr, 0) != (size_t) -1)
    {
      if (!__builtin_constant_p (__size)
   || !__builtin_constant_p (__n)
   || (__size | __n) >= (((size_t) 1) << (8 * sizeof (size_t) / 2)))
 return __fread_unlocked_chk (__ptr, __builtin_object_size (__ptr, 0), __size, __n,
         __stream);

      if (__size * __n > __builtin_object_size (__ptr, 0))
 return __fread_unlocked_chk_warn (__ptr, __builtin_object_size (__ptr, 0), __size, __n,
       __stream);
    }


  if (__builtin_constant_p (__size)
      && __builtin_constant_p (__n)
      && (__size | __n) < (((size_t) 1) << (8 * sizeof (size_t) / 2))
      && __size * __n <= 8)
    {
      size_t __cnt = __size * __n;
      char *__cptr = (char *) __ptr;
      if (__cnt == 0)
 return 0;

      for (; __cnt > 0; --__cnt)
 {
   int __c = (__builtin_expect (((__stream)->_IO_read_ptr >= (__stream)->_IO_read_end), 0) ? __uflow (__stream) : *(unsigned char *) (__stream)->_IO_read_ptr++);
   if (__c == (-1))
     break;
   *__cptr++ = __c;
 }
      return (__cptr - (char *) __ptr) / __size;
    }

  return __fread_unlocked_alias (__ptr, __size, __n, __stream);
}
# 937 "/usr/include/stdio.h" 2 3 4






# 17 "includes/rts/Flags.h" 2
# 31 "includes/rts/Flags.h"

# 31 "includes/rts/Flags.h"
typedef struct _GC_FLAGS {
    FILE *statsFile;
    uint32_t giveStats;






    uint32_t maxStkSize;
    uint32_t initialStkSize;
    uint32_t stkChunkSize;
    uint32_t stkChunkBufferSize;

    uint32_t maxHeapSize;
    uint32_t minAllocAreaSize;
    uint32_t largeAllocLim;
    uint32_t nurseryChunkSize;
    uint32_t minOldGenSize;
    uint32_t heapSizeSuggestion;
    
# 51 "includes/rts/Flags.h" 3 4
   _Bool 
# 51 "includes/rts/Flags.h"
        heapSizeSuggestionAuto;
    double oldGenFactor;
    double returnDecayFactor;
    double pcFreeHeap;

    
# 56 "includes/rts/Flags.h" 3 4
   _Bool 
# 56 "includes/rts/Flags.h"
                useNonmoving;
    uint32_t generations;
    
# 58 "includes/rts/Flags.h" 3 4
   _Bool 
# 58 "includes/rts/Flags.h"
        squeezeUpdFrames;

    
# 60 "includes/rts/Flags.h" 3 4
   _Bool 
# 60 "includes/rts/Flags.h"
        compact;
    double compactThreshold;

    
# 63 "includes/rts/Flags.h" 3 4
   _Bool 
# 63 "includes/rts/Flags.h"
        sweep;

    
# 65 "includes/rts/Flags.h" 3 4
   _Bool 
# 65 "includes/rts/Flags.h"
        ringBell;

    Time idleGCDelayTime;
    Time interIdleGCWait;
    
# 69 "includes/rts/Flags.h" 3 4
   _Bool 
# 69 "includes/rts/Flags.h"
        doIdleGC;

    Time longGCSync;

    StgWord heapBase;

    StgWord allocLimitGrace;






    StgWord heapLimitGrace;






    
# 89 "includes/rts/Flags.h" 3 4
   _Bool 
# 89 "includes/rts/Flags.h"
        numa;
    StgWord numaMask;
} GC_FLAGS;


typedef struct _DEBUG_FLAGS {

    
# 96 "includes/rts/Flags.h" 3 4
   _Bool 
# 96 "includes/rts/Flags.h"
        scheduler;
    
# 97 "includes/rts/Flags.h" 3 4
   _Bool 
# 97 "includes/rts/Flags.h"
        interpreter;
    
# 98 "includes/rts/Flags.h" 3 4
   _Bool 
# 98 "includes/rts/Flags.h"
        weak;
    
# 99 "includes/rts/Flags.h" 3 4
   _Bool 
# 99 "includes/rts/Flags.h"
        gccafs;
    
# 100 "includes/rts/Flags.h" 3 4
   _Bool 
# 100 "includes/rts/Flags.h"
        gc;
    
# 101 "includes/rts/Flags.h" 3 4
   _Bool 
# 101 "includes/rts/Flags.h"
        nonmoving_gc;
    
# 102 "includes/rts/Flags.h" 3 4
   _Bool 
# 102 "includes/rts/Flags.h"
        block_alloc;
    
# 103 "includes/rts/Flags.h" 3 4
   _Bool 
# 103 "includes/rts/Flags.h"
        sanity;
    
# 104 "includes/rts/Flags.h" 3 4
   _Bool 
# 104 "includes/rts/Flags.h"
        zero_on_gc;
    
# 105 "includes/rts/Flags.h" 3 4
   _Bool 
# 105 "includes/rts/Flags.h"
        stable;
    
# 106 "includes/rts/Flags.h" 3 4
   _Bool 
# 106 "includes/rts/Flags.h"
        prof;
    
# 107 "includes/rts/Flags.h" 3 4
   _Bool 
# 107 "includes/rts/Flags.h"
        linker;
    
# 108 "includes/rts/Flags.h" 3 4
   _Bool 
# 108 "includes/rts/Flags.h"
        apply;
    
# 109 "includes/rts/Flags.h" 3 4
   _Bool 
# 109 "includes/rts/Flags.h"
        stm;
    
# 110 "includes/rts/Flags.h" 3 4
   _Bool 
# 110 "includes/rts/Flags.h"
        squeeze;
    
# 111 "includes/rts/Flags.h" 3 4
   _Bool 
# 111 "includes/rts/Flags.h"
        hpc;
    
# 112 "includes/rts/Flags.h" 3 4
   _Bool 
# 112 "includes/rts/Flags.h"
        sparks;
    
# 113 "includes/rts/Flags.h" 3 4
   _Bool 
# 113 "includes/rts/Flags.h"
        numa;
    
# 114 "includes/rts/Flags.h" 3 4
   _Bool 
# 114 "includes/rts/Flags.h"
        compact;
} DEBUG_FLAGS;


typedef struct _COST_CENTRE_FLAGS {
    uint32_t doCostCentres;






    int profilerTicks;
    int msecsPerTick;
    char const *outputFileNameStem;
} COST_CENTRE_FLAGS;


typedef struct _PROFILING_FLAGS {
    uint32_t doHeapProfile;
# 145 "includes/rts/Flags.h"
    Time heapProfileInterval;
    uint32_t heapProfileIntervalTicks;
    
# 147 "includes/rts/Flags.h" 3 4
   _Bool 
# 147 "includes/rts/Flags.h"
               startHeapProfileAtStartup;


    
# 150 "includes/rts/Flags.h" 3 4
   _Bool 
# 150 "includes/rts/Flags.h"
         showCCSOnException;

    uint32_t maxRetainerSetSize;

    uint32_t ccsLength;

    const char* modSelector;
    const char* descrSelector;
    const char* typeSelector;
    const char* ccSelector;
    const char* ccsSelector;
    const char* retainerSelector;
    const char* bioSelector;

} PROFILING_FLAGS;






typedef struct _TRACE_FLAGS {
    int tracing;
    
# 173 "includes/rts/Flags.h" 3 4
   _Bool 
# 173 "includes/rts/Flags.h"
        timestamp;
    
# 174 "includes/rts/Flags.h" 3 4
   _Bool 
# 174 "includes/rts/Flags.h"
        scheduler;
    
# 175 "includes/rts/Flags.h" 3 4
   _Bool 
# 175 "includes/rts/Flags.h"
        gc;
    
# 176 "includes/rts/Flags.h" 3 4
   _Bool 
# 176 "includes/rts/Flags.h"
        nonmoving_gc;
    
# 177 "includes/rts/Flags.h" 3 4
   _Bool 
# 177 "includes/rts/Flags.h"
        sparks_sampled;
    
# 178 "includes/rts/Flags.h" 3 4
   _Bool 
# 178 "includes/rts/Flags.h"
        sparks_full;
    
# 179 "includes/rts/Flags.h" 3 4
   _Bool 
# 179 "includes/rts/Flags.h"
        ticky;
    
# 180 "includes/rts/Flags.h" 3 4
   _Bool 
# 180 "includes/rts/Flags.h"
        user;
    Time eventlogFlushTime;
    int eventlogFlushTicks;
    char *trace_output;
    
# 184 "includes/rts/Flags.h" 3 4
   _Bool 
# 184 "includes/rts/Flags.h"
        nullWriter;
} TRACE_FLAGS;


typedef struct _CONCURRENT_FLAGS {
    Time ctxtSwitchTime;
    int ctxtSwitchTicks;
} CONCURRENT_FLAGS;
# 216 "includes/rts/Flags.h"
typedef enum _IO_MANAGER { IO_MNGR_NATIVE, IO_MNGR_POSIX } IO_MANAGER;


typedef struct _MISC_FLAGS {
    Time tickInterval;
    
# 221 "includes/rts/Flags.h" 3 4
   _Bool 
# 221 "includes/rts/Flags.h"
        install_signal_handlers;
    
# 222 "includes/rts/Flags.h" 3 4
   _Bool 
# 222 "includes/rts/Flags.h"
        install_seh_handlers;
    
# 223 "includes/rts/Flags.h" 3 4
   _Bool 
# 223 "includes/rts/Flags.h"
        generate_dump_file;
    
# 224 "includes/rts/Flags.h" 3 4
   _Bool 
# 224 "includes/rts/Flags.h"
        generate_stack_trace;
    
# 225 "includes/rts/Flags.h" 3 4
   _Bool 
# 225 "includes/rts/Flags.h"
        machineReadable;
    
# 226 "includes/rts/Flags.h" 3 4
   _Bool 
# 226 "includes/rts/Flags.h"
        disableDelayedOsMemoryReturn;





    
# 232 "includes/rts/Flags.h" 3 4
   _Bool 
# 232 "includes/rts/Flags.h"
        internalCounters;
    
# 233 "includes/rts/Flags.h" 3 4
   _Bool 
# 233 "includes/rts/Flags.h"
        linkerAlwaysPic;
    StgWord linkerMemBase;

    IO_MANAGER ioManager;
    uint32_t numIoWorkerThreads;
} MISC_FLAGS;


typedef struct _PAR_FLAGS {
  uint32_t nCapabilities;
  
# 243 "includes/rts/Flags.h" 3 4
 _Bool 
# 243 "includes/rts/Flags.h"
                migrate;
  uint32_t maxLocalSparks;
  
# 245 "includes/rts/Flags.h" 3 4
 _Bool 
# 245 "includes/rts/Flags.h"
                parGcEnabled;
  uint32_t parGcGen;

  
# 248 "includes/rts/Flags.h" 3 4
 _Bool 
# 248 "includes/rts/Flags.h"
                parGcLoadBalancingEnabled;


  uint32_t parGcLoadBalancingGen;



  uint32_t parGcNoSyncWithIdle;






  uint32_t parGcThreads;



  
# 266 "includes/rts/Flags.h" 3 4
 _Bool 
# 266 "includes/rts/Flags.h"
                setAffinity;
} PAR_FLAGS;


typedef struct _TICKY_FLAGS {
    
# 271 "includes/rts/Flags.h" 3 4
   _Bool 
# 271 "includes/rts/Flags.h"
        showTickyStats;
    FILE *tickyFile;
} TICKY_FLAGS;




typedef struct _RTS_FLAGS {

    GC_FLAGS GcFlags;
    CONCURRENT_FLAGS ConcFlags;
    MISC_FLAGS MiscFlags;
    DEBUG_FLAGS DebugFlags;
    COST_CENTRE_FLAGS CcFlags;
    PROFILING_FLAGS ProfFlags;
    TRACE_FLAGS TraceFlags;
    TICKY_FLAGS TickyFlags;
    PAR_FLAGS ParFlags;
} RTS_FLAGS;
# 301 "includes/rts/Flags.h"
extern RTS_FLAGS RtsFlags;
# 328 "includes/rts/Flags.h"
extern int rts_argc;
extern char **rts_argv;
# 217 "includes/Rts.h" 2


# 1 "includes/rts/prof/CCS.h" 1
# 14 "includes/rts/prof/CCS.h"
       
# 28 "includes/rts/prof/CCS.h"
typedef struct CostCentre_ {
    StgInt ccID;

    char * label;
    char * module;
    char * srcloc;


    StgWord64 mem_alloc;
    StgWord time_ticks;

    StgBool is_caf;

    struct CostCentre_ *link;
} CostCentre;

typedef struct CostCentreStack_ {
    StgInt ccsID;

    CostCentre *cc;

    struct CostCentreStack_ *prevStack;
    struct IndexTable_ *indexTable;
    struct CostCentreStack_ *root;
    StgWord depth;

    StgWord64 scc_count;


    StgWord selected;



    StgWord time_ticks;


    StgWord64 mem_alloc;


    StgWord64 inherited_alloc;



    StgWord inherited_ticks;

} CostCentreStack;
# 82 "includes/rts/prof/CCS.h"
void stopProfTimer ( void );
void startProfTimer ( void );
# 110 "includes/rts/prof/CCS.h"
typedef struct IndexTable_ {


    CostCentre *cc;
    CostCentreStack *ccs;
    struct IndexTable_ *next;



    
# 119 "includes/rts/prof/CCS.h" 3 4
   _Bool 
# 119 "includes/rts/prof/CCS.h"
        back_edge;
} IndexTable;
# 146 "includes/rts/prof/CCS.h"
extern CostCentre CC_MAIN[];
extern CostCentreStack CCS_MAIN[];

extern CostCentre CC_SYSTEM[];
extern CostCentreStack CCS_SYSTEM[];

extern CostCentre CC_GC[];
extern CostCentreStack CCS_GC[];

extern CostCentre CC_OVERHEAD[];
extern CostCentreStack CCS_OVERHEAD[];

extern CostCentre CC_DONT_CARE[];
extern CostCentreStack CCS_DONT_CARE[];

extern CostCentre CC_PINNED[];
extern CostCentreStack CCS_PINNED[];

extern CostCentre CC_IDLE[];
extern CostCentreStack CCS_IDLE[];



extern unsigned int era;





CostCentreStack * pushCostCentre (CostCentreStack *, CostCentre *);
void enterFunCCS (StgRegTable *reg, CostCentreStack *);
CostCentre *mkCostCentre (char *label, char *module, char *srcloc);

extern CostCentre * CC_LIST;
# 220 "includes/Rts.h" 2
# 1 "includes/rts/prof/Heap.h" 1
# 14 "includes/rts/prof/Heap.h"
       







void requestHeapCensus ( void );
void startHeapProfTimer ( void );
void stopHeapProfTimer ( void );
# 221 "includes/Rts.h" 2
# 1 "includes/rts/prof/LDV.h" 1
# 14 "includes/rts/prof/LDV.h"
       
# 222 "includes/Rts.h" 2


# 1 "includes/rts/OSThreads.h" 1
# 15 "includes/rts/OSThreads.h"
       
# 27 "includes/rts/OSThreads.h"
# 1 "/usr/include/pthread.h" 1 3 4
# 23 "/usr/include/pthread.h" 3 4
# 1 "/usr/include/sched.h" 1 3 4
# 28 "/usr/include/sched.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 29 "/usr/include/sched.h" 2 3 4





# 1 "/usr/include/time.h" 1 3 4
# 35 "/usr/include/sched.h" 2 3 4
# 43 "/usr/include/sched.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/sched.h" 1 3 4
# 72 "/usr/include/x86_64-linux-gnu/bits/sched.h" 3 4

# 72 "/usr/include/x86_64-linux-gnu/bits/sched.h" 3 4
struct sched_param
  {
    int __sched_priority;
  };





extern int clone (int (*__fn) (void *__arg), void *__child_stack,
    int __flags, void *__arg, ...) __attribute__ ((__nothrow__ , __leaf__));


extern int unshare (int __flags) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_getcpu (void) __attribute__ ((__nothrow__ , __leaf__));


extern int setns (int __fd, int __nstype) __attribute__ ((__nothrow__ , __leaf__));











struct __sched_param
  {
    int __sched_priority;
  };
# 118 "/usr/include/x86_64-linux-gnu/bits/sched.h" 3 4
typedef unsigned long int __cpu_mask;






typedef struct
{
  __cpu_mask __bits[1024 / (8 * sizeof (__cpu_mask))];
} cpu_set_t;
# 201 "/usr/include/x86_64-linux-gnu/bits/sched.h" 3 4


extern int __sched_cpucount (size_t __setsize, const cpu_set_t *__setp)
  __attribute__ ((__nothrow__ , __leaf__));
extern cpu_set_t *__sched_cpualloc (size_t __count) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));
extern void __sched_cpufree (cpu_set_t *__set) __attribute__ ((__nothrow__ , __leaf__));


# 44 "/usr/include/sched.h" 2 3 4







extern int sched_setparam (__pid_t __pid, const struct sched_param *__param)
     __attribute__ ((__nothrow__ , __leaf__));


extern int sched_getparam (__pid_t __pid, struct sched_param *__param) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_setscheduler (__pid_t __pid, int __policy,
          const struct sched_param *__param) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_getscheduler (__pid_t __pid) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_yield (void) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_get_priority_max (int __algorithm) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_get_priority_min (int __algorithm) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_rr_get_interval (__pid_t __pid, struct timespec *__t) __attribute__ ((__nothrow__ , __leaf__));
# 118 "/usr/include/sched.h" 3 4
extern int sched_setaffinity (__pid_t __pid, size_t __cpusetsize,
         const cpu_set_t *__cpuset) __attribute__ ((__nothrow__ , __leaf__));


extern int sched_getaffinity (__pid_t __pid, size_t __cpusetsize,
         cpu_set_t *__cpuset) __attribute__ ((__nothrow__ , __leaf__));



# 24 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/time.h" 1 3 4
# 29 "/usr/include/time.h" 3 4








# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 38 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/time.h" 1 3 4
# 88 "/usr/include/x86_64-linux-gnu/bits/time.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timex.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/timex.h" 3 4
struct timex
{
  unsigned int modes;
  __syscall_slong_t offset;
  __syscall_slong_t freq;
  __syscall_slong_t maxerror;
  __syscall_slong_t esterror;
  int status;
  __syscall_slong_t constant;
  __syscall_slong_t precision;
  __syscall_slong_t tolerance;
  struct timeval time;
  __syscall_slong_t tick;
  __syscall_slong_t ppsfreq;
  __syscall_slong_t jitter;
  int shift;
  __syscall_slong_t stabil;
  __syscall_slong_t jitcnt;
  __syscall_slong_t calcnt;
  __syscall_slong_t errcnt;
  __syscall_slong_t stbcnt;

  int tai;


  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32;
};
# 89 "/usr/include/x86_64-linux-gnu/bits/time.h" 2 3 4




extern int clock_adjtime (__clockid_t __clock_id, struct timex *__utx) __attribute__ ((__nothrow__ , __leaf__));


# 42 "/usr/include/time.h" 2 3 4
# 131 "/usr/include/time.h" 3 4


struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;


  long int tm_gmtoff;
  const char *tm_zone;




};








struct itimerspec
  {
    struct timespec it_interval;
    struct timespec it_value;
  };


struct sigevent;
# 186 "/usr/include/time.h" 3 4



extern clock_t clock (void) __attribute__ ((__nothrow__ , __leaf__));


extern time_t time (time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));


extern double difftime (time_t __time1, time_t __time0)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern time_t mktime (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));





extern size_t strftime (char *__restrict __s, size_t __maxsize,
   const char *__restrict __format,
   const struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));





extern char *strptime (const char *__restrict __s,
         const char *__restrict __fmt, struct tm *__tp)
     __attribute__ ((__nothrow__ , __leaf__));







extern size_t strftime_l (char *__restrict __s, size_t __maxsize,
     const char *__restrict __format,
     const struct tm *__restrict __tp,
     __locale_t __loc) __attribute__ ((__nothrow__ , __leaf__));



extern char *strptime_l (const char *__restrict __s,
    const char *__restrict __fmt, struct tm *__tp,
    __locale_t __loc) __attribute__ ((__nothrow__ , __leaf__));






extern struct tm *gmtime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));



extern struct tm *localtime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));





extern struct tm *gmtime_r (const time_t *__restrict __timer,
       struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));



extern struct tm *localtime_r (const time_t *__restrict __timer,
          struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));





extern char *asctime (const struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));


extern char *ctime (const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));







extern char *asctime_r (const struct tm *__restrict __tp,
   char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));


extern char *ctime_r (const time_t *__restrict __timer,
        char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));




extern char *__tzname[2];
extern int __daylight;
extern long int __timezone;




extern char *tzname[2];



extern void tzset (void) __attribute__ ((__nothrow__ , __leaf__));



extern int daylight;
extern long int timezone;





extern int stime (const time_t *__when) __attribute__ ((__nothrow__ , __leaf__));
# 319 "/usr/include/time.h" 3 4
extern time_t timegm (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));


extern time_t timelocal (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));


extern int dysize (int __year) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 334 "/usr/include/time.h" 3 4
extern int nanosleep (const struct timespec *__requested_time,
        struct timespec *__remaining);



extern int clock_getres (clockid_t __clock_id, struct timespec *__res) __attribute__ ((__nothrow__ , __leaf__));


extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) __attribute__ ((__nothrow__ , __leaf__));


extern int clock_settime (clockid_t __clock_id, const struct timespec *__tp)
     __attribute__ ((__nothrow__ , __leaf__));






extern int clock_nanosleep (clockid_t __clock_id, int __flags,
       const struct timespec *__req,
       struct timespec *__rem);


extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) __attribute__ ((__nothrow__ , __leaf__));




extern int timer_create (clockid_t __clock_id,
    struct sigevent *__restrict __evp,
    timer_t *__restrict __timerid) __attribute__ ((__nothrow__ , __leaf__));


extern int timer_delete (timer_t __timerid) __attribute__ ((__nothrow__ , __leaf__));


extern int timer_settime (timer_t __timerid, int __flags,
     const struct itimerspec *__restrict __value,
     struct itimerspec *__restrict __ovalue) __attribute__ ((__nothrow__ , __leaf__));


extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)
     __attribute__ ((__nothrow__ , __leaf__));


extern int timer_getoverrun (timer_t __timerid) __attribute__ ((__nothrow__ , __leaf__));





extern int timespec_get (struct timespec *__ts, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 403 "/usr/include/time.h" 3 4
extern int getdate_err;
# 412 "/usr/include/time.h" 3 4
extern struct tm *getdate (const char *__string);
# 426 "/usr/include/time.h" 3 4
extern int getdate_r (const char *__restrict __string,
        struct tm *__restrict __resbufp);



# 25 "/usr/include/pthread.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 2 3 4




typedef long int __jmp_buf[8];
# 28 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 29 "/usr/include/pthread.h" 2 3 4



enum
{
  PTHREAD_CREATE_JOINABLE,

  PTHREAD_CREATE_DETACHED

};



enum
{
  PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_ADAPTIVE_NP

  ,
  PTHREAD_MUTEX_NORMAL = PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE = PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK = PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_DEFAULT = PTHREAD_MUTEX_NORMAL



  , PTHREAD_MUTEX_FAST_NP = PTHREAD_MUTEX_TIMED_NP

};




enum
{
  PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_STALLED_NP = PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_ROBUST,
  PTHREAD_MUTEX_ROBUST_NP = PTHREAD_MUTEX_ROBUST
};





enum
{
  PTHREAD_PRIO_NONE,
  PTHREAD_PRIO_INHERIT,
  PTHREAD_PRIO_PROTECT
};
# 114 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_RWLOCK_PREFER_READER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP,
  PTHREAD_RWLOCK_DEFAULT_NP = PTHREAD_RWLOCK_PREFER_READER_NP
};
# 155 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_INHERIT_SCHED,

  PTHREAD_EXPLICIT_SCHED

};



enum
{
  PTHREAD_SCOPE_SYSTEM,

  PTHREAD_SCOPE_PROCESS

};



enum
{
  PTHREAD_PROCESS_PRIVATE,

  PTHREAD_PROCESS_SHARED

};
# 190 "/usr/include/pthread.h" 3 4
struct _pthread_cleanup_buffer
{
  void (*__routine) (void *);
  void *__arg;
  int __canceltype;
  struct _pthread_cleanup_buffer *__prev;
};


enum
{
  PTHREAD_CANCEL_ENABLE,

  PTHREAD_CANCEL_DISABLE

};
enum
{
  PTHREAD_CANCEL_DEFERRED,

  PTHREAD_CANCEL_ASYNCHRONOUS

};
# 228 "/usr/include/pthread.h" 3 4





extern int pthread_create (pthread_t *__restrict __newthread,
      const pthread_attr_t *__restrict __attr,
      void *(*__start_routine) (void *),
      void *__restrict __arg) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 3)));





extern void pthread_exit (void *__retval) __attribute__ ((__noreturn__));







extern int pthread_join (pthread_t __th, void **__thread_return);




extern int pthread_tryjoin_np (pthread_t __th, void **__thread_return) __attribute__ ((__nothrow__ , __leaf__));







extern int pthread_timedjoin_np (pthread_t __th, void **__thread_return,
     const struct timespec *__abstime);






extern int pthread_detach (pthread_t __th) __attribute__ ((__nothrow__ , __leaf__));



extern pthread_t pthread_self (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern int pthread_equal (pthread_t __thread1, pthread_t __thread2)
  __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));







extern int pthread_attr_init (pthread_attr_t *__attr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_destroy (pthread_attr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getdetachstate (const pthread_attr_t *__attr,
     int *__detachstate)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setdetachstate (pthread_attr_t *__attr,
     int __detachstate)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getguardsize (const pthread_attr_t *__attr,
          size_t *__guardsize)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setguardsize (pthread_attr_t *__attr,
          size_t __guardsize)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getschedparam (const pthread_attr_t *__restrict __attr,
           struct sched_param *__restrict __param)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedparam (pthread_attr_t *__restrict __attr,
           const struct sched_param *__restrict
           __param) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_getschedpolicy (const pthread_attr_t *__restrict
     __attr, int *__restrict __policy)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedpolicy (pthread_attr_t *__attr, int __policy)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getinheritsched (const pthread_attr_t *__restrict
      __attr, int *__restrict __inherit)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setinheritsched (pthread_attr_t *__attr,
      int __inherit)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getscope (const pthread_attr_t *__restrict __attr,
      int *__restrict __scope)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setscope (pthread_attr_t *__attr, int __scope)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getstackaddr (const pthread_attr_t *__restrict
          __attr, void **__restrict __stackaddr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__deprecated__));





extern int pthread_attr_setstackaddr (pthread_attr_t *__attr,
          void *__stackaddr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__));


extern int pthread_attr_getstacksize (const pthread_attr_t *__restrict
          __attr, size_t *__restrict __stacksize)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_attr_setstacksize (pthread_attr_t *__attr,
          size_t __stacksize)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getstack (const pthread_attr_t *__restrict __attr,
      void **__restrict __stackaddr,
      size_t *__restrict __stacksize)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2, 3)));




extern int pthread_attr_setstack (pthread_attr_t *__attr, void *__stackaddr,
      size_t __stacksize) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int pthread_attr_setaffinity_np (pthread_attr_t *__attr,
     size_t __cpusetsize,
     const cpu_set_t *__cpuset)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));



extern int pthread_attr_getaffinity_np (const pthread_attr_t *__attr,
     size_t __cpusetsize,
     cpu_set_t *__cpuset)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));


extern int pthread_getattr_default_np (pthread_attr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_setattr_default_np (const pthread_attr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));




extern int pthread_getattr_np (pthread_t __th, pthread_attr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));







extern int pthread_setschedparam (pthread_t __target_thread, int __policy,
      const struct sched_param *__param)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));


extern int pthread_getschedparam (pthread_t __target_thread,
      int *__restrict __policy,
      struct sched_param *__restrict __param)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));


extern int pthread_setschedprio (pthread_t __target_thread, int __prio)
     __attribute__ ((__nothrow__ , __leaf__));




extern int pthread_getname_np (pthread_t __target_thread, char *__buf,
          size_t __buflen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));


extern int pthread_setname_np (pthread_t __target_thread, const char *__name)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));





extern int pthread_getconcurrency (void) __attribute__ ((__nothrow__ , __leaf__));


extern int pthread_setconcurrency (int __level) __attribute__ ((__nothrow__ , __leaf__));







extern int pthread_yield (void) __attribute__ ((__nothrow__ , __leaf__));




extern int pthread_setaffinity_np (pthread_t __th, size_t __cpusetsize,
       const cpu_set_t *__cpuset)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));


extern int pthread_getaffinity_np (pthread_t __th, size_t __cpusetsize,
       cpu_set_t *__cpuset)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3)));
# 494 "/usr/include/pthread.h" 3 4
extern int pthread_once (pthread_once_t *__once_control,
    void (*__init_routine) (void)) __attribute__ ((__nonnull__ (1, 2)));
# 506 "/usr/include/pthread.h" 3 4
extern int pthread_setcancelstate (int __state, int *__oldstate);



extern int pthread_setcanceltype (int __type, int *__oldtype);


extern int pthread_cancel (pthread_t __th);




extern void pthread_testcancel (void);




typedef struct
{
  struct
  {
    __jmp_buf __cancel_jmp_buf;
    int __mask_was_saved;
  } __cancel_jmp_buf[1];
  void *__pad[4];
} __pthread_unwind_buf_t __attribute__ ((__aligned__));
# 540 "/usr/include/pthread.h" 3 4
struct __pthread_cleanup_frame
{
  void (*__cancel_routine) (void *);
  void *__cancel_arg;
  int __do_it;
  int __cancel_type;
};
# 680 "/usr/include/pthread.h" 3 4
extern void __pthread_register_cancel (__pthread_unwind_buf_t *__buf)
     ;
# 692 "/usr/include/pthread.h" 3 4
extern void __pthread_unregister_cancel (__pthread_unwind_buf_t *__buf)
  ;
# 715 "/usr/include/pthread.h" 3 4
extern void __pthread_register_cancel_defer (__pthread_unwind_buf_t *__buf)
     ;
# 728 "/usr/include/pthread.h" 3 4
extern void __pthread_unregister_cancel_restore (__pthread_unwind_buf_t *__buf)
  ;



extern void __pthread_unwind_next (__pthread_unwind_buf_t *__buf)
     __attribute__ ((__noreturn__))

     __attribute__ ((__weak__))

     ;



struct __jmp_buf_tag;
extern int __sigsetjmp (struct __jmp_buf_tag *__env, int __savemask) __attribute__ ((__nothrow__));





extern int pthread_mutex_init (pthread_mutex_t *__mutex,
          const pthread_mutexattr_t *__mutexattr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_destroy (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_trylock (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_lock (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutex_timedlock (pthread_mutex_t *__restrict __mutex,
        const struct timespec *__restrict
        __abstime) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutex_unlock (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutex_getprioceiling (const pthread_mutex_t *
      __restrict __mutex,
      int *__restrict __prioceiling)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutex_setprioceiling (pthread_mutex_t *__restrict __mutex,
      int __prioceiling,
      int *__restrict __old_ceiling)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3)));




extern int pthread_mutex_consistent (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

extern int pthread_mutex_consistent_np (pthread_mutex_t *__mutex)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 806 "/usr/include/pthread.h" 3 4
extern int pthread_mutexattr_init (pthread_mutexattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_destroy (pthread_mutexattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getpshared (const pthread_mutexattr_t *
      __restrict __attr,
      int *__restrict __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setpshared (pthread_mutexattr_t *__attr,
      int __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_gettype (const pthread_mutexattr_t *__restrict
          __attr, int *__restrict __kind)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_mutexattr_settype (pthread_mutexattr_t *__attr, int __kind)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getprotocol (const pthread_mutexattr_t *
       __restrict __attr,
       int *__restrict __protocol)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutexattr_setprotocol (pthread_mutexattr_t *__attr,
       int __protocol)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getprioceiling (const pthread_mutexattr_t *
          __restrict __attr,
          int *__restrict __prioceiling)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setprioceiling (pthread_mutexattr_t *__attr,
          int __prioceiling)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getrobust (const pthread_mutexattr_t *__attr,
     int *__robustness)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern int pthread_mutexattr_getrobust_np (const pthread_mutexattr_t *__attr,
        int *__robustness)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutexattr_setrobust (pthread_mutexattr_t *__attr,
     int __robustness)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));

extern int pthread_mutexattr_setrobust_np (pthread_mutexattr_t *__attr,
        int __robustness)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 888 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_init (pthread_rwlock_t *__restrict __rwlock,
    const pthread_rwlockattr_t *__restrict
    __attr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_destroy (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_rdlock (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_tryrdlock (pthread_rwlock_t *__rwlock)
  __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_rwlock_timedrdlock (pthread_rwlock_t *__restrict __rwlock,
           const struct timespec *__restrict
           __abstime) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_rwlock_wrlock (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_trywrlock (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_rwlock_timedwrlock (pthread_rwlock_t *__restrict __rwlock,
           const struct timespec *__restrict
           __abstime) __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_rwlock_unlock (pthread_rwlock_t *__rwlock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));





extern int pthread_rwlockattr_init (pthread_rwlockattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_destroy (pthread_rwlockattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getpshared (const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setpshared (pthread_rwlockattr_t *__attr,
       int __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getkind_np (const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pref)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setkind_np (pthread_rwlockattr_t *__attr,
       int __pref) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







extern int pthread_cond_init (pthread_cond_t *__restrict __cond,
         const pthread_condattr_t *__restrict __cond_attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_destroy (pthread_cond_t *__cond)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_signal (pthread_cond_t *__cond)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_broadcast (pthread_cond_t *__cond)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));






extern int pthread_cond_wait (pthread_cond_t *__restrict __cond,
         pthread_mutex_t *__restrict __mutex)
     __attribute__ ((__nonnull__ (1, 2)));
# 1000 "/usr/include/pthread.h" 3 4
extern int pthread_cond_timedwait (pthread_cond_t *__restrict __cond,
       pthread_mutex_t *__restrict __mutex,
       const struct timespec *__restrict __abstime)
     __attribute__ ((__nonnull__ (1, 2, 3)));




extern int pthread_condattr_init (pthread_condattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_destroy (pthread_condattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_getpshared (const pthread_condattr_t *
     __restrict __attr,
     int *__restrict __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setpshared (pthread_condattr_t *__attr,
     int __pshared) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_condattr_getclock (const pthread_condattr_t *
          __restrict __attr,
          __clockid_t *__restrict __clock_id)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setclock (pthread_condattr_t *__attr,
          __clockid_t __clock_id)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 1044 "/usr/include/pthread.h" 3 4
extern int pthread_spin_init (pthread_spinlock_t *__lock, int __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_destroy (pthread_spinlock_t *__lock)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_lock (pthread_spinlock_t *__lock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_trylock (pthread_spinlock_t *__lock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_unlock (pthread_spinlock_t *__lock)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));






extern int pthread_barrier_init (pthread_barrier_t *__restrict __barrier,
     const pthread_barrierattr_t *__restrict
     __attr, unsigned int __count)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_destroy (pthread_barrier_t *__barrier)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_wait (pthread_barrier_t *__barrier)
     __attribute__ ((__nothrow__)) __attribute__ ((__nonnull__ (1)));



extern int pthread_barrierattr_init (pthread_barrierattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_destroy (pthread_barrierattr_t *__attr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_getpshared (const pthread_barrierattr_t *
        __restrict __attr,
        int *__restrict __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_barrierattr_setpshared (pthread_barrierattr_t *__attr,
        int __pshared)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 1111 "/usr/include/pthread.h" 3 4
extern int pthread_key_create (pthread_key_t *__key,
          void (*__destr_function) (void *))
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int pthread_key_delete (pthread_key_t __key) __attribute__ ((__nothrow__ , __leaf__));


extern void *pthread_getspecific (pthread_key_t __key) __attribute__ ((__nothrow__ , __leaf__));


extern int pthread_setspecific (pthread_key_t __key,
    const void *__pointer) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int pthread_getcpuclockid (pthread_t __thread_id,
      __clockid_t *__clock_id)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));
# 1145 "/usr/include/pthread.h" 3 4
extern int pthread_atfork (void (*__prepare) (void),
      void (*__parent) (void),
      void (*__child) (void)) __attribute__ ((__nothrow__ , __leaf__));




extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__nothrow__ , __leaf__)) pthread_equal (pthread_t __thread1, pthread_t __thread2)
{
  return __thread1 == __thread2;
}



# 28 "includes/rts/OSThreads.h" 2
# 1 "/usr/include/errno.h" 1 3 4
# 31 "/usr/include/errno.h" 3 4




# 1 "/usr/include/x86_64-linux-gnu/bits/errno.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/errno.h" 3 4
# 1 "/usr/include/linux/errno.h" 1 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/errno.h" 1 3 4
# 1 "/usr/include/asm-generic/errno.h" 1 3 4



# 1 "/usr/include/asm-generic/errno-base.h" 1 3 4
# 5 "/usr/include/asm-generic/errno.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/errno.h" 2 3 4
# 1 "/usr/include/linux/errno.h" 2 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/errno.h" 2 3 4
# 50 "/usr/include/x86_64-linux-gnu/bits/errno.h" 3 4
extern int *__errno_location (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 36 "/usr/include/errno.h" 2 3 4
# 54 "/usr/include/errno.h" 3 4
extern char *program_invocation_name, *program_invocation_short_name;




# 68 "/usr/include/errno.h" 3 4
typedef int error_t;
# 29 "includes/rts/OSThreads.h" 2


# 30 "includes/rts/OSThreads.h"
typedef struct {
    pthread_cond_t cond;
# 40 "includes/rts/OSThreads.h"
} Condition;
typedef pthread_mutex_t Mutex;
typedef pthread_t OSThreadId;
typedef pthread_key_t ThreadLocalKey;
# 65 "includes/rts/OSThreads.h"
inline int OS_TRY_ACQUIRE_LOCK(pthread_mutex_t *mutex);
inline int OS_TRY_ACQUIRE_LOCK(pthread_mutex_t *mutex)
{
    ;
    return pthread_mutex_trylock(mutex);
}
# 169 "includes/rts/OSThreads.h"
extern OSThreadId osThreadId ( void );
extern void shutdownThread ( void ) __attribute__((__noreturn__));
extern void yieldThread ( void );

typedef void* OSThreadProc(void *);

extern int createOSThread ( OSThreadId* tid, char *name,
                                    OSThreadProc *startProc, void *param);
extern 
# 177 "includes/rts/OSThreads.h" 3 4
      _Bool 
# 177 "includes/rts/OSThreads.h"
           osThreadIsAlive ( OSThreadId id );
extern void interruptOSThread ( OSThreadId id );
extern void joinOSThread ( OSThreadId id );




extern void initCondition ( Condition* pCond );
extern void closeCondition ( Condition* pCond );
extern void broadcastCondition ( Condition* pCond );
extern void signalCondition ( Condition* pCond );
extern void waitCondition ( Condition* pCond, Mutex* pMut );

extern 
# 190 "includes/rts/OSThreads.h" 3 4
      _Bool 
# 190 "includes/rts/OSThreads.h"
           timedWaitCondition ( Condition* pCond, Mutex* pMut, Time timeout);




extern void initMutex ( Mutex* pMut );
extern void closeMutex ( Mutex* pMut );




void newThreadLocalKey (ThreadLocalKey *key);
void *getThreadLocalVar (ThreadLocalKey *key);
void setThreadLocalVar (ThreadLocalKey *key, void *value);
void freeThreadLocalKey (ThreadLocalKey *key);


void setThreadAffinity (uint32_t n, uint32_t m);
void setThreadNode (uint32_t node);
void releaseThreadNode (void);
# 233 "includes/rts/OSThreads.h"
int forkOS_createThread ( HsStablePtr entry );




void freeThreadingResources(void);




uint32_t getNumberOfProcessors (void);
# 262 "includes/rts/OSThreads.h"
typedef StgWord64 KernelThreadId;


KernelThreadId kernelThreadId (void);
# 225 "includes/Rts.h" 2
# 1 "includes/rts/TSANUtils.h" 1
# 226 "includes/Rts.h" 2
# 1 "includes/rts/SpinLock.h" 1
# 22 "includes/rts/SpinLock.h"
       
# 72 "includes/rts/SpinLock.h"
static inline void initSpinLock(void * p __attribute__((__unused__)))
{ }
# 227 "includes/Rts.h" 2

# 1 "includes/rts/Messages.h" 1
# 17 "includes/rts/Messages.h"
       

# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stdarg.h" 1 3 4
# 20 "includes/rts/Messages.h" 2
# 42 "includes/rts/Messages.h"
void barf(const char *s, ...)
   __attribute__((__noreturn__))
   __attribute__((format(printf, 1, 2)));

void vbarf(const char *s, va_list ap)
   __attribute__((__noreturn__));
# 59 "includes/rts/Messages.h"
void errorBelch(const char *s, ...)
   __attribute__((format (printf, 1, 2)));

void verrorBelch(const char *s, va_list ap);
# 73 "includes/rts/Messages.h"
void sysErrorBelch(const char *s, ...)
   __attribute__((format (printf, 1, 2)));

void vsysErrorBelch(const char *s, va_list ap);
# 85 "includes/rts/Messages.h"
void debugBelch(const char *s, ...)
   __attribute__((format (printf, 1, 2)));

int vdebugBelch(const char *s, va_list ap);




typedef void RtsMsgFunction(const char *, va_list);
typedef int RtsMsgFunctionRetLen(const char *, va_list);

extern RtsMsgFunction *fatalInternalErrorFn;
extern RtsMsgFunctionRetLen *debugMsgFn;
extern RtsMsgFunction *errorMsgFn;



extern RtsMsgFunction rtsFatalInternalErrorFn;
extern RtsMsgFunctionRetLen rtsDebugMsgFn;
extern RtsMsgFunction rtsErrorMsgFn;
extern RtsMsgFunction rtsSysErrorMsgFn;
# 229 "includes/Rts.h" 2
# 1 "includes/rts/Threads.h" 1
# 15 "includes/rts/Threads.h"
       
# 24 "includes/rts/Threads.h"
StgTSO *createThread (Capability *cap, W_ stack_size);





void scheduleWaitThread ( StgTSO *tso,
                                     HaskellObj* ret,
                                     Capability **cap);

StgTSO *createGenThread (Capability *cap, W_ stack_size,
                               StgClosure *closure);
StgTSO *createIOThread (Capability *cap, W_ stack_size,
                               StgClosure *closure);
StgTSO *createStrictIOThread (Capability *cap, W_ stack_size,
                               StgClosure *closure);


void * suspendThread (StgRegTable *, 
# 42 "includes/rts/Threads.h" 3 4
                                           _Bool 
# 42 "includes/rts/Threads.h"
                                                interruptible);
StgRegTable * resumeThread (void *);





# 48 "includes/rts/Threads.h" 3 4
_Bool 
# 48 "includes/rts/Threads.h"
       eq_thread (StgPtr tso1, StgPtr tso2);
int cmp_thread (StgPtr tso1, StgPtr tso2);
long rts_getThreadId (StgPtr tso);
void rts_enableThreadAllocationLimit (StgPtr tso);
void rts_disableThreadAllocationLimit (StgPtr tso);


pid_t forkProcess (HsStablePtr *entry);





HsBool rtsSupportsBoundThreads (void);




extern unsigned int n_capabilities;

static inline unsigned int getNumCapabilities(void)
{ return *&n_capabilities; }


extern uint32_t enabled_capabilities;


extern Capability MainCapability;






extern void setNumCapabilities (uint32_t new_);
# 230 "includes/Rts.h" 2


# 1 "includes/rts/storage/FunTypes.h" 1
# 9 "includes/rts/storage/FunTypes.h"
       
# 233 "includes/Rts.h" 2
# 1 "includes/rts/storage/InfoTables.h" 1
# 9 "includes/rts/storage/InfoTables.h"
       
# 40 "includes/rts/storage/InfoTables.h"
typedef struct {




    StgHalfInt closure_type_off; StgHalfWord __pad_closure_type_off;
    StgHalfInt closure_desc_off; StgHalfWord __pad_closure_desc_off;

} StgProfInfo;
# 71 "includes/rts/storage/InfoTables.h"
extern StgWord16 closure_flags[];
# 122 "includes/rts/storage/InfoTables.h"
typedef struct {
  StgWord size;
  StgWord bitmap[];
} StgLargeBitmap;
# 136 "includes/rts/storage/InfoTables.h"
typedef union {
    struct {
        StgHalfWord ptrs;
        StgHalfWord nptrs;
    } payload;

    StgWord bitmap;





    StgHalfInt large_bitmap_offset; StgHalfWord __pad_large_bitmap_offset;


    StgWord selector_offset;

} StgClosureInfo;
# 167 "includes/rts/storage/InfoTables.h"
typedef StgHalfInt StgSRTField;
# 177 "includes/rts/storage/InfoTables.h"
typedef struct StgInfoTable_ {






    StgProfInfo prof;


    StgClosureInfo layout;

    StgHalfWord type;
    StgSRTField srt;
# 201 "includes/rts/storage/InfoTables.h"
    StgCode code[];

} *StgInfoTablePtr;
# 232 "includes/rts/storage/InfoTables.h"
typedef struct StgFunInfoExtraRev_ {
    StgHalfInt slow_apply_offset; StgHalfWord __pad_slow_apply_offset;
    union {
        StgWord bitmap;
        StgHalfInt bitmap_offset; StgHalfWord __pad_bitmap_offset;
    } b;



    StgHalfWord fun_type;
    StgHalfWord arity;
} StgFunInfoExtraRev;

typedef struct StgFunInfoExtraFwd_ {
    StgHalfWord fun_type;
    StgHalfWord arity;
    StgClosure *srt;
    union {
        StgWord bitmap;
    } b;
    StgFun *slow_apply;
} StgFunInfoExtraFwd;

typedef struct {

    StgFunInfoExtraRev f;
    StgInfoTable i;




} StgFunInfoTable;


extern const StgWord stg_arg_bitmaps[];
# 277 "includes/rts/storage/InfoTables.h"
typedef struct {




    StgInfoTable i;




} StgRetInfoTable;
# 298 "includes/rts/storage/InfoTables.h"
typedef struct StgThunkInfoTable_ {




    StgInfoTable i;




} StgThunkInfoTable;





typedef struct StgConInfoTable_ {





    StgHalfInt con_desc; StgHalfWord __pad_con_desc;






    StgInfoTable i;

} StgConInfoTable;
# 234 "includes/Rts.h" 2
# 1 "includes/rts/storage/Closures.h" 1
# 9 "includes/rts/storage/Closures.h"
       
# 20 "includes/rts/storage/Closures.h"
typedef struct {
  CostCentreStack *ccs;
  union {
    StgWord trav;
    StgWord ldvw;
  } hp;




} StgProfHeader;
# 45 "includes/rts/storage/Closures.h"
typedef struct {
    StgWord pad;
} StgSMPThunkHeader;
# 56 "includes/rts/storage/Closures.h"
typedef struct {





    const StgInfoTable* info;

    StgProfHeader prof;

} StgHeader;

typedef struct {
    const StgInfoTable* info;

    StgProfHeader prof;

    StgSMPThunkHeader smp;
} StgThunkHeader;
# 88 "includes/rts/storage/Closures.h"
typedef struct StgClosure_ {
    StgHeader header;
    struct StgClosure_ *payload[];
} *StgClosurePtr;

typedef struct StgThunk_ {
    StgThunkHeader header;
    struct StgClosure_ *payload[];
} StgThunk;

typedef struct {
    StgThunkHeader header;
    StgClosure *selectee;
} StgSelector;







typedef struct {
    StgHeader header;
    StgHalfWord arity;
    StgHalfWord n_args;
    StgClosure *fun;
    StgClosure *payload[];
} StgPAP;

typedef struct {
    StgThunkHeader header;
    StgHalfWord arity;
    StgHalfWord n_args;
    StgClosure *fun;
    StgClosure *payload[];
} StgAP;

typedef struct {
    StgThunkHeader header;
    StgWord size;
    StgClosure *fun;
    StgClosure *payload[];
} StgAP_STACK;

typedef struct {
    StgHeader header;
    StgClosure *indirectee;
} StgInd;

typedef struct {
    StgHeader header;
    StgClosure *indirectee;
    StgClosure *static_link;
    const StgInfoTable *saved_info;


} StgIndStatic;

typedef struct StgBlockingQueue_ {
    StgHeader header;
    struct StgBlockingQueue_ *link;


    StgClosure *bh;
    StgTSO *owner;
    struct MessageBlackHole_ *queue;

} StgBlockingQueue;

typedef struct {
    StgHeader header;
    StgWord bytes;
    StgWord payload[];
} StgArrBytes;

typedef struct {
    StgHeader header;
    StgWord ptrs;
    StgWord size;
    StgClosure *payload[];

} StgMutArrPtrs;

typedef struct {
    StgHeader header;
    StgWord ptrs;
    StgClosure *payload[];
} StgSmallMutArrPtrs;

typedef struct {
    StgHeader header;
    StgClosure *var;
} StgMutVar;

typedef struct _StgUpdateFrame {
    StgHeader header;
    StgClosure *updatee;
} StgUpdateFrame;

typedef struct {
    StgHeader header;
    StgClosure *c;
} StgKeepAliveFrame;

typedef struct {
    StgHeader header;
    StgWord exceptions_blocked;
    StgClosure *handler;
} StgCatchFrame;

typedef struct {
    const StgInfoTable* info;
    struct StgStack_ *next_chunk;
} StgUnderflowFrame;

typedef struct {
    StgHeader header;
} StgStopFrame;

typedef struct {
  StgHeader header;
  StgWord data;
} StgIntCharlikeClosure;


typedef struct {
  StgHeader header;
} StgRetry;

typedef struct _StgStableName {
  StgHeader header;
  StgWord sn;
} StgStableName;

typedef struct _StgWeak {
  StgHeader header;
  StgClosure *cfinalizers;
  StgClosure *key;
  StgClosure *value;
  StgClosure *finalizer;
  struct _StgWeak *link;
} StgWeak;

typedef struct _StgCFinalizerList {
  StgHeader header;
  StgClosure *link;
  void (*fptr)(void);
  void *ptr;
  void *eptr;
  StgWord flag;
} StgCFinalizerList;
# 261 "includes/rts/storage/Closures.h"
typedef struct {
    StgHeader header;
    StgArrBytes *instrs;
    StgArrBytes *literals;
    StgMutArrPtrs *ptrs;
    StgHalfWord arity;
    StgHalfWord size;
    StgWord bitmap[];
} StgBCO;
# 287 "includes/rts/storage/Closures.h"
typedef struct {
    const StgInfoTable* info;
    StgWord size;
    StgClosure * fun;
    StgClosure * payload[];
} StgRetFun;



typedef struct StgMVarTSOQueue_ {
    StgHeader header;
    struct StgMVarTSOQueue_ *link;
    struct StgTSO_ *tso;
} StgMVarTSOQueue;

typedef struct {
    StgHeader header;
    struct StgMVarTSOQueue_ *head;
    struct StgMVarTSOQueue_ *tail;
    StgClosure* value;
} StgMVar;
# 333 "includes/rts/storage/Closures.h"
typedef struct StgTRecHeader_ StgTRecHeader;

typedef struct StgTVarWatchQueue_ {
  StgHeader header;
  StgClosure *closure;
  struct StgTVarWatchQueue_ *next_queue_entry;
  struct StgTVarWatchQueue_ *prev_queue_entry;
} StgTVarWatchQueue;

typedef struct {
  StgHeader header;
  StgClosure *current_value;
  StgTVarWatchQueue *first_watch_queue_entry;
  StgInt num_updates;
} StgTVar;



typedef struct {
  StgTVar *tvar;
  StgClosure *expected_value;
  StgClosure *new_value;



} TRecEntry;



typedef struct StgTRecChunk_ {
  StgHeader header;
  struct StgTRecChunk_ *prev_chunk;
  StgWord next_entry_idx;
  TRecEntry entries[16];
} StgTRecChunk;

typedef enum {
  TREC_ACTIVE,
  TREC_CONDEMNED,
  TREC_COMMITTED,
  TREC_ABORTED,
  TREC_WAITING,
} TRecState;

struct StgTRecHeader_ {
  StgHeader header;
  struct StgTRecHeader_ *enclosing_trec;
  StgTRecChunk *current_chunk;
  TRecState state;
};

typedef struct {
  StgHeader header;
  StgClosure *code;
  StgClosure *result;
} StgAtomicallyFrame;

typedef struct {
  StgHeader header;
  StgClosure *code;
  StgClosure *handler;
} StgCatchSTMFrame;

typedef struct {
  StgHeader header;
  StgWord running_alt_code;
  StgClosure *first_code;
  StgClosure *alt_code;
} StgCatchRetryFrame;





typedef struct Message_ {
    StgHeader header;
    struct Message_ *link;
} Message;

typedef struct MessageWakeup_ {
    StgHeader header;
    Message *link;
    StgTSO *tso;
} MessageWakeup;

typedef struct MessageThrowTo_ {
    StgHeader header;
    struct MessageThrowTo_ *link;
    StgTSO *source;
    StgTSO *target;
    StgClosure *exception;
} MessageThrowTo;

typedef struct MessageBlackHole_ {
    StgHeader header;
    struct MessageBlackHole_ *link;


    StgTSO *tso;
    StgClosure *bh;
} MessageBlackHole;
# 448 "includes/rts/storage/Closures.h"
typedef struct StgCompactNFDataBlock_ {
    struct StgCompactNFDataBlock_ *self;







    struct StgCompactNFData_ *owner;

    struct StgCompactNFDataBlock_ *next;

} StgCompactNFDataBlock;




typedef struct StgCompactNFData_ {
    StgHeader header;



    StgWord totalW;

    StgWord autoBlockW;

    StgPtr hp, hpLim;



    StgCompactNFDataBlock *nursery;

    StgCompactNFDataBlock *last;


    struct hashtable *hash;


    StgClosure *result;


    struct StgCompactNFData_ *link;


} StgCompactNFData;
# 235 "includes/Rts.h" 2
# 1 "includes/rts/storage/Heap.h" 1
# 9 "includes/rts/storage/Heap.h"
       



StgMutArrPtrs *heap_view_closurePtrs(Capability *cap, StgClosure *closure);

void heap_view_closure_ptrs_in_pap_payload(StgClosure *ptrs[], StgWord *nptrs
                        , StgClosure *fun, StgClosure **payload, StgWord size);

StgWord heap_view_closureSize(StgClosure *closure);
# 31 "includes/rts/storage/Heap.h"
StgWord collect_pointers(StgClosure *closure, StgClosure *ptrs[]);
# 236 "includes/Rts.h" 2
# 1 "includes/rts/storage/ClosureTypes.h" 1
# 10 "includes/rts/storage/ClosureTypes.h"
       
# 237 "includes/Rts.h" 2
# 1 "includes/rts/storage/TSO.h" 1
# 9 "includes/rts/storage/TSO.h"
       




typedef struct {
  CostCentreStack *cccs;
} StgTSOProfInfo;
# 25 "includes/rts/storage/TSO.h"
typedef StgWord64 StgThreadID;
# 34 "includes/rts/storage/TSO.h"
typedef unsigned int StgThreadReturnCode;
# 46 "includes/rts/storage/TSO.h"
typedef union {
  StgClosure *closure;
  StgTSO *prev;
  struct MessageBlackHole_ *bh;
  struct MessageThrowTo_ *throwto;
  struct MessageWakeup_ *wakeup;
  StgInt fd;




  StgWord target;





} StgTSOBlockInfo;
# 80 "includes/rts/storage/TSO.h"
typedef struct StgTSO_ {
    StgHeader header;




    struct StgTSO_* _link;
# 102 "includes/rts/storage/TSO.h"
    struct StgTSO_* global_link;





    struct StgStack_ *stackobj;
# 124 "includes/rts/storage/TSO.h"
    StgWord16 what_next;
    StgWord16 why_blocked;
    StgWord32 flags;
    StgTSOBlockInfo block_info;
    StgThreadID id;
    StgWord32 saved_errno;
    StgWord32 dirty;
    struct InCall_* bound;
    struct Capability_* cap;

    struct StgTRecHeader_ * trec;




    struct MessageThrowTo_ * blocked_exceptions;





    struct StgBlockingQueue_ *bq;
# 161 "includes/rts/storage/TSO.h"
    StgInt64 alloc_limit;
# 174 "includes/rts/storage/TSO.h"
    StgWord32 tot_stack_size;





    StgTSOProfInfo prof;





} *StgTSOPtr;
# 243 "includes/rts/storage/TSO.h"
typedef struct StgStack_ {
    StgHeader header;





    StgWord32 stack_size;

    StgWord8 dirty;
    StgWord8 marking;






    StgPtr sp;
    StgWord stack[];
} StgStack;



static inline StgPtr tso_SpLim (StgTSO* tso)
{
    return tso->stackobj->stack + 21;
}





void dirty_TSO (Capability *cap, StgTSO *tso);
void setTSOLink (Capability *cap, StgTSO *tso, StgTSO *target);
void setTSOPrev (Capability *cap, StgTSO *tso, StgTSO *target);

void dirty_STACK (Capability *cap, StgStack *stack);
# 238 "includes/Rts.h" 2
# 1 "includes/stg/MiscClosures.h" 1
# 20 "includes/stg/MiscClosures.h"
       
# 51 "includes/stg/MiscClosures.h"
extern const StgInfoTable stg_upd_frame_info;
extern const StgInfoTable stg_bh_upd_frame_info;
extern const StgInfoTable stg_marked_upd_frame_info;
extern const StgInfoTable stg_noupd_frame_info;
extern const StgInfoTable stg_catch_frame_info;
extern const StgInfoTable stg_catch_retry_frame_info;
extern const StgInfoTable stg_atomically_frame_info;
extern const StgInfoTable stg_atomically_waiting_frame_info;
extern const StgInfoTable stg_catch_stm_frame_info;
extern const StgInfoTable stg_unmaskAsyncExceptionszh_ret_info;
extern const StgInfoTable stg_maskUninterruptiblezh_ret_info;
extern const StgInfoTable stg_maskAsyncExceptionszh_ret_info;
extern const StgInfoTable stg_stack_underflow_frame_info;
extern const StgInfoTable stg_keepAlive_frame_info;
extern const StgInfoTable stg_restore_cccs_info;
extern const StgInfoTable stg_restore_cccs_eval_info;
# 83 "includes/stg/MiscClosures.h"
extern const StgInfoTable stg_ctoi_R1p_info;
extern const StgInfoTable stg_ctoi_R1unpt_info;
extern const StgInfoTable stg_ctoi_R1n_info;
extern const StgInfoTable stg_ctoi_F1_info;
extern const StgInfoTable stg_ctoi_D1_info;
extern const StgInfoTable stg_ctoi_L1_info;
extern const StgInfoTable stg_ctoi_V_info;

extern StgFunPtr stg_ctoi_t(void);
extern const StgInfoTable stg_ctoi_t0_info;
extern const StgInfoTable stg_ctoi_t1_info;
extern const StgInfoTable stg_ctoi_t2_info;
extern const StgInfoTable stg_ctoi_t3_info;
extern const StgInfoTable stg_ctoi_t4_info;
extern const StgInfoTable stg_ctoi_t5_info;
extern const StgInfoTable stg_ctoi_t6_info;
extern const StgInfoTable stg_ctoi_t7_info;
extern const StgInfoTable stg_ctoi_t8_info;
extern const StgInfoTable stg_ctoi_t9_info;

extern const StgInfoTable stg_ctoi_t10_info;
extern const StgInfoTable stg_ctoi_t11_info;
extern const StgInfoTable stg_ctoi_t12_info;
extern const StgInfoTable stg_ctoi_t13_info;
extern const StgInfoTable stg_ctoi_t14_info;
extern const StgInfoTable stg_ctoi_t15_info;
extern const StgInfoTable stg_ctoi_t16_info;
extern const StgInfoTable stg_ctoi_t17_info;
extern const StgInfoTable stg_ctoi_t18_info;
extern const StgInfoTable stg_ctoi_t19_info;

extern const StgInfoTable stg_ctoi_t20_info;
extern const StgInfoTable stg_ctoi_t21_info;
extern const StgInfoTable stg_ctoi_t22_info;
extern const StgInfoTable stg_ctoi_t23_info;
extern const StgInfoTable stg_ctoi_t24_info;
extern const StgInfoTable stg_ctoi_t25_info;
extern const StgInfoTable stg_ctoi_t26_info;
extern const StgInfoTable stg_ctoi_t27_info;
extern const StgInfoTable stg_ctoi_t28_info;
extern const StgInfoTable stg_ctoi_t29_info;

extern const StgInfoTable stg_ctoi_t30_info;
extern const StgInfoTable stg_ctoi_t31_info;
extern const StgInfoTable stg_ctoi_t32_info;
extern const StgInfoTable stg_ctoi_t33_info;
extern const StgInfoTable stg_ctoi_t34_info;
extern const StgInfoTable stg_ctoi_t35_info;
extern const StgInfoTable stg_ctoi_t36_info;
extern const StgInfoTable stg_ctoi_t37_info;
extern const StgInfoTable stg_ctoi_t38_info;
extern const StgInfoTable stg_ctoi_t39_info;

extern const StgInfoTable stg_ctoi_t40_info;
extern const StgInfoTable stg_ctoi_t41_info;
extern const StgInfoTable stg_ctoi_t42_info;
extern const StgInfoTable stg_ctoi_t43_info;
extern const StgInfoTable stg_ctoi_t44_info;
extern const StgInfoTable stg_ctoi_t45_info;
extern const StgInfoTable stg_ctoi_t46_info;
extern const StgInfoTable stg_ctoi_t47_info;
extern const StgInfoTable stg_ctoi_t48_info;
extern const StgInfoTable stg_ctoi_t49_info;

extern const StgInfoTable stg_ctoi_t50_info;
extern const StgInfoTable stg_ctoi_t51_info;
extern const StgInfoTable stg_ctoi_t52_info;
extern const StgInfoTable stg_ctoi_t53_info;
extern const StgInfoTable stg_ctoi_t54_info;
extern const StgInfoTable stg_ctoi_t55_info;
extern const StgInfoTable stg_ctoi_t56_info;
extern const StgInfoTable stg_ctoi_t57_info;
extern const StgInfoTable stg_ctoi_t58_info;
extern const StgInfoTable stg_ctoi_t59_info;

extern const StgInfoTable stg_ctoi_t60_info;
extern const StgInfoTable stg_ctoi_t61_info;
extern const StgInfoTable stg_ctoi_t62_info;

extern const StgInfoTable stg_apply_interp_info;

extern const StgInfoTable stg_IND_info;
extern const StgInfoTable stg_IND_STATIC_info;
extern const StgInfoTable stg_BLACKHOLE_info;
extern const StgInfoTable stg_CAF_BLACKHOLE_info;
extern const StgInfoTable __stg_EAGER_BLACKHOLE_info;
extern const StgInfoTable stg_WHITEHOLE_info;
extern const StgInfoTable stg_BLOCKING_QUEUE_CLEAN_info;
extern const StgInfoTable stg_BLOCKING_QUEUE_DIRTY_info;

extern const StgFunInfoTable stg_BCO_info;
extern const StgInfoTable stg_EVACUATED_info;
extern const StgInfoTable stg_WEAK_info;
extern const StgInfoTable stg_DEAD_WEAK_info;
extern const StgInfoTable stg_C_FINALIZER_LIST_info;
extern const StgInfoTable stg_STABLE_NAME_info;
extern const StgInfoTable stg_MVAR_CLEAN_info;
extern const StgInfoTable stg_MVAR_DIRTY_info;
extern const StgInfoTable stg_TVAR_CLEAN_info;
extern const StgInfoTable stg_TVAR_DIRTY_info;
extern const StgInfoTable stg_TSO_info;
extern const StgInfoTable stg_STACK_info;
extern const StgInfoTable stg_RUBBISH_ENTRY_info;
extern const StgInfoTable stg_ARR_WORDS_info;
extern const StgInfoTable stg_MUT_ARR_WORDS_info;
extern const StgInfoTable stg_MUT_ARR_PTRS_CLEAN_info;
extern const StgInfoTable stg_MUT_ARR_PTRS_DIRTY_info;
extern const StgInfoTable stg_MUT_ARR_PTRS_FROZEN_CLEAN_info;
extern const StgInfoTable stg_MUT_ARR_PTRS_FROZEN_DIRTY_info;
extern const StgInfoTable stg_SMALL_MUT_ARR_PTRS_CLEAN_info;
extern const StgInfoTable stg_SMALL_MUT_ARR_PTRS_DIRTY_info;
extern const StgInfoTable stg_SMALL_MUT_ARR_PTRS_FROZEN_CLEAN_info;
extern const StgInfoTable stg_SMALL_MUT_ARR_PTRS_FROZEN_DIRTY_info;
extern const StgInfoTable stg_MUT_VAR_CLEAN_info;
extern const StgInfoTable stg_MUT_VAR_DIRTY_info;
extern const StgInfoTable stg_END_TSO_QUEUE_info;
extern const StgInfoTable stg_GCD_CAF_info;
extern const StgInfoTable stg_STM_AWOKEN_info;
extern const StgInfoTable stg_MSG_TRY_WAKEUP_info;
extern const StgInfoTable stg_MSG_THROWTO_info;
extern const StgInfoTable stg_MSG_BLACKHOLE_info;
extern const StgInfoTable stg_MSG_NULL_info;
extern const StgInfoTable stg_MVAR_TSO_QUEUE_info;
extern const StgInfoTable stg_catch_info;
extern const StgInfoTable stg_PAP_info;
extern const StgInfoTable stg_AP_info;
extern const StgInfoTable stg_AP_NOUPD_info;
extern const StgInfoTable stg_AP_STACK_info;
extern const StgInfoTable stg_AP_STACK_NOUPD_info;
extern const StgInfoTable stg_dummy_ret_info;
extern const StgInfoTable stg_raise_info;
extern const StgInfoTable stg_raise_ret_info;
extern const StgInfoTable stg_atomically_info;
extern const StgInfoTable stg_TVAR_WATCH_QUEUE_info;
extern const StgInfoTable stg_TREC_CHUNK_info;
extern const StgInfoTable stg_TREC_HEADER_info;
extern const StgInfoTable stg_END_STM_WATCH_QUEUE_info;
extern const StgInfoTable stg_END_STM_CHUNK_LIST_info;
extern const StgInfoTable stg_NO_TREC_info;
extern const StgInfoTable stg_COMPACT_NFDATA_CLEAN_info;
extern const StgInfoTable stg_COMPACT_NFDATA_DIRTY_info;
extern const StgInfoTable stg_SRT_1_info;
extern const StgInfoTable stg_SRT_2_info;
extern const StgInfoTable stg_SRT_3_info;
extern const StgInfoTable stg_SRT_4_info;
extern const StgInfoTable stg_SRT_5_info;
extern const StgInfoTable stg_SRT_6_info;
extern const StgInfoTable stg_SRT_7_info;
extern const StgInfoTable stg_SRT_8_info;
extern const StgInfoTable stg_SRT_9_info;
extern const StgInfoTable stg_SRT_10_info;
extern const StgInfoTable stg_SRT_11_info;
extern const StgInfoTable stg_SRT_12_info;
extern const StgInfoTable stg_SRT_13_info;
extern const StgInfoTable stg_SRT_14_info;
extern const StgInfoTable stg_SRT_15_info;
extern const StgInfoTable stg_SRT_16_info;



extern StgClosure stg_END_TSO_QUEUE_closure;
extern StgClosure stg_STM_AWOKEN_closure;
extern StgClosure stg_NO_FINALIZER_closure;
extern StgClosure stg_dummy_ret_closure;
extern StgClosure stg_forceIO_closure;

extern StgClosure stg_END_STM_WATCH_QUEUE_closure;
extern StgClosure stg_END_STM_CHUNK_LIST_closure;
extern StgClosure stg_NO_TREC_closure;

extern const StgInfoTable stg_NO_FINALIZER_info;





extern StgIntCharlikeClosure stg_CHARLIKE_closure[];
extern StgIntCharlikeClosure stg_INTLIKE_closure[];




extern const StgInfoTable stg_forceIO_info;
extern const StgInfoTable stg_noforceIO_info;





extern const StgInfoTable stg_sel_0_upd_info;
extern const StgInfoTable stg_sel_1_upd_info;
extern const StgInfoTable stg_sel_2_upd_info;
extern const StgInfoTable stg_sel_3_upd_info;
extern const StgInfoTable stg_sel_4_upd_info;
extern const StgInfoTable stg_sel_5_upd_info;
extern const StgInfoTable stg_sel_6_upd_info;
extern const StgInfoTable stg_sel_7_upd_info;
extern const StgInfoTable stg_sel_8_upd_info;
extern const StgInfoTable stg_sel_9_upd_info;
extern const StgInfoTable stg_sel_10_upd_info;
extern const StgInfoTable stg_sel_11_upd_info;
extern const StgInfoTable stg_sel_12_upd_info;
extern const StgInfoTable stg_sel_13_upd_info;
extern const StgInfoTable stg_sel_14_upd_info;
extern const StgInfoTable stg_sel_15_upd_info;

extern const StgInfoTable stg_sel_0_noupd_info;
extern const StgInfoTable stg_sel_1_noupd_info;
extern const StgInfoTable stg_sel_2_noupd_info;
extern const StgInfoTable stg_sel_3_noupd_info;
extern const StgInfoTable stg_sel_4_noupd_info;
extern const StgInfoTable stg_sel_5_noupd_info;
extern const StgInfoTable stg_sel_6_noupd_info;
extern const StgInfoTable stg_sel_7_noupd_info;
extern const StgInfoTable stg_sel_8_noupd_info;
extern const StgInfoTable stg_sel_9_noupd_info;
extern const StgInfoTable stg_sel_10_noupd_info;
extern const StgInfoTable stg_sel_11_noupd_info;
extern const StgInfoTable stg_sel_12_noupd_info;
extern const StgInfoTable stg_sel_13_noupd_info;
extern const StgInfoTable stg_sel_14_noupd_info;
extern const StgInfoTable stg_sel_15_noupd_info;



extern const StgThunkInfoTable stg_ap_1_upd_info;
extern const StgThunkInfoTable stg_ap_2_upd_info;
extern const StgThunkInfoTable stg_ap_3_upd_info;
extern const StgThunkInfoTable stg_ap_4_upd_info;
extern const StgThunkInfoTable stg_ap_5_upd_info;
extern const StgThunkInfoTable stg_ap_6_upd_info;
extern const StgThunkInfoTable stg_ap_7_upd_info;




extern const StgInfoTable stg_ap_v_info;
extern const StgInfoTable stg_ap_f_info;
extern const StgInfoTable stg_ap_d_info;
extern const StgInfoTable stg_ap_l_info;
extern const StgInfoTable stg_ap_v16_info;
extern const StgInfoTable stg_ap_v32_info;
extern const StgInfoTable stg_ap_v64_info;
extern const StgInfoTable stg_ap_n_info;
extern const StgInfoTable stg_ap_p_info;
extern const StgInfoTable stg_ap_pv_info;
extern const StgInfoTable stg_ap_pp_info;
extern const StgInfoTable stg_ap_ppv_info;
extern const StgInfoTable stg_ap_ppp_info;
extern const StgInfoTable stg_ap_pppv_info;
extern const StgInfoTable stg_ap_pppp_info;
extern const StgInfoTable stg_ap_ppppp_info;
extern const StgInfoTable stg_ap_pppppp_info;

extern StgFunPtr stg_ap_0_fast(void);
extern StgFunPtr stg_ap_v_fast(void);
extern StgFunPtr stg_ap_f_fast(void);
extern StgFunPtr stg_ap_d_fast(void);
extern StgFunPtr stg_ap_l_fast(void);
extern StgFunPtr stg_ap_v16_fast(void);
extern StgFunPtr stg_ap_v32_fast(void);
extern StgFunPtr stg_ap_v64_fast(void);
extern StgFunPtr stg_ap_n_fast(void);
extern StgFunPtr stg_ap_p_fast(void);
extern StgFunPtr stg_ap_pv_fast(void);
extern StgFunPtr stg_ap_pp_fast(void);
extern StgFunPtr stg_ap_ppv_fast(void);
extern StgFunPtr stg_ap_ppp_fast(void);
extern StgFunPtr stg_ap_pppv_fast(void);
extern StgFunPtr stg_ap_pppp_fast(void);
extern StgFunPtr stg_ap_ppppp_fast(void);
extern StgFunPtr stg_ap_pppppp_fast(void);
extern StgFunPtr stg_PAP_apply(void);



extern StgFunPtr stg_gc_noregs(void);

extern const StgInfoTable stg_ret_v_info;
extern const StgInfoTable stg_ret_p_info;
extern const StgInfoTable stg_ret_n_info;
extern const StgInfoTable stg_ret_f_info;
extern const StgInfoTable stg_ret_d_info;
extern const StgInfoTable stg_ret_l_info;
extern const StgInfoTable stg_ret_t_info;

extern StgFunPtr stg_gc_prim(void);
extern StgFunPtr stg_gc_prim_p(void);
extern StgFunPtr stg_gc_prim_pp(void);
extern StgFunPtr stg_gc_prim_n(void);

extern const StgInfoTable stg_gc_prim_p_ll_ret_info;
extern StgFunPtr stg_gc_prim_p_ll(void);

extern const StgInfoTable stg_enter_info;
extern StgFunPtr __stg_gc_enter_1(void);

extern StgFunPtr stg_gc_unpt_r1(void);
extern StgFunPtr stg_gc_unbx_r1(void);
extern StgFunPtr stg_gc_f1(void);
extern StgFunPtr stg_gc_d1(void);
extern StgFunPtr stg_gc_l1(void);
extern StgFunPtr stg_gc_pp(void);
extern StgFunPtr stg_gc_ppp(void);
extern StgFunPtr stg_gc_pppp(void);

extern const StgInfoTable stg_gc_fun_info;
extern StgFunPtr __stg_gc_fun(void);

extern StgFunPtr stg_yield_noregs(void);
extern StgFunPtr stg_yield_to_interpreter(void);
extern StgFunPtr stg_block_noregs(void);
extern StgFunPtr stg_block_blackhole(void);
extern StgFunPtr stg_block_blackhole_finally(void);
extern StgFunPtr stg_block_takemvar(void);
extern StgFunPtr stg_block_readmvar(void);
extern const StgInfoTable stg_block_takemvar_info;
extern const StgInfoTable stg_block_readmvar_info;
extern StgFunPtr stg_block_putmvar(void);
extern const StgInfoTable stg_block_putmvar_info;






extern StgFunPtr stg_block_stmwait(void);
extern StgFunPtr stg_block_throwto(void);
extern const StgInfoTable stg_block_throwto_info;

extern StgFunPtr stg_readIOPortzh(void);
extern StgFunPtr stg_writeIOPortzh(void);
extern StgFunPtr stg_newIOPortzh(void);



extern const StgInfoTable stg_stop_thread_info;

extern StgFunPtr stg_returnToStackTop(void);
extern StgFunPtr stg_returnToSched(void);
extern StgFunPtr stg_returnToSchedNotPaused(void);
extern StgFunPtr stg_returnToSchedButFirst(void);
extern StgFunPtr stg_threadFinished(void);

extern StgFunPtr StgReturn(void);





extern StgFunPtr stg_decodeFloatzuIntzh(void);
extern StgFunPtr stg_decodeDoublezu2Intzh(void);
extern StgFunPtr stg_decodeDoublezuInt64zh(void);

extern StgFunPtr stg_unsafeThawArrayzh(void);
extern StgFunPtr stg_casArrayzh(void);
extern StgFunPtr stg_newByteArrayzh(void);
extern StgFunPtr stg_newPinnedByteArrayzh(void);
extern StgFunPtr stg_newAlignedPinnedByteArrayzh(void);
extern StgFunPtr stg_isByteArrayPinnedzh(void);
extern StgFunPtr stg_isMutableByteArrayPinnedzh(void);
extern StgFunPtr stg_shrinkMutableByteArrayzh(void);
extern StgFunPtr stg_resizzeMutableByteArrayzh(void);
extern StgFunPtr stg_shrinkSmallMutableArrayzh(void);
extern StgFunPtr stg_casIntArrayzh(void);
extern StgFunPtr stg_newArrayzh(void);
extern StgFunPtr stg_newArrayArrayzh(void);
extern StgFunPtr stg_copyArrayzh(void);
extern StgFunPtr stg_copyMutableArrayzh(void);
extern StgFunPtr stg_copyArrayArrayzh(void);
extern StgFunPtr stg_copyMutableArrayArrayzh(void);
extern StgFunPtr stg_cloneArrayzh(void);
extern StgFunPtr stg_cloneMutableArrayzh(void);
extern StgFunPtr stg_freezzeArrayzh(void);
extern StgFunPtr stg_thawArrayzh(void);

extern StgFunPtr stg_newSmallArrayzh(void);
extern StgFunPtr stg_unsafeThawSmallArrayzh(void);
extern StgFunPtr stg_cloneSmallArrayzh(void);
extern StgFunPtr stg_cloneSmallMutableArrayzh(void);
extern StgFunPtr stg_freezzeSmallArrayzh(void);
extern StgFunPtr stg_thawSmallArrayzh(void);
extern StgFunPtr stg_copySmallArrayzh(void);
extern StgFunPtr stg_copySmallMutableArrayzh(void);
extern StgFunPtr stg_casSmallArrayzh(void);

extern StgFunPtr stg_newMutVarzh(void);
extern StgFunPtr stg_atomicModifyMutVar2zh(void);
extern StgFunPtr stg_atomicModifyMutVarzuzh(void);
extern StgFunPtr stg_casMutVarzh(void);

extern StgFunPtr stg_isEmptyMVarzh(void);
extern StgFunPtr stg_newMVarzh(void);
extern StgFunPtr stg_takeMVarzh(void);
extern StgFunPtr stg_putMVarzh(void);
extern StgFunPtr stg_readMVarzh(void);
extern StgFunPtr stg_tryTakeMVarzh(void);
extern StgFunPtr stg_tryPutMVarzh(void);
extern StgFunPtr stg_tryReadMVarzh(void);

extern StgFunPtr stg_waitReadzh(void);
extern StgFunPtr stg_waitWritezh(void);
extern StgFunPtr stg_delayzh(void);






extern StgFunPtr stg_catchzh(void);
extern StgFunPtr stg_raisezh(void);
extern StgFunPtr stg_raiseDivZZerozh(void);
extern StgFunPtr stg_raiseUnderflowzh(void);
extern StgFunPtr stg_raiseOverflowzh(void);
extern StgFunPtr stg_raiseIOzh(void);
extern StgFunPtr stg_paniczh(void);
extern StgFunPtr stg_keepAlivezh(void);
extern StgFunPtr stg_absentErrorzh(void);

extern StgFunPtr stg_makeStableNamezh(void);
extern StgFunPtr stg_makeStablePtrzh(void);
extern StgFunPtr stg_deRefStablePtrzh(void);

extern StgFunPtr stg_compactAddzh(void);
extern StgFunPtr stg_compactAddWithSharingzh(void);
extern StgFunPtr stg_compactNewzh(void);
extern StgFunPtr stg_compactAppendzh(void);
extern StgFunPtr stg_compactResizzezh(void);
extern StgFunPtr stg_compactGetRootzh(void);
extern StgFunPtr stg_compactContainszh(void);
extern StgFunPtr stg_compactContainsAnyzh(void);
extern StgFunPtr stg_compactGetFirstBlockzh(void);
extern StgFunPtr stg_compactGetNextBlockzh(void);
extern StgFunPtr stg_compactAllocateBlockzh(void);
extern StgFunPtr stg_compactFixupPointerszh(void);
extern StgFunPtr stg_compactSizzezh(void);

extern StgFunPtr stg_forkzh(void);
extern StgFunPtr stg_forkOnzh(void);
extern StgFunPtr stg_yieldzh(void);
extern StgFunPtr stg_killMyself(void);
extern StgFunPtr stg_killThreadzh(void);
extern StgFunPtr stg_getMaskingStatezh(void);
extern StgFunPtr stg_maskAsyncExceptionszh(void);
extern StgFunPtr stg_maskUninterruptiblezh(void);
extern StgFunPtr stg_unmaskAsyncExceptionszh(void);
extern StgFunPtr stg_myThreadIdzh(void);
extern StgFunPtr stg_labelThreadzh(void);
extern StgFunPtr stg_isCurrentThreadBoundzh(void);
extern StgFunPtr stg_threadStatuszh(void);

extern StgFunPtr stg_mkWeakzh(void);
extern StgFunPtr stg_mkWeakNoFinalizzerzh(void);
extern StgFunPtr stg_mkWeakForeignzh(void);
extern StgFunPtr stg_addCFinalizzerToWeakzh(void);
extern StgFunPtr stg_finalizzeWeakzh(void);
extern StgFunPtr stg_deRefWeakzh(void);

extern StgFunPtr stg_runRWzh(void);

extern StgFunPtr stg_newBCOzh(void);
extern StgFunPtr stg_mkApUpd0zh(void);

extern StgFunPtr stg_retryzh(void);
extern StgFunPtr stg_catchRetryzh(void);
extern StgFunPtr stg_catchSTMzh(void);
extern StgFunPtr stg_atomicallyzh(void);
extern StgFunPtr stg_newTVarzh(void);
extern StgFunPtr stg_readTVarzh(void);
extern StgFunPtr stg_readTVarIOzh(void);
extern StgFunPtr stg_writeTVarzh(void);

extern StgFunPtr stg_unpackClosurezh(void);
extern StgFunPtr stg_closureSizzezh(void);
extern StgFunPtr stg_whereFromzh(void);
extern StgFunPtr stg_getApStackValzh(void);
extern StgFunPtr stg_getSparkzh(void);
extern StgFunPtr stg_numSparkszh(void);

extern StgFunPtr stg_noDuplicatezh(void);

extern StgFunPtr stg_traceCcszh(void);
extern StgFunPtr stg_clearCCSzh(void);
extern StgFunPtr stg_traceEventzh(void);
extern StgFunPtr stg_traceBinaryEventzh(void);
extern StgFunPtr stg_traceMarkerzh(void);
extern StgFunPtr stg_getThreadAllocationCounterzh(void);
extern StgFunPtr stg_setThreadAllocationCounterzh(void);
# 239 "includes/Rts.h" 2
# 1 "includes/rts/storage/Block.h" 1
# 9 "includes/rts/storage/Block.h"
       
# 89 "includes/rts/storage/Block.h"
struct NonmovingSegmentInfo {
  StgWord8 log_block_size;
  StgWord16 next_free_snap;
};

typedef struct bdescr_ {

    StgPtr start;


    union {
        StgPtr free;
# 111 "includes/rts/storage/Block.h"
        struct NonmovingSegmentInfo nonmoving_segment;
    };

    struct bdescr_ *link;

    union {
        struct bdescr_ *back;
        StgWord *bitmap;
        StgPtr scan;
    } u;

    struct generation_ *gen;

    StgWord16 gen_no;
    StgWord16 dest_no;
    StgWord16 node;

    StgWord16 flags;

    StgWord32 blocks;



    StgWord32 _padding[3];



} bdescr;
# 189 "includes/rts/storage/Block.h"
inline bdescr *Bdescr(StgPtr p);
inline bdescr *Bdescr(StgPtr p)
{
  return (bdescr *)
    ((((W_)p & ((1UL<<20)-1) & ~((1UL<<12)-1)) >> (12 -6))
     | ((W_)p & ~((1UL<<20)-1))
     );
}
# 247 "includes/rts/storage/Block.h"
static inline void
dbl_link_onto(bdescr *bd, bdescr **list)
{
  bd->link = *list;
  bd->u.back = 
# 251 "includes/rts/storage/Block.h" 3 4
              ((void *)0)
# 251 "includes/rts/storage/Block.h"
                  ;
  if (*list) {
    (*list)->u.back = bd;
  }
  *list = bd;
}

static inline void
dbl_link_remove(bdescr *bd, bdescr **list)
{
    if (bd->u.back) {
        bd->u.back->link = bd->link;
    } else {
        *list = bd->link;
    }
    if (bd->link) {
        bd->link->u.back = bd->u.back;
    }
}

static inline void
dbl_link_insert_after(bdescr *bd, bdescr *after)
{
    bd->link = after->link;
    bd->u.back = after;
    if (after->link) {
        after->link->u.back = bd;
    }
    after->link = bd;
}

static inline void
dbl_link_replace(bdescr *new_, bdescr *old, bdescr **list)
{
    new_->link = old->link;
    new_->u.back = old->u.back;
    if (old->link) {
        old->link->u.back = new_;
    }
    if (old->u.back) {
        old->u.back->link = new_;
    } else {
        *list = new_;
    }
}



extern void initBlockAllocator(void);



bdescr *allocGroup(W_ n);

inline bdescr* allocBlock(void);
inline bdescr* allocBlock(void)
{
    return allocGroup(1);
}

bdescr *allocGroupOnNode(uint32_t node, W_ n);






bdescr *allocAlignedGroupOnNode(uint32_t node, W_ n);

inline bdescr* allocBlockOnNode(uint32_t node);
inline bdescr* allocBlockOnNode(uint32_t node)
{
    return allocGroupOnNode(node,1);
}


bdescr *allocGroup_lock(W_ n);
bdescr *allocBlock_lock(void);

bdescr *allocGroupOnNode_lock(uint32_t node, W_ n);
bdescr *allocBlockOnNode_lock(uint32_t node);



void freeGroup(bdescr *p);
void freeChain(bdescr *p);


void freeGroup_lock(bdescr *p);
void freeChain_lock(bdescr *p);





static inline StgWord
round_to_mblocks(StgWord words)
{
    if (words > (((1UL<<20) - ((W_)(((W_)(0x40 * ((1UL<<20) / (1UL<<12)))+(1UL<<12)-1) & ~((1UL<<12)-1)))) / (1UL<<12)) * ((1UL<<12)/sizeof(W_))) {



        words += ((W_)(((W_)(0x40 * ((1UL<<20) / (1UL<<12)))+(1UL<<12)-1) & ~((1UL<<12)-1)))/sizeof(W_);

        if ((words % ((1UL<<20)/sizeof(W_))) < (((1UL<<20)/sizeof(W_)) / 2)) {
            words = (words / ((1UL<<20)/sizeof(W_))) * ((1UL<<20)/sizeof(W_));
        } else {
            words = ((words / ((1UL<<20)/sizeof(W_))) + 1) * ((1UL<<20)/sizeof(W_));
        }

        words -= ((W_)(((W_)(0x40 * ((1UL<<20) / (1UL<<12)))+(1UL<<12)-1) & ~((1UL<<12)-1)))/sizeof(W_);
    }
    return words;
}
# 240 "includes/Rts.h" 2
# 1 "includes/rts/storage/ClosureMacros.h" 1
# 9 "includes/rts/storage/ClosureMacros.h"
       
# 48 "includes/rts/storage/ClosureMacros.h"
static inline void SET_INFO(StgClosure *c, const StgInfoTable *info) {
    *&c->header.info = info;
}
static inline void SET_INFO_RELEASE(StgClosure *c, const StgInfoTable *info) {
    *&c->header.info = info;
}
static inline const StgInfoTable *GET_INFO(StgClosure *c) {
    return *&c->header.info;
}


inline StgInfoTable *INFO_PTR_TO_STRUCT(const StgInfoTable *info);
inline StgInfoTable *INFO_PTR_TO_STRUCT(const StgInfoTable *info) {return (StgInfoTable *)info - 1;}
inline StgRetInfoTable *RET_INFO_PTR_TO_STRUCT(const StgInfoTable *info);
inline StgRetInfoTable *RET_INFO_PTR_TO_STRUCT(const StgInfoTable *info) {return (StgRetInfoTable *)info - 1;}
static inline StgFunInfoTable *FUN_INFO_PTR_TO_STRUCT(const StgInfoTable *info) {return (StgFunInfoTable *)info - 1;}
static inline StgThunkInfoTable *THUNK_INFO_PTR_TO_STRUCT(const StgInfoTable *info) {return (StgThunkInfoTable *)info - 1;}
static inline StgConInfoTable *CON_INFO_PTR_TO_STRUCT(const StgInfoTable *info) {return (StgConInfoTable *)info - 1;}
static inline StgFunInfoTable *itbl_to_fun_itbl(const StgInfoTable *i) {return (StgFunInfoTable *)(i + 1) - 1;}
static inline StgRetInfoTable *itbl_to_ret_itbl(const StgInfoTable *i) {return (StgRetInfoTable *)(i + 1) - 1;}
static inline StgThunkInfoTable *itbl_to_thunk_itbl(const StgInfoTable *i) {return (StgThunkInfoTable *)(i + 1) - 1;}
static inline StgConInfoTable *itbl_to_con_itbl(const StgInfoTable *i) {return (StgConInfoTable *)(i + 1) - 1;}
# 84 "includes/rts/storage/ClosureMacros.h"
inline const StgInfoTable *get_itbl(const StgClosure *c);
inline const StgInfoTable *get_itbl(const StgClosure *c)
{
    return INFO_PTR_TO_STRUCT(*&c->header.info);
}

inline const StgRetInfoTable *get_ret_itbl(const StgClosure *c);
inline const StgRetInfoTable *get_ret_itbl(const StgClosure *c)
{
    return RET_INFO_PTR_TO_STRUCT(*&c->header.info);
}

static inline const StgFunInfoTable *get_fun_itbl(const StgClosure *c)
{
    return FUN_INFO_PTR_TO_STRUCT(*&c->header.info);
}

static inline const StgThunkInfoTable *get_thunk_itbl(const StgClosure *c)
{
    return THUNK_INFO_PTR_TO_STRUCT(*&c->header.info);
}

static inline const StgConInfoTable *get_con_itbl(const StgClosure *c)
{
    return CON_INFO_PTR_TO_STRUCT(*&c->header.info);
}

static inline StgHalfWord GET_TAG(const StgClosure *con)
{
    return get_itbl(con)->srt;
}
# 171 "includes/rts/storage/ClosureMacros.h"
static inline StgClosure **
STATIC_LINK(const StgInfoTable *info, StgClosure *p)
{
    switch (info->type) {
    case 21:
        return (&(p)->payload[1]);
    case 28:
        return (&(p)->payload[1]);
    default:
        return &p->payload[info->layout.payload.ptrs +
                           info->layout.payload.nptrs];
    }
}





static inline P_ CHARLIKE_CLOSURE(int n) {
    return (P_)&stg_CHARLIKE_closure[(n)-0];
}
static inline P_ INTLIKE_CLOSURE(int n) {
    return (P_)&stg_INTLIKE_closure[(n)-(-16)];
}






static inline StgWord
GET_CLOSURE_TAG(const StgClosure * p)
{
    return (StgWord)p & ((1 << 3) - 1);
}

static inline StgClosure *
UNTAG_CLOSURE(StgClosure * p)
{
    return (StgClosure*)((StgWord)p & ~((1 << 3) - 1));
}

static inline const StgClosure *
UNTAG_CONST_CLOSURE(const StgClosure * p)
{
    return (const StgClosure*)((StgWord)p & ~((1 << 3) - 1));
}

static inline StgClosure *
TAG_CLOSURE(StgWord tag,StgClosure * p)
{
    return (StgClosure*)((StgWord)p | tag);
}
# 250 "includes/rts/storage/ClosureMacros.h"
static inline 
# 250 "includes/rts/storage/ClosureMacros.h" 3 4
             _Bool 
# 250 "includes/rts/storage/ClosureMacros.h"
                  LOOKS_LIKE_INFO_PTR_NOT_NULL (StgWord p)
{
    StgInfoTable *info = INFO_PTR_TO_STRUCT((StgInfoTable *)p);
    return info->type != 0 && info->type < 64;
}

static inline 
# 256 "includes/rts/storage/ClosureMacros.h" 3 4
             _Bool 
# 256 "includes/rts/storage/ClosureMacros.h"
                  LOOKS_LIKE_INFO_PTR (StgWord p)
{
    return p && (((((StgWord)p) & 1) != 0) || LOOKS_LIKE_INFO_PTR_NOT_NULL(p));
}

static inline 
# 261 "includes/rts/storage/ClosureMacros.h" 3 4
             _Bool 
# 261 "includes/rts/storage/ClosureMacros.h"
                  LOOKS_LIKE_CLOSURE_PTR (const void *p)
{
    const StgInfoTable *info = *&UNTAG_CONST_CLOSURE((const StgClosure *) (p))->header.info;
    return LOOKS_LIKE_INFO_PTR((StgWord) info);
}





inline StgOffset PAP_sizeW ( uint32_t n_args );
inline StgOffset PAP_sizeW ( uint32_t n_args )
{ return (((sizeof(StgPAP)) + sizeof(W_) - 1) / sizeof(W_)) + n_args; }

inline StgOffset AP_sizeW ( uint32_t n_args );
inline StgOffset AP_sizeW ( uint32_t n_args )
{ return (((sizeof(StgAP)) + sizeof(W_) - 1) / sizeof(W_)) + n_args; }

inline StgOffset AP_STACK_sizeW ( uint32_t size );
inline StgOffset AP_STACK_sizeW ( uint32_t size )
{ return (((sizeof(StgAP_STACK)) + sizeof(W_) - 1) / sizeof(W_)) + size; }

inline StgOffset CONSTR_sizeW( uint32_t p, uint32_t np );
inline StgOffset CONSTR_sizeW( uint32_t p, uint32_t np )
{ return (((sizeof(StgHeader)) + sizeof(W_) - 1) / sizeof(W_)) + p + np; }

inline StgOffset THUNK_SELECTOR_sizeW ( void );
inline StgOffset THUNK_SELECTOR_sizeW ( void )
{ return (((sizeof(StgSelector)) + sizeof(W_) - 1) / sizeof(W_)); }

inline StgOffset BLACKHOLE_sizeW ( void );
inline StgOffset BLACKHOLE_sizeW ( void )
{ return (((sizeof(StgInd)) + sizeof(W_) - 1) / sizeof(W_)); }





inline StgOffset sizeW_fromITBL( const StgInfoTable* itbl );
inline StgOffset sizeW_fromITBL( const StgInfoTable* itbl )
{ return (((sizeof(StgClosure)) + sizeof(W_) - 1) / sizeof(W_))
       + (((sizeof(StgPtr)) + sizeof(W_) - 1) / sizeof(W_)) * itbl->layout.payload.ptrs
       + (((sizeof(StgWord)) + sizeof(W_) - 1) / sizeof(W_)) * itbl->layout.payload.nptrs; }

inline StgOffset thunk_sizeW_fromITBL( const StgInfoTable* itbl );
inline StgOffset thunk_sizeW_fromITBL( const StgInfoTable* itbl )
{ return (((sizeof(StgThunk)) + sizeof(W_) - 1) / sizeof(W_))
       + (((sizeof(StgPtr)) + sizeof(W_) - 1) / sizeof(W_)) * itbl->layout.payload.ptrs
       + (((sizeof(StgWord)) + sizeof(W_) - 1) / sizeof(W_)) * itbl->layout.payload.nptrs; }

inline StgOffset ap_stack_sizeW( StgAP_STACK* x );
inline StgOffset ap_stack_sizeW( StgAP_STACK* x )
{ return AP_STACK_sizeW(x->size); }

inline StgOffset ap_sizeW( StgAP* x );
inline StgOffset ap_sizeW( StgAP* x )
{ return AP_sizeW(x->n_args); }

inline StgOffset pap_sizeW( StgPAP* x );
inline StgOffset pap_sizeW( StgPAP* x )
{ return PAP_sizeW(x->n_args); }

inline StgWord arr_words_words( StgArrBytes* x);
inline StgWord arr_words_words( StgArrBytes* x)
{ return (((x->bytes) + sizeof(W_) - 1) / sizeof(W_)); }

inline StgOffset arr_words_sizeW( StgArrBytes* x );
inline StgOffset arr_words_sizeW( StgArrBytes* x )
{ return (((sizeof(StgArrBytes)) + sizeof(W_) - 1) / sizeof(W_)) + arr_words_words(x); }

inline StgOffset mut_arr_ptrs_sizeW( StgMutArrPtrs* x );
inline StgOffset mut_arr_ptrs_sizeW( StgMutArrPtrs* x )
{ return (((sizeof(StgMutArrPtrs)) + sizeof(W_) - 1) / sizeof(W_)) + x->size; }

inline StgOffset small_mut_arr_ptrs_sizeW( StgSmallMutArrPtrs* x );
inline StgOffset small_mut_arr_ptrs_sizeW( StgSmallMutArrPtrs* x )
{ return (((sizeof(StgSmallMutArrPtrs)) + sizeof(W_) - 1) / sizeof(W_)) + x->ptrs; }

inline StgWord stack_sizeW ( StgStack *stack );
inline StgWord stack_sizeW ( StgStack *stack )
{ return (((sizeof(StgStack)) + sizeof(W_) - 1) / sizeof(W_)) + stack->stack_size; }

inline StgWord bco_sizeW ( StgBCO *bco );
inline StgWord bco_sizeW ( StgBCO *bco )
{ return bco->size; }

inline StgWord compact_nfdata_full_sizeW ( StgCompactNFData *str );
inline StgWord compact_nfdata_full_sizeW ( StgCompactNFData *str )
{ return str->totalW; }






inline uint32_t
closure_sizeW_ (const StgClosure *p, const StgInfoTable *info);
inline uint32_t
closure_sizeW_ (const StgClosure *p, const StgInfoTable *info)
{
    switch (info->type) {
    case 17:
    case 16:
        return (((sizeof(StgThunk)) + sizeof(W_) - 1) / sizeof(W_)) + 1;
    case 10:
    case 3:
    case 9:
    case 2:
        return (((sizeof(StgHeader)) + sizeof(W_) - 1) / sizeof(W_)) + 1;
    case 20:
    case 19:
    case 18:
        return (((sizeof(StgThunk)) + sizeof(W_) - 1) / sizeof(W_)) + 2;
    case 13:
    case 6:
    case 12:
    case 5:
    case 11:
    case 4:
        return (((sizeof(StgHeader)) + sizeof(W_) - 1) / sizeof(W_)) + 2;
    case 15:
        return thunk_sizeW_fromITBL(info);
    case 22:
        return THUNK_SELECTOR_sizeW();
    case 26:
        return ap_stack_sizeW((StgAP_STACK *)p);
    case 24:
        return ap_sizeW((StgAP *)p);
    case 25:
        return pap_sizeW((StgPAP *)p);
    case 27:
        return (((sizeof(StgInd)) + sizeof(W_) - 1) / sizeof(W_));
    case 42:
        return arr_words_sizeW((StgArrBytes *)p);
    case 43:
    case 44:
    case 46:
    case 45:
        return mut_arr_ptrs_sizeW((StgMutArrPtrs*)p);
    case 59:
    case 60:
    case 62:
    case 61:
        return small_mut_arr_ptrs_sizeW((StgSmallMutArrPtrs*)p);
    case 52:
        return (((sizeof(StgTSO)) + sizeof(W_) - 1) / sizeof(W_));
    case 53:
        return stack_sizeW((StgStack*)p);
    case 23:
        return bco_sizeW((StgBCO *)p);
    case 54:
        return (((sizeof(StgTRecChunk)) + sizeof(W_) - 1) / sizeof(W_));
    default:
        return sizeW_fromITBL(info);
    }
}


inline uint32_t closure_sizeW (const StgClosure *p);
inline uint32_t closure_sizeW (const StgClosure *p)
{
    return closure_sizeW_(p, get_itbl(p));
}





inline StgWord stack_frame_sizeW( StgClosure *frame );
inline StgWord stack_frame_sizeW( StgClosure *frame )
{
    const StgRetInfoTable *info;

    info = get_ret_itbl(frame);
    switch (info->i.type) {

    case 32:
        return (((sizeof(StgRetFun)) + sizeof(W_) - 1) / sizeof(W_)) + ((StgRetFun *)frame)->size;

    case 31:
        return 1 + ((StgLargeBitmap*) (((StgWord) ((&info->i)+1)) + (&info->i)->layout.large_bitmap_offset))->size;

    case 29:
        return 2 + (((StgLargeBitmap *)((StgBCO *)((StgBCO *)((P_)frame)[1]))->bitmap)->size);

    default:
        return 1 + ((info->i.layout.bitmap) & 0x3f);
    }
}
# 461 "includes/rts/storage/ClosureMacros.h"
static inline W_ mutArrPtrsCards (W_ elems)
{
    return (W_)((elems + (1 << 7) - 1)
                           >> 7);
}


static inline W_ mutArrPtrsCardTableSize (W_ elems)
{
    return (((mutArrPtrsCards(elems)) + sizeof(W_) - 1) / sizeof(W_));
}


static inline StgWord8 *mutArrPtrsCard (StgMutArrPtrs *a, W_ n)
{
    return ((StgWord8 *)&(a->payload[a->ptrs]) + n);
}
# 537 "includes/rts/storage/ClosureMacros.h"
void LDV_recordDead (const StgClosure *c, uint32_t size);
__attribute__((visibility("hidden"))) 
# 538 "includes/rts/storage/ClosureMacros.h" 3 4
           _Bool 
# 538 "includes/rts/storage/ClosureMacros.h"
                isInherentlyUsed ( StgHalfWord closure_type );


inline void
zeroSlop (
    StgClosure *p,
    uint32_t offset,
    uint32_t size,
    
# 546 "includes/rts/storage/ClosureMacros.h" 3 4
   _Bool 
# 546 "includes/rts/storage/ClosureMacros.h"
        known_mutable
    );

inline void
zeroSlop (StgClosure *p, uint32_t offset, uint32_t size, 
# 550 "includes/rts/storage/ClosureMacros.h" 3 4
                                                        _Bool 
# 550 "includes/rts/storage/ClosureMacros.h"
                                                             known_mutable)
{


    const 
# 554 "includes/rts/storage/ClosureMacros.h" 3 4
         _Bool 
# 554 "includes/rts/storage/ClosureMacros.h"
              want_to_zero_immutable_slop = 
# 554 "includes/rts/storage/ClosureMacros.h" 3 4
                                            0

        
# 556 "includes/rts/storage/ClosureMacros.h"
       || RtsFlags.DebugFlags.sanity


        || era > 0

        ;

    const 
# 563 "includes/rts/storage/ClosureMacros.h" 3 4
         _Bool 
# 563 "includes/rts/storage/ClosureMacros.h"
              can_zero_immutable_slop =

        RtsFlags.ParFlags.nCapabilities <= 1;

    const 
# 567 "includes/rts/storage/ClosureMacros.h" 3 4
         _Bool 
# 567 "includes/rts/storage/ClosureMacros.h"
              zero_slop_immutable =
        want_to_zero_immutable_slop && can_zero_immutable_slop;

    const 
# 570 "includes/rts/storage/ClosureMacros.h" 3 4
         _Bool 
# 570 "includes/rts/storage/ClosureMacros.h"
              zero_slop_mutable =
# 579 "includes/rts/storage/ClosureMacros.h"
        
# 579 "includes/rts/storage/ClosureMacros.h" 3 4
       1



        
# 583 "includes/rts/storage/ClosureMacros.h"
       ;

    const 
# 585 "includes/rts/storage/ClosureMacros.h" 3 4
         _Bool 
# 585 "includes/rts/storage/ClosureMacros.h"
              zero_slop =


        known_mutable ? zero_slop_mutable : zero_slop_immutable;

    if(!zero_slop)
        return;

    for (uint32_t i = offset; i < size; i++) {
        ((StgWord *)p)[i] = 0;
    }
}

inline void overwritingClosure (StgClosure *p);
inline void overwritingClosure (StgClosure *p)
{
    W_ size = closure_sizeW(p);

    if(era > 0 && !isInherentlyUsed(get_itbl(p)->type))
        LDV_recordDead(p, size);

    zeroSlop(p, (((sizeof(StgThunkHeader)) + sizeof(W_) - 1) / sizeof(W_)), size, 
# 606 "includes/rts/storage/ClosureMacros.h" 3 4
                                                                0
# 606 "includes/rts/storage/ClosureMacros.h"
                                                                     );
}





inline void
overwritingMutableClosureOfs (StgClosure *p, uint32_t offset);

inline void
overwritingMutableClosureOfs (StgClosure *p, uint32_t offset)
{
# 628 "includes/rts/storage/ClosureMacros.h"
    ;

    zeroSlop(p, offset, closure_sizeW(p), 
# 630 "includes/rts/storage/ClosureMacros.h" 3 4
                                                           1
# 630 "includes/rts/storage/ClosureMacros.h"
                                                               );
}


inline void overwritingClosureSize (StgClosure *p, uint32_t size );
inline void overwritingClosureSize (StgClosure *p, uint32_t size)
{



    ;
    if(era > 0)
        LDV_recordDead(p, size);

    zeroSlop(p, (((sizeof(StgThunkHeader)) + sizeof(W_) - 1) / sizeof(W_)), size, 
# 644 "includes/rts/storage/ClosureMacros.h" 3 4
                                                                0
# 644 "includes/rts/storage/ClosureMacros.h"
                                                                     );
}
# 241 "includes/Rts.h" 2
# 1 "includes/rts/storage/MBlock.h" 1
# 12 "includes/rts/storage/MBlock.h"
       

extern W_ peak_mblocks_allocated;
extern W_ mblocks_allocated;

extern void initMBlocks(void);
extern void * getMBlock(void);
extern void * getMBlocks(uint32_t n);
extern void * getMBlockOnNode(uint32_t node);
extern void * getMBlocksOnNode(uint32_t node, uint32_t n);
extern void freeMBlocks(void *addr, uint32_t n);
extern void releaseFreeMemory(void);
extern void freeAllMBlocks(void);

extern void *getFirstMBlock(void **state);
extern void *getNextMBlock(void **state, void *mblock);
# 242 "includes/Rts.h" 2
# 1 "includes/rts/storage/GC.h" 1
# 9 "includes/rts/storage/GC.h"
       

# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 12 "includes/rts/storage/GC.h" 2
# 55 "includes/rts/storage/GC.h"
typedef StgWord memcount;

typedef struct nursery_ {
    bdescr * blocks;
    memcount n_blocks;
} nursery;
# 83 "includes/rts/storage/GC.h"
typedef struct generation_ {
    uint32_t no;

    bdescr * blocks;
    memcount n_blocks;
    memcount n_words;

    bdescr * large_objects;
    memcount n_large_blocks;
    memcount n_large_words;
    memcount n_new_large_words;


    bdescr * compact_objects;





    memcount n_compact_blocks;
    bdescr * compact_blocks_in_import;





    memcount n_compact_blocks_in_import;







    memcount max_blocks;

    StgTSO * threads;

    StgWeak * weak_ptr_list;

    struct generation_ *to;


    uint32_t collections;
    uint32_t par_collections;
    uint32_t failed_promotions;
# 140 "includes/rts/storage/GC.h"
    int mark;
    int compact;




    bdescr * old_blocks;
    memcount n_old_blocks;
    memcount live_estimate;

    bdescr * scavenged_large_objects;
    memcount n_scavenged_large_blocks;

    bdescr * live_compact_objects;
    memcount n_live_compact_blocks;

    bdescr * bitmap;

    StgTSO * old_threads;
    StgWeak * old_weak_ptr_list;
} generation;

extern generation * generations;
extern generation * g0;
extern generation * oldest_gen;

typedef void(*ListBlocksCb)(void *user, bdescr *);
void listAllBlocks(ListBlocksCb cb, void *user);
# 198 "includes/rts/storage/GC.h"
StgPtr allocate ( Capability *cap, W_ n );
StgPtr allocateMightFail ( Capability *cap, W_ n );
StgPtr allocatePinned ( Capability *cap, W_ n, W_ alignment, W_ align_off);


typedef void* AdjustorWritable;
typedef void* AdjustorExecutable;

void flushExec(W_ len, AdjustorExecutable exec_addr);


extern W_ large_alloc_lim;





void performGC(void);
void performMajorGC(void);





StgInd *newCAF (StgRegTable *reg, StgIndStatic *caf);
StgInd *newRetainedCAF (StgRegTable *reg, StgIndStatic *caf);
StgInd *newGCdCAF (StgRegTable *reg, StgIndStatic *caf);
void revertCAFs (void);



void setKeepCAFs (void);



void setHighMemDynamic (void);
# 242 "includes/rts/storage/GC.h"
void dirty_MUT_VAR(StgRegTable *reg, StgMutVar *mv, StgClosure *old);



extern 
# 246 "includes/rts/storage/GC.h" 3 4
      _Bool 
# 246 "includes/rts/storage/GC.h"
           keepCAFs;



static inline void initBdescr(bdescr *bd, generation *gen, generation *dest)
{
    *&bd->gen = gen;
    *&bd->gen_no = gen->no;
    *&bd->dest_no = dest->no;



    ;
    ;

}
# 243 "includes/Rts.h" 2
# 1 "includes/rts/NonMoving.h" 1
# 14 "includes/rts/NonMoving.h"
       


struct StgClosure_;
struct StgThunk_;
struct Capability_;


extern
void updateRemembSetPushClosure_(StgRegTable *reg, struct StgClosure_ *p);

extern
void updateRemembSetPushThunk_(StgRegTable *reg, struct StgThunk_ *p);


StgFunPtr stg_copyArray_barrier(void);




extern StgWord nonmoving_write_barrier_enabled;
# 244 "includes/Rts.h" 2


# 1 "includes/rts/ForeignExports.h" 1
# 14 "includes/rts/ForeignExports.h"
       

struct _ObjectCode;



struct ForeignExportsList {


    struct ForeignExportsList *next;

    int n_entries;


    struct _ObjectCode *oc;



    StgStablePtr **stable_ptrs;

    StgPtr exports[];
};

void registerForeignExports(struct ForeignExportsList *exports);
# 247 "includes/Rts.h" 2


# 1 "includes/rts/ExecPage.h" 1




       

typedef struct {
    char contents;
} ExecPage;


ExecPage *allocateExecPage(void);


void freezeExecPage(ExecPage *page);


void freeExecPage(ExecPage *page);
# 250 "includes/Rts.h" 2
# 1 "includes/rts/Parallel.h" 1
# 14 "includes/rts/Parallel.h"
       

StgInt newSpark (StgRegTable *reg, StgClosure *p);
# 251 "includes/Rts.h" 2
# 1 "includes/rts/Signals.h" 1
# 14 "includes/rts/Signals.h"
       
# 252 "includes/Rts.h" 2
# 1 "includes/rts/BlockSignals.h" 1
# 14 "includes/rts/BlockSignals.h"
       
# 27 "includes/rts/BlockSignals.h"
void blockUserSignals(void);






void unblockUserSignals(void);
# 253 "includes/Rts.h" 2
# 1 "includes/rts/Hpc.h" 1
# 14 "includes/rts/Hpc.h"
       


typedef struct _HpcModuleInfo {
  char *modName;
  StgWord32 tickCount;
  StgWord32 hashNo;
  StgWord64 *tixArr;
  
# 22 "includes/rts/Hpc.h" 3 4
 _Bool 
# 22 "includes/rts/Hpc.h"
      from_file;
  struct _HpcModuleInfo *next;
} HpcModuleInfo;

void hs_hpc_module (char *modName,
                    StgWord32 modCount,
                    StgWord32 modHashNo,
                    StgWord64 *tixArr);

HpcModuleInfo * hs_hpc_rootModule (void);

void startupHpc(void);
void exitHpc(void);
# 254 "includes/Rts.h" 2
# 1 "includes/rts/Adjustor.h" 1
# 14 "includes/rts/Adjustor.h"
       


void* createAdjustor (int cconv,
                      StgStablePtr hptr,
                      StgFunPtr wptr,
                      char *typeString);

void freeHaskellFunctionPtr (void* ptr);
# 255 "includes/Rts.h" 2
# 1 "includes/rts/FileLock.h" 1
# 30 "includes/rts/FileLock.h"
       





int lockFile(StgWord64 id, StgWord64 dev, StgWord64 ino, int for_writing);
int unlockFile(StgWord64 id);
# 256 "includes/Rts.h" 2
# 1 "includes/rts/GetTime.h" 1
# 14 "includes/rts/GetTime.h"
       

StgWord64 getMonotonicNSec (void);
# 257 "includes/Rts.h" 2
# 1 "includes/rts/Globals.h" 1
# 17 "includes/rts/Globals.h"
       





StgStablePtr getOrSetGHCConcSignalSignalHandlerStore(StgStablePtr ptr);
StgStablePtr getOrSetGHCConcWindowsPendingDelaysStore(StgStablePtr ptr);
StgStablePtr getOrSetGHCConcWindowsIOManagerThreadStore(StgStablePtr ptr);
StgStablePtr getOrSetGHCConcWindowsProddingStore(StgStablePtr ptr);
StgStablePtr getOrSetSystemEventThreadEventManagerStore(StgStablePtr ptr);
StgStablePtr getOrSetSystemEventThreadIOManagerThreadStore(StgStablePtr ptr);
StgStablePtr getOrSetSystemTimerThreadEventManagerStore(StgStablePtr ptr);
StgStablePtr getOrSetSystemTimerThreadIOManagerThreadStore(StgStablePtr ptr);
StgStablePtr getOrSetLibHSghcFastStringTable(StgStablePtr ptr);
StgStablePtr getOrSetLibHSghcGlobalHasPprDebug(StgStablePtr ptr);
StgStablePtr getOrSetLibHSghcGlobalHasNoDebugOutput(StgStablePtr ptr);
StgStablePtr getOrSetLibHSghcGlobalHasNoStateHack(StgStablePtr ptr);
# 258 "includes/Rts.h" 2
# 1 "includes/rts/IOInterface.h" 1
# 14 "includes/rts/IOInterface.h"
       
# 34 "includes/rts/IOInterface.h"
void setIOManagerControlFd (uint32_t cap_no, int fd);
void setTimerManagerControlFd(int fd);
void setIOManagerWakeupFd (int fd);
# 259 "includes/Rts.h" 2
# 1 "includes/rts/Linker.h" 1
# 14 "includes/rts/Linker.h"
       





typedef char pathchar;




void initLinker (void);
# 42 "includes/rts/Linker.h"
void initLinker_ (int retain_cafs);


HsInt insertSymbol(pathchar* obj_name, char* key, void* data);


void *lookupSymbol( char *lbl );


typedef enum {
    OBJECT_LOADED,
    OBJECT_NEEDED,
    OBJECT_RESOLVED,
    OBJECT_UNLOADED,
    OBJECT_DONT_RESOLVE,
    OBJECT_NOT_LOADED

} OStatus;


OStatus getObjectLoadStatus( pathchar *path );


HsInt unloadObj( pathchar *path );


HsInt purgeObj( pathchar *path );


HsInt loadObj( pathchar *path );


HsInt loadArchive( pathchar *path );


HsInt resolveObjs( void );






void *loadNativeObj( pathchar *path, char **errmsg );





HsInt unloadNativeObj( void *handle );


const char *addDLL( pathchar* dll_name );


HsPtr addLibrarySearchPath(pathchar* dll_path);



HsBool removeLibrarySearchPath(HsPtr dll_path_index);



void warnMissingKBLibraryPaths( void );






pathchar* findSystemLibrary(pathchar* dll_name);


StgStablePtr foreignExportStablePtr (StgPtr p);
# 260 "includes/Rts.h" 2
# 1 "includes/rts/Ticky.h" 1
# 14 "includes/rts/Ticky.h"
       





typedef struct _StgEntCounter {


    StgWord registeredp;
    StgInt arity;
    StgInt allocd;

    char *str;
    char *arg_kinds;
    StgInt entry_count;
    StgInt allocs;
    struct _StgEntCounter *link;
} StgEntCounter;
# 261 "includes/Rts.h" 2
# 1 "includes/rts/Timer.h" 1
# 14 "includes/rts/Timer.h"
       

void startTimer (void);
void stopTimer (void);
int rtsTimerSignal (void);
# 262 "includes/Rts.h" 2
# 1 "includes/rts/StablePtr.h" 1
# 14 "includes/rts/StablePtr.h"
       

__attribute__((always_inline)) inline StgPtr deRefStablePtr (StgStablePtr stable_ptr);
StgStablePtr getStablePtr (StgPtr p);





typedef struct {
    StgPtr addr;


} spEntry;

extern spEntry *stable_ptr_table;

__attribute__((always_inline)) inline
StgPtr deRefStablePtr(StgStablePtr sp)
{


    const spEntry *spt = *&stable_ptr_table;

    return *&spt[(StgWord)sp].addr;
}
# 263 "includes/Rts.h" 2
# 1 "includes/rts/StableName.h" 1
# 14 "includes/rts/StableName.h"
       





typedef struct {
    StgPtr addr;




    StgPtr old;

    StgClosure *sn_obj;

} snEntry;

extern snEntry *stable_name_table;
# 264 "includes/Rts.h" 2
# 1 "includes/rts/TTY.h" 1
# 14 "includes/rts/TTY.h"
       

void* __hscore_get_saved_termios(int fd);
void __hscore_set_saved_termios(int fd, void* ts);
# 265 "includes/Rts.h" 2
# 1 "includes/rts/Utils.h" 1
# 13 "includes/rts/Utils.h"
       


int genericRaise(int sig);
# 266 "includes/Rts.h" 2
# 1 "includes/rts/PrimFloat.h" 1
# 12 "includes/rts/PrimFloat.h"
       

StgDouble __int_encodeDouble (I_ j, I_ e);
StgFloat __int_encodeFloat (I_ j, I_ e);
StgDouble __word_encodeDouble (W_ j, I_ e);
StgFloat __word_encodeFloat (W_ j, I_ e);
# 267 "includes/Rts.h" 2
# 1 "includes/rts/Main.h" 1
# 9 "includes/rts/Main.h"
       





int hs_main (int argc, char *argv[],
             StgClosure *main_closure,
             RtsConfig rts_config)
   __attribute__((__noreturn__));
# 268 "includes/Rts.h" 2
# 1 "includes/rts/Profiling.h" 1
# 14 "includes/rts/Profiling.h"
       

void registerCcList(CostCentre **cc_list);
void registerCcsList(CostCentreStack **cc_list);
# 269 "includes/Rts.h" 2
# 1 "includes/rts/IPE.h" 1
# 14 "includes/rts/IPE.h"
       


typedef struct InfoProv_{
    char * table_name;
    char * closure_desc;
    char * ty_desc;
    char * label;
    char * module;
    char * srcloc;
} InfoProv;

typedef struct InfoProvEnt_ {
    StgInfoTable * info;
    InfoProv prov;
    struct InfoProvEnt_ *link;
} InfoProvEnt;

extern InfoProvEnt * IPE_LIST;

void registerInfoProvList(InfoProvEnt **cc_list);
InfoProvEnt * lookupIPE(StgInfoTable *info);
# 270 "includes/Rts.h" 2
# 1 "includes/rts/StaticPtrTable.h" 1
# 14 "includes/rts/StaticPtrTable.h"
       
# 28 "includes/rts/StaticPtrTable.h"
void hs_spt_insert (StgWord64 key[2],void* spe_closure);







void hs_spt_insert_stableptr(StgWord64 key[2], StgStablePtr *entry);







void hs_spt_remove (StgWord64 key[2]);
# 271 "includes/Rts.h" 2
# 1 "includes/rts/Libdw.h" 1
# 9 "includes/rts/Libdw.h"
       
# 50 "includes/rts/Libdw.h"
typedef struct BacktraceChunk_ {
    StgWord n_frames;
    struct BacktraceChunk_ *next;
    StgPtr frames[256];

} __attribute__((packed)) BacktraceChunk;
# 65 "includes/rts/Libdw.h"
typedef struct Backtrace_ {
    StgWord n_frames;
    BacktraceChunk *last;

} Backtrace;


typedef struct Location_ {
    const char *object_file;
    const char *function;


    const char *source_file;
    StgWord32 lineno;
    StgWord32 colno;
} __attribute__((packed)) Location;

struct LibdwSession_;
typedef struct LibdwSession_ LibdwSession;


void backtraceFree(Backtrace *bt);



Backtrace *libdwGetBacktrace(LibdwSession *session);



int libdwLookupLocation(LibdwSession *session, Location *loc, StgPtr pc);


void libdwPrintBacktrace(LibdwSession *session, FILE *file, Backtrace *bt);
# 272 "includes/Rts.h" 2
# 1 "includes/rts/LibdwPool.h" 1
# 9 "includes/rts/LibdwPool.h"
       


LibdwSession *libdwPoolTake(void);


void libdwPoolRelease(LibdwSession *sess);



void libdwPoolClear(void);
# 273 "includes/Rts.h" 2


 extern char **prog_argv;
 extern int prog_argc;
 extern char *prog_name;

void reportStackOverflow(StgTSO* tso);
void reportHeapOverflow(void);

void stg_exit(int n) __attribute__((__noreturn__));


int stg_sig_install (int, int, void *);







int rts_isProfiled(void);


int rts_isDynamic(void);


int rts_isThreaded(void);


int rts_isDebugged(void);


int rts_isTracing(void);
# 21 "rts/Capability.c" 2

# 1 "rts/Capability.h" 1
# 21 "rts/Capability.h"
       

# 1 "rts/sm/GC.h" 1
# 14 "rts/sm/GC.h"
       

# 1 "rts/BeginPrivate.h" 1
# 9 "rts/BeginPrivate.h"
#pragma GCC visibility push(hidden)
# 17 "rts/sm/GC.h" 2

# 1 "rts/sm/HeapAlloc.h" 1
# 9 "rts/sm/HeapAlloc.h"
       

# 1 "rts/BeginPrivate.h" 1
# 9 "rts/BeginPrivate.h"
#pragma GCC visibility push(hidden)
# 12 "rts/sm/HeapAlloc.h" 2
# 53 "rts/sm/HeapAlloc.h"
struct mblock_address_range {
    W_ begin, end;
    W_ padding[6];
} __attribute__((aligned(64)));
extern struct mblock_address_range mblock_address_space;
# 224 "rts/sm/HeapAlloc.h"
# 1 "rts/EndPrivate.h" 1

#pragma GCC visibility pop
# 224 "rts/sm/HeapAlloc.h" 2
# 19 "rts/sm/GC.h" 2

void GarbageCollect (uint32_t collect_gen,
                     
# 21 "rts/sm/GC.h" 3 4
                    _Bool 
# 21 "rts/sm/GC.h"
                         do_heap_census,
                     
# 22 "rts/sm/GC.h" 3 4
                    _Bool 
# 22 "rts/sm/GC.h"
                         is_overflow_gc,
                     
# 23 "rts/sm/GC.h" 3 4
                    _Bool 
# 23 "rts/sm/GC.h"
                         deadlock_detect,
                     uint32_t gc_type,
                     Capability *cap,
                     
# 26 "rts/sm/GC.h" 3 4
                    _Bool 
# 26 "rts/sm/GC.h"
                         idle_cap[]);

typedef void (*evac_fn)(void *user, StgClosure **root);

StgClosure * isAlive ( StgClosure *p );
void markCAFs ( evac_fn evac, void *user );


# 33 "rts/sm/GC.h" 3 4
_Bool 
# 33 "rts/sm/GC.h"
    doIdleGCWork(Capability *cap, 
# 33 "rts/sm/GC.h" 3 4
                                  _Bool 
# 33 "rts/sm/GC.h"
                                       all);

extern uint32_t N;
extern 
# 36 "rts/sm/GC.h" 3 4
      _Bool 
# 36 "rts/sm/GC.h"
           major_gc;

extern 
# 38 "rts/sm/GC.h" 3 4
      _Bool 
# 38 "rts/sm/GC.h"
           deadlock_detect_gc;
extern 
# 39 "rts/sm/GC.h" 3 4
      _Bool 
# 39 "rts/sm/GC.h"
           unload_mark_needed;

extern bdescr *mark_stack_bd;
extern bdescr *mark_stack_top_bd;
extern StgPtr mark_sp;

extern 
# 45 "rts/sm/GC.h" 3 4
      _Bool 
# 45 "rts/sm/GC.h"
           work_stealing;
# 73 "rts/sm/GC.h"
void gcWorkerThread (Capability *cap);
void initGcThreads (uint32_t from, uint32_t to);
void freeGcThreads (void);

void resizeGenerations (void);
# 87 "rts/sm/GC.h"
# 1 "rts/EndPrivate.h" 1

#pragma GCC visibility pop
# 87 "rts/sm/GC.h" 2
# 24 "rts/Capability.h" 2
# 1 "rts/Task.h" 1
# 12 "rts/Task.h"
       

# 1 "rts/GetTime.h" 1
# 9 "rts/GetTime.h"
       

# 1 "rts/BeginPrivate.h" 1
# 9 "rts/BeginPrivate.h"
#pragma GCC visibility push(hidden)
# 12 "rts/GetTime.h" 2

void initializeTimer (void);

Time getProcessCPUTime (void);
Time getCurrentThreadCPUTime (void);
void getProcessTimes (Time *user, Time *elapsed);




void getUnixEpochTime (StgWord64 *sec, StgWord32 *nsec);


W_ getPageFaults (void);

# 1 "rts/EndPrivate.h" 1

#pragma GCC visibility pop
# 27 "rts/GetTime.h" 2
# 15 "rts/Task.h" 2

# 1 "rts/BeginPrivate.h" 1
# 9 "rts/BeginPrivate.h"
#pragma GCC visibility push(hidden)
# 17 "rts/Task.h" 2
# 84 "rts/Task.h"
typedef struct InCall_ {
    StgTSO * tso;

    StgTSO * suspended_tso;


    Capability *suspended_cap;





    SchedulerStatus rstat;
    StgClosure ** ret;

    struct Task_ *task;






    struct InCall_ *prev_stack;


    struct InCall_ *prev;
    struct InCall_ *next;
} InCall;

typedef struct Task_ {
# 143 "rts/Task.h"
    struct Capability_ *cap;


    struct InCall_ *incall;

    uint32_t n_spare_incalls;
    struct InCall_ *spare_incalls;

    
# 151 "rts/Task.h" 3 4
   _Bool 
# 151 "rts/Task.h"
           worker;
    
# 152 "rts/Task.h" 3 4
   _Bool 
# 152 "rts/Task.h"
           stopped;



    
# 156 "rts/Task.h" 3 4
   _Bool 
# 156 "rts/Task.h"
        running_finalizers;


    int preferred_capability;



    struct Task_ *next;


    struct Task_ *all_next;
    struct Task_ *all_prev;

} Task;

static inline 
# 171 "rts/Task.h" 3 4
             _Bool

# 172 "rts/Task.h"
isBoundTask (Task *task)
{
    return (task->incall->tso != 
# 174 "rts/Task.h" 3 4
                                ((void *)0)
# 174 "rts/Task.h"
                                    );
}






static inline 
# 182 "rts/Task.h" 3 4
             _Bool

# 183 "rts/Task.h"
isWorker (Task *task)
{
    return (task->worker && task->incall->prev_stack == 
# 185 "rts/Task.h" 3 4
                                                       ((void *)0)
# 185 "rts/Task.h"
                                                           );
}



extern Task *all_tasks;
# 200 "rts/Task.h"
void initTaskManager (void);
uint32_t freeTaskManager (void);






Task* newBoundTask (void);




Task* getMyTask (void);


void exitMyTask (void);






void freeMyTask(void);
# 237 "rts/Task.h"
void discardTasksExcept (Task *keep);



static inline Task *myTask (void);
# 260 "rts/Task.h"
extern uint32_t taskCount;
extern uint32_t workerCount;
extern uint32_t peakWorkerCount;
# 280 "rts/Task.h"
extern Task *my_task;
# 289 "rts/Task.h"
static inline Task *
myTask (void)
{



    return my_task;

}

static inline void
setMyTask (Task *task)
{



    my_task = task;

}



typedef StgWord64 TaskId;
# 337 "rts/Task.h"
static inline TaskId
serialisableTaskId (Task *task)
{



    return (TaskId) (size_t) task;

}

# 1 "rts/EndPrivate.h" 1

#pragma GCC visibility pop
# 347 "rts/Task.h" 2
# 25 "rts/Capability.h" 2
# 1 "rts/Sparks.h" 1
# 9 "rts/Sparks.h"
       

# 1 "rts/WSDeque.h" 1
# 9 "rts/WSDeque.h"
       

typedef struct WSDeque_ {


    StgInt size;
    StgWord moduloSize;


    StgInt top;



    StgInt bottom;





    void ** elements;





} WSDeque;
# 63 "rts/WSDeque.h"
WSDeque * newWSDeque (uint32_t size);
void freeWSDeque (WSDeque *q);



void* popWSDeque (WSDeque *q);




# 72 "rts/WSDeque.h" 3 4
_Bool 
# 72 "rts/WSDeque.h"
    pushWSDeque (WSDeque *q, void *elem);


inline void discardElements (WSDeque *q);




void * stealWSDeque_ (WSDeque *q);



void * stealWSDeque (WSDeque *q);




inline 
# 89 "rts/WSDeque.h" 3 4
             _Bool 
# 89 "rts/WSDeque.h"
                  looksEmptyWSDeque (WSDeque* q);




inline StgInt dequeElements (WSDeque *q);





inline StgInt
dequeElements (WSDeque *q)
{
    StgWord t = *&q->top;
    StgWord b = *&q->bottom;

    StgInt n = (StgInt)b - (StgInt)t;
    return n > 0 ? n : 0;
}

inline 
# 110 "rts/WSDeque.h" 3 4
             _Bool

# 111 "rts/WSDeque.h"
looksEmptyWSDeque (WSDeque *q)
{
    return (dequeElements(q) <= 0);
}

inline void
discardElements (WSDeque *q)
{
    *&q->top = *&q->bottom;
}
# 12 "rts/Sparks.h" 2

# 1 "rts/BeginPrivate.h" 1
# 9 "rts/BeginPrivate.h"
#pragma GCC visibility push(hidden)
# 14 "rts/Sparks.h" 2




typedef struct {
    StgWord created;
    StgWord dud;
    StgWord overflowed;
    StgWord converted;
    StgWord gcd;
    StgWord fizzled;
} SparkCounters;
# 105 "rts/Sparks.h"
# 1 "rts/EndPrivate.h" 1

#pragma GCC visibility pop
# 105 "rts/Sparks.h" 2
# 26 "rts/Capability.h" 2
# 1 "rts/sm/NonMovingMark.h" 1
# 9 "rts/sm/NonMovingMark.h"
       


# 1 "rts/sm/NonMoving.h" 1
# 9 "rts/sm/NonMoving.h"
       



# 1 "/usr/include/string.h" 1 3 4
# 27 "/usr/include/string.h" 3 4





# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 33 "/usr/include/string.h" 2 3 4










# 42 "/usr/include/string.h" 3 4
extern void *memcpy (void *__restrict __dest, const void *__restrict __src,
       size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, const void *__src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));






extern void *memccpy (void *__restrict __dest, const void *__restrict __src,
        int __c, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));





extern void *memset (void *__s, int __c, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int memcmp (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 92 "/usr/include/string.h" 3 4
extern void *memchr (const void *__s, int __c, size_t __n)
      __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


# 106 "/usr/include/string.h" 3 4
extern void *rawmemchr (const void *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 117 "/usr/include/string.h" 3 4
extern void *memrchr (const void *__s, int __c, size_t __n)
      __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));






extern char *strcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, const char *__restrict __src,
        size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (const char *__s1, const char *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

# 162 "/usr/include/string.h" 3 4
extern int strcoll_l (const char *__s1, const char *__s2, __locale_t __l)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

extern size_t strxfrm_l (char *__dest, const char *__src, size_t __n,
    __locale_t __l) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)));




extern char *strdup (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (const char *__string, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 206 "/usr/include/string.h" 3 4

# 231 "/usr/include/string.h" 3 4
extern char *strchr (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 258 "/usr/include/string.h" 3 4
extern char *strrchr (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


# 272 "/usr/include/string.h" 3 4
extern char *strchrnul (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));






extern size_t strcspn (const char *__s, const char *__reject)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (const char *__s, const char *__accept)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 310 "/usr/include/string.h" 3 4
extern char *strpbrk (const char *__s, const char *__accept)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 337 "/usr/include/string.h" 3 4
extern char *strstr (const char *__haystack, const char *__needle)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));




extern char *strtok (char *__restrict __s, const char *__restrict __delim)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));




extern char *__strtok_r (char *__restrict __s,
    const char *__restrict __delim,
    char **__restrict __save_ptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, const char *__restrict __delim,
         char **__restrict __save_ptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));
# 368 "/usr/include/string.h" 3 4
extern char *strcasestr (const char *__haystack, const char *__needle)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));







extern void *memmem (const void *__haystack, size_t __haystacklen,
       const void *__needle, size_t __needlelen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 3)));



extern void *__mempcpy (void *__restrict __dest,
   const void *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern void *mempcpy (void *__restrict __dest,
        const void *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));





extern size_t strlen (const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern size_t strnlen (const char *__string, size_t __maxlen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern char *strerror (int __errnum) __attribute__ ((__nothrow__ , __leaf__));

# 433 "/usr/include/string.h" 3 4
extern char *strerror_r (int __errnum, char *__buf, size_t __buflen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2))) __attribute__ ((__warn_unused_result__));





extern char *strerror_l (int __errnum, __locale_t __l) __attribute__ ((__nothrow__ , __leaf__));





extern void __bzero (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern void bcopy (const void *__src, void *__dest, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int bcmp (const void *__s1, const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 484 "/usr/include/string.h" 3 4
extern char *index (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 512 "/usr/include/string.h" 3 4
extern char *rindex (const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern int ffs (int __i) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern int ffsl (long int __l) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
__extension__ extern int ffsll (long long int __ll)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));



extern int strcasecmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (const char *__s1, const char *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));





extern int strcasecmp_l (const char *__s1, const char *__s2,
    __locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

extern int strncasecmp_l (const char *__s1, const char *__s2,
     size_t __n, __locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 4)));





extern char *strsep (char **__restrict __stringp,
       const char *__restrict __delim)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) __attribute__ ((__nothrow__ , __leaf__));


extern char *__stpcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int strverscmp (const char *__s1, const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strfry (char *__string) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern void *memfrob (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 599 "/usr/include/string.h" 3 4
extern char *basename (const char *__filename) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 627 "/usr/include/string.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/string.h" 1 3 4
# 628 "/usr/include/string.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/string2.h" 1 3 4
# 393 "/usr/include/x86_64-linux-gnu/bits/string2.h" 3 4
extern void *__rawmemchr (const void *__s, int __c);
# 945 "/usr/include/x86_64-linux-gnu/bits/string2.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) size_t __strcspn_c1 (const char *__s, int __reject);
extern __inline __attribute__ ((__gnu_inline__)) size_t
__strcspn_c1 (const char *__s, int __reject)
{
  size_t __result = 0;
  while (__s[__result] != '\0' && __s[__result] != __reject)
    ++__result;
  return __result;
}

extern __inline __attribute__ ((__gnu_inline__)) size_t __strcspn_c2 (const char *__s, int __reject1,
         int __reject2);
extern __inline __attribute__ ((__gnu_inline__)) size_t
__strcspn_c2 (const char *__s, int __reject1, int __reject2)
{
  size_t __result = 0;
  while (__s[__result] != '\0' && __s[__result] != __reject1
  && __s[__result] != __reject2)
    ++__result;
  return __result;
}

extern __inline __attribute__ ((__gnu_inline__)) size_t __strcspn_c3 (const char *__s, int __reject1,
         int __reject2, int __reject3);
extern __inline __attribute__ ((__gnu_inline__)) size_t
__strcspn_c3 (const char *__s, int __reject1, int __reject2,
       int __reject3)
{
  size_t __result = 0;
  while (__s[__result] != '\0' && __s[__result] != __reject1
  && __s[__result] != __reject2 && __s[__result] != __reject3)
    ++__result;
  return __result;
}
# 1021 "/usr/include/x86_64-linux-gnu/bits/string2.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) size_t __strspn_c1 (const char *__s, int __accept);
extern __inline __attribute__ ((__gnu_inline__)) size_t
__strspn_c1 (const char *__s, int __accept)
{
  size_t __result = 0;

  while (__s[__result] == __accept)
    ++__result;
  return __result;
}

extern __inline __attribute__ ((__gnu_inline__)) size_t __strspn_c2 (const char *__s, int __accept1,
        int __accept2);
extern __inline __attribute__ ((__gnu_inline__)) size_t
__strspn_c2 (const char *__s, int __accept1, int __accept2)
{
  size_t __result = 0;

  while (__s[__result] == __accept1 || __s[__result] == __accept2)
    ++__result;
  return __result;
}

extern __inline __attribute__ ((__gnu_inline__)) size_t __strspn_c3 (const char *__s, int __accept1,
        int __accept2, int __accept3);
extern __inline __attribute__ ((__gnu_inline__)) size_t
__strspn_c3 (const char *__s, int __accept1, int __accept2, int __accept3)
{
  size_t __result = 0;

  while (__s[__result] == __accept1 || __s[__result] == __accept2
  || __s[__result] == __accept3)
    ++__result;
  return __result;
}
# 1097 "/usr/include/x86_64-linux-gnu/bits/string2.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) char *__strpbrk_c2 (const char *__s, int __accept1,
        int __accept2);
extern __inline __attribute__ ((__gnu_inline__)) char *
__strpbrk_c2 (const char *__s, int __accept1, int __accept2)
{

  while (*__s != '\0' && *__s != __accept1 && *__s != __accept2)
    ++__s;
  return *__s == '\0' ? ((void *)0) : (char *) (size_t) __s;
}

extern __inline __attribute__ ((__gnu_inline__)) char *__strpbrk_c3 (const char *__s, int __accept1,
        int __accept2, int __accept3);
extern __inline __attribute__ ((__gnu_inline__)) char *
__strpbrk_c3 (const char *__s, int __accept1, int __accept2, int __accept3)
{

  while (*__s != '\0' && *__s != __accept1 && *__s != __accept2
  && *__s != __accept3)
    ++__s;
  return *__s == '\0' ? ((void *)0) : (char *) (size_t) __s;
}
# 1147 "/usr/include/x86_64-linux-gnu/bits/string2.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) char *__strtok_r_1c (char *__s, char __sep, char **__nextp);
extern __inline __attribute__ ((__gnu_inline__)) char *
__strtok_r_1c (char *__s, char __sep, char **__nextp)
{
  char *__result;
  if (__s == ((void *)0))
    __s = *__nextp;
  while (*__s == __sep)
    ++__s;
  __result = ((void *)0);
  if (*__s != '\0')
    {
      __result = __s++;
      while (*__s != '\0')
 if (*__s++ == __sep)
   {
     __s[-1] = '\0';
     break;
   }
    }
  *__nextp = __s;
  return __result;
}
# 1179 "/usr/include/x86_64-linux-gnu/bits/string2.h" 3 4
extern char *__strsep_g (char **__stringp, const char *__delim);
# 1197 "/usr/include/x86_64-linux-gnu/bits/string2.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) char *__strsep_1c (char **__s, char __reject);
extern __inline __attribute__ ((__gnu_inline__)) char *
__strsep_1c (char **__s, char __reject)
{
  char *__retval = *__s;
  if (__retval != ((void *)0) && (*__s = (__extension__ (__builtin_constant_p (__reject) && !__builtin_constant_p (__retval) && (__reject) == '\0' ? (char *) __rawmemchr (__retval, __reject) : __builtin_strchr (__retval, __reject)))) != ((void *)0))
    *(*__s)++ = '\0';
  return __retval;
}

extern __inline __attribute__ ((__gnu_inline__)) char *__strsep_2c (char **__s, char __reject1, char __reject2);
extern __inline __attribute__ ((__gnu_inline__)) char *
__strsep_2c (char **__s, char __reject1, char __reject2)
{
  char *__retval = *__s;
  if (__retval != ((void *)0))
    {
      char *__cp = __retval;
      while (1)
 {
   if (*__cp == '\0')
     {
       __cp = ((void *)0);
   break;
     }
   if (*__cp == __reject1 || *__cp == __reject2)
     {
       *__cp++ = '\0';
       break;
     }
   ++__cp;
 }
      *__s = __cp;
    }
  return __retval;
}

extern __inline __attribute__ ((__gnu_inline__)) char *__strsep_3c (char **__s, char __reject1, char __reject2,
       char __reject3);
extern __inline __attribute__ ((__gnu_inline__)) char *
__strsep_3c (char **__s, char __reject1, char __reject2, char __reject3)
{
  char *__retval = *__s;
  if (__retval != ((void *)0))
    {
      char *__cp = __retval;
      while (1)
 {
   if (*__cp == '\0')
     {
       __cp = ((void *)0);
   break;
     }
   if (*__cp == __reject1 || *__cp == __reject2 || *__cp == __reject3)
     {
       *__cp++ = '\0';
       break;
     }
   ++__cp;
 }
      *__s = __cp;
    }
  return __retval;
}
# 1278 "/usr/include/x86_64-linux-gnu/bits/string2.h" 3 4
extern char *__strdup (const char *__string) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__));
# 1297 "/usr/include/x86_64-linux-gnu/bits/string2.h" 3 4
extern char *__strndup (const char *__string, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__));
# 631 "/usr/include/string.h" 2 3 4




# 1 "/usr/include/x86_64-linux-gnu/bits/string3.h" 1 3 4
# 49 "/usr/include/x86_64-linux-gnu/bits/string3.h" 3 4
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void *
__attribute__ ((__nothrow__ , __leaf__)) memcpy (void *__restrict __dest, const void *__restrict __src, size_t __len)

{
  return __builtin___memcpy_chk (__dest, __src, __len, __builtin_object_size (__dest, 0));
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void *
__attribute__ ((__nothrow__ , __leaf__)) memmove (void *__dest, const void *__src, size_t __len)
{
  return __builtin___memmove_chk (__dest, __src, __len, __builtin_object_size (__dest, 0));
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void *
__attribute__ ((__nothrow__ , __leaf__)) mempcpy (void *__restrict __dest, const void *__restrict __src, size_t __len)

{
  return __builtin___mempcpy_chk (__dest, __src, __len, __builtin_object_size (__dest, 0));
}
# 77 "/usr/include/x86_64-linux-gnu/bits/string3.h" 3 4
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void *
__attribute__ ((__nothrow__ , __leaf__)) memset (void *__dest, int __ch, size_t __len)
{
# 90 "/usr/include/x86_64-linux-gnu/bits/string3.h" 3 4
  return __builtin___memset_chk (__dest, __ch, __len, __builtin_object_size (__dest, 0));
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void
__attribute__ ((__nothrow__ , __leaf__)) bcopy (const void *__src, void *__dest, size_t __len)
{
  (void) __builtin___memmove_chk (__dest, __src, __len, __builtin_object_size (__dest, 0));
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void
__attribute__ ((__nothrow__ , __leaf__)) bzero (void *__dest, size_t __len)
{
  (void) __builtin___memset_chk (__dest, '\0', __len, __builtin_object_size (__dest, 0));
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__nothrow__ , __leaf__)) strcpy (char *__restrict __dest, const char *__restrict __src)
{
  return __builtin___strcpy_chk (__dest, __src, __builtin_object_size (__dest, 2 > 1));
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__nothrow__ , __leaf__)) stpcpy (char *__restrict __dest, const char *__restrict __src)
{
  return __builtin___stpcpy_chk (__dest, __src, __builtin_object_size (__dest, 2 > 1));
}



extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__nothrow__ , __leaf__)) strncpy (char *__restrict __dest, const char *__restrict __src, size_t __len)

{
  return __builtin___strncpy_chk (__dest, __src, __len, __builtin_object_size (__dest, 2 > 1));
}


extern char *__stpncpy_chk (char *__dest, const char *__src, size_t __n,
       size_t __destlen) __attribute__ ((__nothrow__ , __leaf__));
extern char *__stpncpy_alias (char *__dest, const char *__src, size_t __n) __asm__ ("" "stpncpy") __attribute__ ((__nothrow__ , __leaf__))
                                 ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__nothrow__ , __leaf__)) stpncpy (char *__dest, const char *__src, size_t __n)
{
  if (__builtin_object_size (__dest, 2 > 1) != (size_t) -1
      && (!__builtin_constant_p (__n) || __n > __builtin_object_size (__dest, 2 > 1)))
    return __stpncpy_chk (__dest, __src, __n, __builtin_object_size (__dest, 2 > 1));
  return __stpncpy_alias (__dest, __src, __n);
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__nothrow__ , __leaf__)) strcat (char *__restrict __dest, const char *__restrict __src)
{
  return __builtin___strcat_chk (__dest, __src, __builtin_object_size (__dest, 2 > 1));
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__nothrow__ , __leaf__)) strncat (char *__restrict __dest, const char *__restrict __src, size_t __len)

{
  return __builtin___strncat_chk (__dest, __src, __len, __builtin_object_size (__dest, 2 > 1));
}
# 636 "/usr/include/string.h" 2 3 4
# 658 "/usr/include/string.h" 3 4

# 14 "rts/sm/NonMoving.h" 2



# 1 "rts/BeginPrivate.h" 1
# 9 "rts/BeginPrivate.h"
#pragma GCC visibility push(hidden)
# 18 "rts/sm/NonMoving.h" 2
# 30 "rts/sm/NonMoving.h"

# 30 "rts/sm/NonMoving.h"
_Static_assert((1 << 15) % (1UL<<12) == 0,
               "non-moving segment size must be multiple of block size");


typedef uint16_t nonmoving_block_idx;
# 54 "rts/sm/NonMoving.h"
struct NonmovingSegment {
    struct NonmovingSegment *link;
    struct NonmovingSegment *todo_link;
    nonmoving_block_idx next_free;



    uint8_t bitmap[];
# 76 "rts/sm/NonMoving.h"
};






struct NonmovingAllocator {
    struct NonmovingSegment *filled;
    struct NonmovingSegment *saved_filled;
    struct NonmovingSegment *active;

};
# 100 "rts/sm/NonMoving.h"
struct NonmovingHeap {
    struct NonmovingAllocator allocators[12];




    struct NonmovingSegment *free;

    unsigned int n_free;


    unsigned int n_caps;





    struct NonmovingSegment *sweep_list;
};

extern struct NonmovingHeap nonmovingHeap;

extern memcount nonmoving_live_words;





void nonmovingInit(void);
void nonmovingStop(void);
void nonmovingExit(void);
# 147 "rts/sm/NonMoving.h"
void nonmovingCollect(StgWeak **dead_weaks,
                       StgTSO **resurrected_threads);

void *nonmovingAllocate(Capability *cap, StgWord sz);
void nonmovingInitCapability(Capability *cap);
void nonmovingPushFreeSegment(struct NonmovingSegment *seg);
void nonmovingClearBitmap(struct NonmovingSegment *seg);


static inline struct NonmovingSegmentInfo *nonmovingSegmentInfo(struct NonmovingSegment *seg) {
    return &Bdescr((StgPtr) seg)->nonmoving_segment;
}

static inline uint8_t nonmovingSegmentLogBlockSize(struct NonmovingSegment *seg) {
    return nonmovingSegmentInfo(seg)->log_block_size;
}


static inline void nonmovingPushActiveSegment(struct NonmovingSegment *seg)
{
    struct NonmovingAllocator *alloc =
        &nonmovingHeap.allocators[nonmovingSegmentLogBlockSize(seg) - 3];
    ;
    while (
# 170 "rts/sm/NonMoving.h" 3 4
          1
# 170 "rts/sm/NonMoving.h"
              ) {
        struct NonmovingSegment *current_active = (struct NonmovingSegment*)((StgWord)*((StgWord*)(&alloc->active)));
        seg->link = current_active;
        if (cas((StgVolatilePtr) &alloc->active, (StgWord) current_active, (StgWord) seg) == (StgWord) current_active) {
            break;
        }
    }
}


static inline void nonmovingPushFilledSegment(struct NonmovingSegment *seg)
{
    struct NonmovingAllocator *alloc =
        &nonmovingHeap.allocators[nonmovingSegmentLogBlockSize(seg) - 3];
    ;
    while (
# 185 "rts/sm/NonMoving.h" 3 4
          1
# 185 "rts/sm/NonMoving.h"
              ) {
        struct NonmovingSegment *current_filled = (struct NonmovingSegment*)((StgWord)*((StgWord*)(&alloc->filled)));
        seg->link = current_filled;
        if (cas((StgVolatilePtr) &alloc->filled, (StgWord) current_filled, (StgWord) seg) == (StgWord) current_filled) {
            break;
        }
    }
}







void assert_in_nonmoving_heap(StgPtr p);


static inline unsigned int nonmovingSegmentBlockSize(struct NonmovingSegment *seg)
{
    return 1 << nonmovingSegmentLogBlockSize(seg);
}


static inline unsigned int nonmovingBlockCount(uint8_t log_block_size)
{
  unsigned int segment_data_size = (1 << 15) - sizeof(struct NonmovingSegment);
  segment_data_size -= segment_data_size % 8;
  unsigned int blk_size = 1 << log_block_size;

  return segment_data_size / (blk_size + 1);
}

unsigned int nonmovingBlockCountFromSize(uint8_t log_block_size);


static inline unsigned int nonmovingSegmentBlockCount(struct NonmovingSegment *seg)
{
  return nonmovingBlockCountFromSize(nonmovingSegmentLogBlockSize(seg));
}




static inline void *nonmovingSegmentGetBlock_(struct NonmovingSegment *seg, uint8_t log_block_size, nonmoving_block_idx i)
{
  ;

  unsigned int blk_size = 1 << log_block_size;

  W_ bitmap_size = nonmovingBlockCountFromSize(log_block_size) * sizeof(uint8_t);




  W_ data = (((((W_)seg) + sizeof(struct NonmovingSegment) + bitmap_size) + sizeof(W_) - 1) / sizeof(W_)) * sizeof(W_);
  return (void*)(data + i*blk_size);
}


static inline void *nonmovingSegmentGetBlock(struct NonmovingSegment *seg, nonmoving_block_idx i)
{
  return nonmovingSegmentGetBlock_(seg, nonmovingSegmentLogBlockSize(seg), i);
}



static inline struct NonmovingSegment *nonmovingGetSegment_unchecked(StgPtr p)
{
    const uintptr_t mask = ~((1 << 15) - 1);
    return (struct NonmovingSegment *) (((uintptr_t) p) & mask);
}

static inline struct NonmovingSegment *nonmovingGetSegment(StgPtr p)
{
    ;
    return nonmovingGetSegment_unchecked(p);
}

static inline nonmoving_block_idx nonmovingGetBlockIdx(StgPtr p)
{
    ;
    struct NonmovingSegment *seg = nonmovingGetSegment(p);
    ptrdiff_t blk0 = (ptrdiff_t)nonmovingSegmentGetBlock(seg, 0);
    ptrdiff_t offset = (ptrdiff_t)p - blk0;
    return (nonmoving_block_idx) (offset >> nonmovingSegmentLogBlockSize(seg));
}


extern uint8_t nonmovingMarkEpoch;

static inline void nonmovingSetMark(struct NonmovingSegment *seg, nonmoving_block_idx i)
{
    seg->bitmap[i] = nonmovingMarkEpoch;
}

static inline uint8_t nonmovingGetMark(struct NonmovingSegment *seg, nonmoving_block_idx i)
{
    return seg->bitmap[i];
}

static inline void nonmovingSetClosureMark(StgPtr p)
{
    nonmovingSetMark(nonmovingGetSegment(p), nonmovingGetBlockIdx(p));
}

static inline uint8_t nonmovingGetClosureMark(StgPtr p)
{
    struct NonmovingSegment *seg = nonmovingGetSegment(p);
    nonmoving_block_idx blk_idx = nonmovingGetBlockIdx(p);
    return nonmovingGetMark(seg, blk_idx);
}


static inline 
# 299 "rts/sm/NonMoving.h" 3 4
             _Bool 
# 299 "rts/sm/NonMoving.h"
                  nonmovingClosureMarkedThisCycle(StgPtr p)
{
    return nonmovingGetClosureMark(p) == nonmovingMarkEpoch;
}



static inline 
# 306 "rts/sm/NonMoving.h" 3 4
             _Bool 
# 306 "rts/sm/NonMoving.h"
                  nonmovingSegmentBeingSwept(struct NonmovingSegment *seg)
{
    struct NonmovingSegmentInfo *seginfo = nonmovingSegmentInfo(seg);
    unsigned int n = nonmovingBlockCountFromSize(seginfo->log_block_size);
    return seginfo->next_free_snap >= n;
}




static inline 
# 316 "rts/sm/NonMoving.h" 3 4
             _Bool 
# 316 "rts/sm/NonMoving.h"
                  nonmovingClosureBeingSwept(StgClosure *p)
{
    bdescr *bd = Bdescr((StgPtr) p);
    if (((W_)(p) >= mblock_address_space.begin && (W_)(p) < (mblock_address_space.end))) {
        if (bd->flags & 2048) {
            return 
# 321 "rts/sm/NonMoving.h" 3 4
                  1
# 321 "rts/sm/NonMoving.h"
                      ;
        } else if (bd->flags & 1024) {
            struct NonmovingSegment *seg = nonmovingGetSegment((StgPtr) p);
            return nonmovingSegmentBeingSwept(seg);
        } else {

            return 
# 327 "rts/sm/NonMoving.h" 3 4
                  0
# 327 "rts/sm/NonMoving.h"
                       ;
        }
    } else {

        return 
# 331 "rts/sm/NonMoving.h" 3 4
              1
# 331 "rts/sm/NonMoving.h"
                  ;
    }
}




static inline 
# 338 "rts/sm/NonMoving.h" 3 4
             _Bool 
# 338 "rts/sm/NonMoving.h"
                  isNonmovingClosure(StgClosure *p)
{
    return RtsFlags.GcFlags.useNonmoving && (!((W_)(p) >= mblock_address_space.begin && (W_)(p) < (mblock_address_space.end)) || Bdescr((P_)p)->flags & 1024);
}
# 357 "rts/sm/NonMoving.h"
# 1 "rts/EndPrivate.h" 1

#pragma GCC visibility pop
# 358 "rts/sm/NonMoving.h" 2
# 13 "rts/sm/NonMovingMark.h" 2

# 1 "rts/BeginPrivate.h" 1
# 9 "rts/BeginPrivate.h"
#pragma GCC visibility push(hidden)
# 15 "rts/sm/NonMovingMark.h" 2

enum EntryType {
    NULL_ENTRY = 0,
    MARK_CLOSURE = 1,
    MARK_ARRAY = 2
};
# 42 "rts/sm/NonMovingMark.h"
typedef struct {


    union {

        struct {
            void *p;
        } null_entry;
        struct {
            StgClosure *p;
            StgClosure **origin;

        } mark_closure;
        struct {
            const StgMutArrPtrs *array;
            StgWord start_index;
        } mark_array;
    };
} MarkQueueEnt;

static inline enum EntryType nonmovingMarkQueueEntryType(MarkQueueEnt *ent)
{
    uintptr_t tag = (uintptr_t) ent->null_entry.p & ((1 << 3) - 1);
    ;
    return tag;
}

typedef struct {

    uint32_t head;

    MarkQueueEnt entries[];
} MarkQueueBlock;
# 87 "rts/sm/NonMovingMark.h"
typedef struct MarkQueue_ {

    bdescr *blocks;


    MarkQueueBlock *top;


    
# 95 "rts/sm/NonMovingMark.h" 3 4
   _Bool 
# 95 "rts/sm/NonMovingMark.h"
        is_upd_rem_set;



    MarkQueueEnt prefetch_queue[5];

    uint8_t prefetch_head;

} MarkQueue;






typedef struct {
    MarkQueue queue;
} UpdRemSet;



typedef int64_t MarkBudget;
# 125 "rts/sm/NonMovingMark.h"
extern bdescr *nonmoving_large_objects, *nonmoving_marked_large_objects,
              *nonmoving_compact_objects, *nonmoving_marked_compact_objects;
extern memcount n_nonmoving_large_blocks, n_nonmoving_marked_large_blocks,
                n_nonmoving_compact_blocks, n_nonmoving_marked_compact_blocks;

extern StgTSO *nonmoving_old_threads;
extern StgWeak *nonmoving_old_weak_ptr_list;
extern StgTSO *nonmoving_threads;
extern StgWeak *nonmoving_weak_ptr_list;





extern MarkQueue *current_mark_queue;
extern bdescr *upd_rem_set_block_list;


void nonmovingMarkInit(void);

void nonmovingInitUpdRemSet(UpdRemSet *rset);
void updateRemembSetPushClosure(Capability *cap, StgClosure *p);
void updateRemembSetPushThunk(Capability *cap, StgThunk *p);
void updateRemembSetPushTSO(Capability *cap, StgTSO *tso);
void updateRemembSetPushStack(Capability *cap, StgStack *stack);
# 158 "rts/sm/NonMovingMark.h"
void markQueueAddRoot(MarkQueue* q, StgClosure** root);

void initMarkQueue(MarkQueue *queue);
void freeMarkQueue(MarkQueue *queue);
void nonmovingMark(MarkBudget *budget, struct MarkQueue_ *restrict queue);
static inline void nonmovingMarkUnlimitedBudget(struct MarkQueue_ *restrict queue) {
    MarkBudget budget = 
# 164 "rts/sm/NonMovingMark.h" 3 4
                       (-9223372036854775807L -1)
# 164 "rts/sm/NonMovingMark.h"
                                            ;
    nonmovingMark(&budget, queue);
}

void nonmovingMarkWeakPtrList(struct MarkQueue_ *queue);

# 169 "rts/sm/NonMovingMark.h" 3 4
_Bool 
# 169 "rts/sm/NonMovingMark.h"
    nonmovingTidyWeaks(struct MarkQueue_ *queue);
void nonmovingTidyThreads(void);
void nonmovingMarkDeadWeaks(struct MarkQueue_ *queue, StgWeak **dead_weak_ptr_list);
void nonmovingResurrectThreads(struct MarkQueue_ *queue, StgTSO **resurrected_threads);

# 173 "rts/sm/NonMovingMark.h" 3 4
_Bool 
# 173 "rts/sm/NonMovingMark.h"
    nonmovingIsAlive(StgClosure *p);
void nonmovingMarkDeadWeak(struct MarkQueue_ *queue, StgWeak *w);
void nonmovingMarkLiveWeak(struct MarkQueue_ *queue, StgWeak *w);
void nonmovingAddUpdRemSetBlocks(UpdRemSet *rset);

void markQueuePush(MarkQueue *q, const MarkQueueEnt *ent);
void markQueuePushClosureGC(MarkQueue *q, StgClosure *p);
void markQueuePushClosure(MarkQueue *q,
                             StgClosure *p,
                             StgClosure **origin);
void markQueuePushClosure_(MarkQueue *q, StgClosure *p);
void markQueuePushThunkSrt(MarkQueue *q, const StgInfoTable *info);
void markQueuePushFunSrt(MarkQueue *q, const StgInfoTable *info);
void markQueuePushArray(MarkQueue *q, const StgMutArrPtrs *array, StgWord start_index);
void updateRemembSetPushThunkEager(Capability *cap,
                                  const StgThunkInfoTable *orig_info,
                                  StgThunk *thunk);

static inline 
# 191 "rts/sm/NonMovingMark.h" 3 4
             _Bool 
# 191 "rts/sm/NonMovingMark.h"
                  markQueueIsEmpty(MarkQueue *q)
{
    return (q->blocks == 
# 193 "rts/sm/NonMovingMark.h" 3 4
                        ((void *)0)
# 193 "rts/sm/NonMovingMark.h"
                            ) || (q->top->head == 0 && q->blocks->link == 
# 193 "rts/sm/NonMovingMark.h" 3 4
                                                                          ((void *)0)
# 193 "rts/sm/NonMovingMark.h"
                                                                              );
}
# 203 "rts/sm/NonMovingMark.h"
# 1 "rts/EndPrivate.h" 1

#pragma GCC visibility pop
# 203 "rts/sm/NonMovingMark.h" 2
# 27 "rts/Capability.h" 2

# 1 "rts/BeginPrivate.h" 1
# 9 "rts/BeginPrivate.h"
#pragma GCC visibility push(hidden)
# 29 "rts/Capability.h" 2
# 42 "rts/Capability.h"
struct Capability_ {



    StgFunTable f;
    StgRegTable r;

    uint32_t no;
# 58 "rts/Capability.h"
    uint32_t node;





    Task *running_task;



    
# 68 "rts/Capability.h" 3 4
   _Bool 
# 68 "rts/Capability.h"
        in_haskell;


    uint32_t idle;

    
# 73 "rts/Capability.h" 3 4
   _Bool 
# 73 "rts/Capability.h"
        disabled;





    StgTSO *run_queue_hd;
    StgTSO *run_queue_tl;
    uint32_t n_run_queue;







    InCall *suspended_ccalls;
    uint32_t n_suspended_ccalls;






    bdescr **mut_lists;
    bdescr **saved_mut_lists;


    UpdRemSet upd_rem_set;


    struct NonmovingSegment **current_segments;


    bdescr *pinned_object_block;

    bdescr *pinned_object_blocks;

    bdescr *pinned_object_empty;



    StgWeak *weak_ptr_list_hd;
    StgWeak *weak_ptr_list_tl;





    int context_switch;
# 134 "rts/Capability.h"
    int interrupt;



    uint64_t total_allocated;
# 181 "rts/Capability.h"
    StgTVarWatchQueue *free_tvar_watch_queues;
    StgTRecChunk *free_trec_chunks;
    StgTRecHeader *free_trec_headers;
    uint32_t transaction_tokens;
}
  __attribute__((aligned(64)))
;



_Static_assert((sizeof(struct Capability_) % 64 == 0), "Capability size does not match cache size");
# 235 "rts/Capability.h"
static inline Capability *
regTableToCapability (StgRegTable *reg)
{
    return (Capability *)((void *)((unsigned char*)reg - ((StgWord)&(((Capability*)0)->r))));
}



void initCapabilities (void);



void moreCapabilities (uint32_t from, uint32_t to);
# 262 "rts/Capability.h"
static inline void releaseCapability (Capability* cap __attribute__((__unused__))) {};
static inline void releaseAndWakeupCapability (Capability* cap __attribute__((__unused__))) {};
static inline void releaseCapability_ (Capability* cap __attribute__((__unused__)),
                                       
# 265 "rts/Capability.h" 3 4
                                      _Bool 
# 265 "rts/Capability.h"
                                           always_wakeup __attribute__((__unused__))) {};
# 276 "rts/Capability.h"
extern Capability **capabilities;




typedef enum {
    SYNC_OTHER,
    SYNC_GC_SEQ,
    SYNC_GC_PAR,
    SYNC_FLUSH_UPD_REM_SET,
    SYNC_FLUSH_EVENT_LOG
} SyncType;




typedef struct {
    SyncType type;
    
# 294 "rts/Capability.h" 3 4
   _Bool 
# 294 "rts/Capability.h"
        *idle;



    Task *task;
} PendingSync;






extern PendingSync * volatile pending_sync;
# 317 "rts/Capability.h"
void waitForCapability (Capability **cap , Task *task);

inline void recordMutableCap (const StgClosure *p, Capability *cap,
                                        uint32_t gen);

inline void recordClosureMutated (Capability *cap, StgClosure *p);
# 370 "rts/Capability.h"
extern void grabCapability (Capability **pCap);





void shutdownCapabilities(Task *task, 
# 376 "rts/Capability.h" 3 4
                                     _Bool 
# 376 "rts/Capability.h"
                                          wait_foreign);


void contextSwitchAllCapabilities(void);
static inline void contextSwitchCapability(Capability *cap);



void interruptAllCapabilities(void);
static inline void interruptCapability(Capability *cap);


void freeCapabilities (void);


void markCapability (evac_fn evac, void *user, Capability *cap,
                     
# 392 "rts/Capability.h" 3 4
                    _Bool 
# 392 "rts/Capability.h"
                         no_mark_sparks __attribute__((__unused__)));

void markCapabilities (evac_fn evac, void *user);

void traverseSparkQueues (evac_fn evac, void *user);






extern uint32_t n_numa_nodes;


extern uint32_t numa_map[16];







typedef struct PutMVar_ {
    StgStablePtr mvar;
    struct PutMVar_ *link;
} PutMVar;
# 429 "rts/Capability.h"
inline void
recordMutableCap (const StgClosure *p, Capability *cap, uint32_t gen)
{
    bdescr *bd;




    bd = cap->mut_lists[gen];
    if (*&bd->free >= bd->start + ((1UL<<12)/sizeof(W_))) {
        bdescr *new_bd;
        new_bd = allocBlockOnNode_lock(cap->node);
        new_bd->link = bd;
        new_bd->free = new_bd->start;
        bd = new_bd;
        cap->mut_lists[gen] = bd;
    }
    *bd->free = (StgWord) p;
    *&bd->free += 1;
}

inline void
recordClosureMutated (Capability *cap, StgClosure *p)
{
    bdescr *bd;
    bd = Bdescr((StgPtr)p);
    if (bd->gen_no != 0) recordMutableCap(p,cap,bd->gen_no);
}
# 473 "rts/Capability.h"
static inline void
stopCapability (Capability *cap)
{





    ;
    *&cap->r.rHpLim = 
# 482 "rts/Capability.h" 3 4
   ((void *)0)
# 482 "rts/Capability.h"
                                      ;
}

static inline void
interruptCapability (Capability *cap)
{
    stopCapability(cap);
    *&cap->interrupt = 
# 489 "rts/Capability.h" 3 4
   1
# 489 "rts/Capability.h"
                                       ;
}

static inline void
contextSwitchCapability (Capability *cap)
{
    stopCapability(cap);
    *&cap->context_switch = 
# 496 "rts/Capability.h" 3 4
   1
# 496 "rts/Capability.h"
                                            ;
}
# 512 "rts/Capability.h"
# 1 "rts/EndPrivate.h" 1

#pragma GCC visibility pop
# 512 "rts/Capability.h" 2
# 23 "rts/Capability.c" 2
# 1 "rts/Schedule.h" 1
# 10 "rts/Schedule.h"
       



# 1 "rts/Trace.h" 1
# 9 "rts/Trace.h"
       

# 1 "rts/eventlog/EventLog.h" 1
# 9 "rts/eventlog/EventLog.h"
       

# 1 "includes/rts/EventLogFormat.h" 1
# 36 "includes/rts/EventLogFormat.h"
       
# 221 "includes/rts/EventLogFormat.h"
typedef enum {
    HEAP_PROF_BREAKDOWN_COST_CENTRE = 0x1,
    HEAP_PROF_BREAKDOWN_MODULE,
    HEAP_PROF_BREAKDOWN_CLOSURE_DESCR,
    HEAP_PROF_BREAKDOWN_TYPE_DESCR,
    HEAP_PROF_BREAKDOWN_RETAINER,
    HEAP_PROF_BREAKDOWN_BIOGRAPHY,
    HEAP_PROF_BREAKDOWN_CLOSURE_TYPE,
    HEAP_PROF_BREAKDOWN_INFO_TABLE
} HeapProfBreakdown;



typedef StgWord16 EventTypeNum;
typedef StgWord64 EventTimestamp;
typedef StgWord32 EventThreadID;
typedef StgWord16 EventCapNo;
typedef StgWord16 EventPayloadSize;
typedef StgWord16 EventThreadStatus;
typedef StgWord32 EventCapsetID;
typedef StgWord16 EventCapsetType;
typedef StgWord64 EventTaskId;
typedef StgWord64 EventKernelThreadId;
# 12 "rts/eventlog/EventLog.h" 2


# 1 "rts/sm/NonMovingCensus.h" 1
# 9 "rts/sm/NonMovingCensus.h"
       



struct NonmovingAllocCensus {
    
# 14 "rts/sm/NonMovingCensus.h" 3 4
   _Bool 
# 14 "rts/sm/NonMovingCensus.h"
        collected_live_words;
    uint32_t n_active_segs;
    uint32_t n_filled_segs;
    uint32_t n_live_blocks;
    uint32_t n_live_words;
};


struct NonmovingAllocCensus
nonmovingAllocatorCensusWithWords(uint32_t alloc_idx);

struct NonmovingAllocCensus
nonmovingAllocatorCensus(uint32_t alloc_idx);

void nonmovingPrintAllocatorCensus(
# 28 "rts/sm/NonMovingCensus.h" 3 4
                                  _Bool 
# 28 "rts/sm/NonMovingCensus.h"
                                       collect_live_words);
void nonmovingTraceAllocatorCensus(void);
# 15 "rts/eventlog/EventLog.h" 2

# 1 "rts/BeginPrivate.h" 1
# 9 "rts/BeginPrivate.h"
#pragma GCC visibility push(hidden)
# 17 "rts/eventlog/EventLog.h" 2






extern char *EventTagDesc[];

extern 
# 25 "rts/eventlog/EventLog.h" 3 4
      _Bool 
# 25 "rts/eventlog/EventLog.h"
           eventlog_enabled;

void initEventLogging(void);
void restartEventLogging(void);
void finishCapEventLogging(void);
void freeEventLogging(void);
void abortEventLogging(void);
void moreCapEventBufs (uint32_t from, uint32_t to);
void flushLocalEventsBuf(Capability *cap);
void flushAllCapsEventsBufs(void);
void flushAllEventsBufs(Capability *cap);

typedef void (*EventlogInitPost)(void);




void postInitEvent(EventlogInitPost post_init);


void resetInitEvents(void);

typedef struct eventlog_init_func {
    EventlogInitPost init_func;
    struct eventlog_init_func * next;
} eventlog_init_func_t;






void postSchedEvent(Capability *cap, EventTypeNum tag,
                    StgThreadID id, StgWord info1, StgWord info2);




void postEvent(Capability *cap, EventTypeNum tag);
void postEventNoCap(EventTypeNum tag);

void postEventAtTimestamp (Capability *cap, EventTimestamp ts,
                           EventTypeNum tag);

void postMsg(char *msg, va_list ap);

void postUserEvent(Capability *cap, EventTypeNum type, char *msg);

void postUserBinaryEvent(Capability *cap, EventTypeNum type,
                         uint8_t *msg, size_t size);

void postCapMsg(Capability *cap, char *msg, va_list ap);




void postCapEvent (EventTypeNum tag,
                   EventCapNo capno);




void postCapsetEvent (EventTypeNum tag,
                      EventCapsetID capset,
                      StgWord info);




void postCapsetStrEvent (EventTypeNum tag,
                         EventCapsetID capset,
                         char *msg);




void postCapsetVecEvent (EventTypeNum tag,
                         EventCapsetID capset,
                         int argc,
                         char *msg[]);

void postWallClockTime (EventCapsetID capset);




void postSparkEvent(Capability *cap, EventTypeNum tag, StgWord info1);




void postSparkCountersEvent (Capability *cap,
                             SparkCounters counters,
                             StgWord remaining);




void postThreadLabel(Capability *cap,
                     EventThreadID id,
                     char *label);




void postHeapEvent (Capability *cap,
                    EventTypeNum tag,
                    EventCapsetID heap_capset,
                    W_ info1);

void postEventHeapInfo (EventCapsetID heap_capset,
                        uint32_t gens,
                        W_ maxHeapSize,
                        W_ allocAreaSize,
                        W_ mblockSize,
                        W_ blockSize);

void postEventGcStats (Capability *cap,
                        EventCapsetID heap_capset,
                        uint32_t gen,
                        W_ copied,
                        W_ slop,
                        W_ fragmentation,
                        uint32_t par_n_threads,
                        W_ par_max_copied,
                        W_ par_tot_copied,
                        W_ par_balanced_copied);

void postEventMemReturn (Capability *cap,
                        EventCapsetID heap_capset,
                         uint32_t current_mblocks,
                         uint32_t needed_mblocks,
                         uint32_t returned_mblocks
                        );

void postTaskCreateEvent (EventTaskId taskId,
                          EventCapNo cap,
                          EventKernelThreadId tid);

void postTaskMigrateEvent (EventTaskId taskId,
                           EventCapNo capno,
                           EventCapNo new_capno);

void postTaskDeleteEvent (EventTaskId taskId);

void postHeapProfBegin(StgWord8 profile_id);

void postHeapProfSampleBegin(StgInt era);
void postHeapBioProfSampleBegin(StgInt era, StgWord64 time_ns);
void postHeapProfSampleEnd(StgInt era);

void postHeapProfSampleString(StgWord8 profile_id,
                              const char *label,
                              StgWord64 residency);


void postHeapProfCostCentre(StgWord32 ccID,
                            const char *label,
                            const char *module,
                            const char *srcloc,
                            StgBool is_caf);

void postHeapProfSampleCostCentre(StgWord8 profile_id,
                                  CostCentreStack *stack,
                                  StgWord64 residency);

void postProfSampleCostCentre(Capability *cap,
                              CostCentreStack *stack,
                              StgWord64 ticks);
void postProfBegin(void);


void postIPE(StgWord64 info,
             const char *table_name,
             const char *closure_desc,
             const char *ty_desc,
             const char *label,
             const char *module,
             const char *srcloc);

void postConcUpdRemSetFlush(Capability *cap);
void postConcMarkEnd(StgWord32 marked_obj_count);
void postNonmovingHeapCensus(int log_blk_size,
                             const struct NonmovingAllocCensus *census);
# 260 "rts/eventlog/EventLog.h"
# 1 "rts/EndPrivate.h" 1

#pragma GCC visibility pop
# 260 "rts/eventlog/EventLog.h" 2
# 12 "rts/Trace.h" 2







# 1 "rts/BeginPrivate.h" 1
# 9 "rts/BeginPrivate.h"
#pragma GCC visibility push(hidden)
# 20 "rts/Trace.h" 2







void initTracing (void);
void endTracing (void);
void freeTracing (void);
void resetTracing (void);
void tracingAddCapapilities (uint32_t from, uint32_t to);



typedef StgWord32 CapsetID;
typedef StgWord16 CapsetType;
enum CapsetType { CapsetTypeCustom = 1,
                  CapsetTypeOsProcess = 2,
                  CapsetTypeClockdomain = 3 };
# 70 "rts/Trace.h"
extern int TRACE_sched;
extern int TRACE_gc;
extern int TRACE_spark_sampled;
extern int TRACE_spark_full;

extern int TRACE_cap;
extern int TRACE_nonmoving_gc;
# 108 "rts/Trace.h"
void traceSchedEvent_ (Capability *cap, EventTypeNum tag,
                       StgTSO *tso, StgWord info1, StgWord info2);
# 121 "rts/Trace.h"
void traceGcEvent_ (Capability *cap, EventTypeNum tag);
# 131 "rts/Trace.h"
void traceGcEventAtT_ (Capability *cap, StgWord64 ts, EventTypeNum tag);
# 140 "rts/Trace.h"
void traceHeapEvent_ (Capability *cap,
                      EventTypeNum tag,
                      CapsetID heap_capset,
                      W_ info1);

void traceEventHeapInfo_ (CapsetID heap_capset,
                          uint32_t gens,
                          W_ maxHeapSize,
                          W_ allocAreaSize,
                          W_ mblockSize,
                          W_ blockSize);

void traceEventGcStats_ (Capability *cap,
                          CapsetID heap_capset,
                          uint32_t gen,
                          W_ copied,
                          W_ slop,
                          W_ fragmentation,
                          uint32_t par_n_threads,
                          W_ par_max_copied,
                          W_ par_tot_copied,
                          W_ par_balanced_copied);

void traceEventMemReturn_ (Capability *cap,
                          uint32_t current_mblocks,
                          uint32_t needed_mblocks,
                          uint32_t returned_mblocks );
# 181 "rts/Trace.h"
void traceSparkEvent_ (Capability *cap, EventTypeNum tag, StgWord info1);
# 195 "rts/Trace.h"
void traceCap_(Capability *cap, char *msg, ...);
# 205 "rts/Trace.h"
void trace_(char *msg, ...);





void traceUserMsg(Capability *cap, char *msg);





void traceUserMarker(Capability *cap, char *msg);




void traceUserBinaryMsg(Capability *cap, uint8_t *msg, size_t size);





void traceThreadLabel_(Capability *cap,
                       StgTSO *tso,
                       char *label);
# 261 "rts/Trace.h"
void traceThreadStatus_ (StgTSO *tso);
# 271 "rts/Trace.h"
void traceCapEvent_ (Capability *cap,
                    EventTypeNum tag);






void traceCapsetEvent_ (EventTypeNum tag,
                        CapsetID capset,
                        StgWord info);

void traceWallClockTime_(void);

void traceOSProcessInfo_ (void);

void traceSparkCounters_ (Capability *cap,
                          SparkCounters counters,
                          StgWord remaining);

void traceTaskCreate_ (Task *task,
                       Capability *cap);

void traceTaskMigrate_ (Task *task,
                        Capability *cap,
                        Capability *new_cap);

void traceTaskDelete_ (Task *task);

void traceHeapProfBegin(StgWord8 profile_id);
void traceHeapProfSampleBegin(StgInt era);
void traceHeapBioProfSampleBegin(StgInt era, StgWord64 time);
void traceHeapProfSampleEnd(StgInt era);
void traceHeapProfSampleString(StgWord8 profile_id,
                               const char *label, StgWord residency);

void traceHeapProfCostCentre(StgWord32 ccID,
                             const char *label,
                             const char *module,
                             const char *srcloc,
                             StgBool is_caf);
void traceHeapProfSampleCostCentre(StgWord8 profile_id,
                                   CostCentreStack *stack, StgWord residency);

void traceProfSampleCostCentre(Capability *cap,
                               CostCentreStack *stack, StgWord ticks);
void traceProfBegin(void);


void traceConcMarkBegin(void);
void traceConcMarkEnd(StgWord32 marked_obj_count);
void traceConcSyncBegin(void);
void traceConcSyncEnd(void);
void traceConcSweepBegin(void);
void traceConcSweepEnd(void);
void traceConcUpdRemSetFlush(Capability *cap);
void traceNonmovingHeapCensus(uint32_t log_blk_size,
                              const struct NonmovingAllocCensus *census);

void traceIPE(StgInfoTable *info,
               const char *table_name,
               const char *closure_desc,
               const char *ty_desc,
               const char *label,
               const char *module,
               const char *srcloc );
void flushTrace(void);
# 588 "rts/Trace.h"
static inline void traceEventCreateThread(Capability *cap __attribute__((__unused__)),
                                          StgTSO *tso __attribute__((__unused__)))
{
    if (__builtin_expect((TRACE_sched),0)) { traceSchedEvent_(cap, 0, tso, tso->stackobj->stack_size, 0); };
    ;
}

static inline void traceEventRunThread(Capability *cap __attribute__((__unused__)),
                                       StgTSO *tso __attribute__((__unused__)))
{
    if (__builtin_expect((TRACE_sched),0)) { traceSchedEvent_(cap, 1, tso, tso->what_next, 0); };
    ;
}

static inline void traceEventStopThread(Capability *cap __attribute__((__unused__)),
                                        StgTSO *tso __attribute__((__unused__)),
                                        StgThreadReturnCode status __attribute__((__unused__)),
                                        StgWord32 info __attribute__((__unused__)))
{
    if (__builtin_expect((TRACE_sched),0)) { traceSchedEvent_(cap, 2, tso, status, info); };
   
                                                                    ;
}

static inline void traceEventMigrateThread(Capability *cap __attribute__((__unused__)),
                                           StgTSO *tso __attribute__((__unused__)),
                                           uint32_t new_cap __attribute__((__unused__)))
{
    if (__builtin_expect((TRACE_sched),0)) { traceSchedEvent_(cap, 4, tso, new_cap, 0); };
   
                                            ;
}

static inline void traceCapCreate(Capability *cap __attribute__((__unused__)))
{
    if (__builtin_expect((TRACE_cap),0)) { traceCapEvent_(cap, 45); };
    ;
}

static inline void traceCapDelete(Capability *cap __attribute__((__unused__)))
{
    if (__builtin_expect((TRACE_cap),0)) { traceCapEvent_(cap, 46); };
    ;
}

static inline void traceCapEnable(Capability *cap __attribute__((__unused__)))
{
    if (__builtin_expect((TRACE_cap),0)) { traceCapEvent_(cap, 48); };
    ;
}

static inline void traceCapDisable(Capability *cap __attribute__((__unused__)))
{
    if (__builtin_expect((TRACE_cap),0)) { traceCapEvent_(cap, 47); };
    ;





    if (eventlog_enabled) {
        flushLocalEventsBuf(cap);
    }




}

static inline void traceEventThreadWakeup(Capability *cap __attribute__((__unused__)),
                                          StgTSO *tso __attribute__((__unused__)),
                                          uint32_t other_cap __attribute__((__unused__)))
{
    if (__builtin_expect((TRACE_sched),0)) { traceSchedEvent_(cap, 8, tso, other_cap, 0); };
   
                                             ;
}

static inline void traceThreadLabel(Capability *cap __attribute__((__unused__)),
                                    StgTSO *tso __attribute__((__unused__)),
                                    char *label __attribute__((__unused__)))
{
    if (__builtin_expect((TRACE_sched),0)) {
        traceThreadLabel_(cap, tso, label);
    }
    ;
}

static inline void traceEventGcStart(Capability *cap __attribute__((__unused__)))
{
    if (__builtin_expect((TRACE_gc),0)) { traceGcEvent_(cap, 9); };
    ;
}

static inline void traceEventGcStartAtT(Capability *cap __attribute__((__unused__)),
                                        StgWord64 ts __attribute__((__unused__)))
{
    if (__builtin_expect((TRACE_gc),0)) { traceGcEventAtT_(cap, ts, 9); };
    ;
}

static inline void traceEventGcEnd(Capability *cap __attribute__((__unused__)))
{
    if (__builtin_expect((TRACE_gc),0)) { traceGcEvent_(cap, 10); };
    ;
}

static inline void traceEventGcEndAtT(Capability *cap __attribute__((__unused__)),
                                      StgWord64 ts __attribute__((__unused__)))
{
    if (__builtin_expect((TRACE_gc),0)) { traceGcEventAtT_(cap, ts, 10); };
    ;
}

static inline void traceEventRequestSeqGc(Capability *cap __attribute__((__unused__)))
{
    if (__builtin_expect((TRACE_gc),0)) { traceGcEvent_(cap, 11); };
    ;
}

static inline void traceEventRequestParGc(Capability *cap __attribute__((__unused__)))
{
    if (__builtin_expect((TRACE_gc),0)) { traceGcEvent_(cap, 12); };
    ;
}

static inline void traceEventGcIdle(Capability *cap __attribute__((__unused__)))
{
    if (__builtin_expect((TRACE_gc),0)) { traceGcEvent_(cap, 20); };
    ;
}

static inline void traceEventGcWork(Capability *cap __attribute__((__unused__)))
{
    if (__builtin_expect((TRACE_gc),0)) { traceGcEvent_(cap, 21); };
    ;
}

static inline void traceEventGcDone(Capability *cap __attribute__((__unused__)))
{
    if (__builtin_expect((TRACE_gc),0)) { traceGcEvent_(cap, 22); };
    ;
}

static inline void traceEventGcGlobalSync(Capability *cap __attribute__((__unused__)))
{
    if (__builtin_expect((TRACE_gc),0)) { traceGcEvent_(cap, 54); };
    ;
}

static inline void traceEventGcStats(Capability *cap __attribute__((__unused__)),
                                     CapsetID heap_capset __attribute__((__unused__)),
                                     uint32_t gen __attribute__((__unused__)),
                                     W_ copied __attribute__((__unused__)),
                                     W_ slop __attribute__((__unused__)),
                                     W_ fragmentation __attribute__((__unused__)),
                                     uint32_t par_n_threads __attribute__((__unused__)),
                                     W_ par_max_copied __attribute__((__unused__)),
                                     W_ par_tot_copied __attribute__((__unused__)),
                                     W_ par_balanced_copied __attribute__((__unused__)))
{
    if (__builtin_expect((TRACE_gc),0)) {
        traceEventGcStats_(cap, heap_capset, gen,
                           copied, slop, fragmentation,
                           par_n_threads, par_max_copied,
                           par_tot_copied, par_balanced_copied);
    }
   


                                                           ;
}

static inline void traceEventMemReturn(Capability *cap __attribute__((__unused__)),
                                     uint32_t current_mblocks __attribute__((__unused__)),
                                     uint32_t needed_mblocks __attribute__((__unused__)),
                                     uint32_t returned_mblocks __attribute__((__unused__)))
{
    if (__builtin_expect((TRACE_gc),0)) {
        traceEventMemReturn_(cap, current_mblocks, needed_mblocks, returned_mblocks);
    }
    ;
}

static inline void traceEventHeapInfo(CapsetID heap_capset __attribute__((__unused__)),
                                      uint32_t gens __attribute__((__unused__)),
                                      W_ maxHeapSize __attribute__((__unused__)),
                                      W_ allocAreaSize __attribute__((__unused__)),
                                      W_ mblockSize __attribute__((__unused__)),
                                      W_ blockSize __attribute__((__unused__)))
{
    if (__builtin_expect((TRACE_gc),0)) {
        traceEventHeapInfo_(heap_capset, gens,
                            maxHeapSize, allocAreaSize,
                            mblockSize, blockSize);
    }
   

                                         ;
}

static inline void traceEventHeapAllocated(Capability *cap __attribute__((__unused__)),
                                           CapsetID heap_capset __attribute__((__unused__)),
                                           W_ allocated __attribute__((__unused__)))
{
    if (__builtin_expect((TRACE_gc),0)) { traceHeapEvent_(cap, 49, heap_capset, allocated); };
    ;
}

static inline void traceEventHeapSize(Capability *cap __attribute__((__unused__)),
                                      CapsetID heap_capset __attribute__((__unused__)),
                                      W_ heap_size __attribute__((__unused__)))
{
    if (__builtin_expect((TRACE_gc),0)) { traceHeapEvent_(cap, 50, heap_capset, heap_size); };
    ;
}

static inline void traceEventBlocksSize(Capability *cap __attribute__((__unused__)),
                                        CapsetID heap_capset __attribute__((__unused__)),
                                        W_ heap_size __attribute__((__unused__)))
{
    if (__builtin_expect((TRACE_gc),0)) { traceHeapEvent_(cap, 91, heap_capset, heap_size); };
    ;
}

static inline void traceEventHeapLive(Capability *cap __attribute__((__unused__)),
                                      CapsetID heap_capset __attribute__((__unused__)),
                                      W_ heap_live __attribute__((__unused__)))
{
    if (__builtin_expect((TRACE_gc),0)) { traceHeapEvent_(cap, 51, heap_capset, heap_live); };
    ;
}

static inline void traceCapsetCreate(CapsetID capset __attribute__((__unused__)),
                                     CapsetType capset_type __attribute__((__unused__)))
{
    if (__builtin_expect((TRACE_cap),0)) { traceCapsetEvent_(25, capset, capset_type); };
    ;
}

static inline void traceCapsetDelete(CapsetID capset __attribute__((__unused__)))
{
    if (__builtin_expect((TRACE_cap),0)) { traceCapsetEvent_(26, capset, 0); };
    ;
}

static inline void traceCapsetAssignCap(CapsetID capset __attribute__((__unused__)),
                                        uint32_t capno __attribute__((__unused__)))
{
    if (__builtin_expect((TRACE_cap),0)) { traceCapsetEvent_(27, capset, capno); };
    ;
}

static inline void traceCapsetRemoveCap(CapsetID capset __attribute__((__unused__)),
                                        uint32_t capno __attribute__((__unused__)))
{
    if (__builtin_expect((TRACE_cap),0)) { traceCapsetEvent_(28, capset, capno); };
    ;
}

static inline void traceWallClockTime(void)
{
    traceWallClockTime_();

}

static inline void traceOSProcessInfo(void)
{
    traceOSProcessInfo_();


}

static inline void traceEventCreateSparkThread(Capability *cap __attribute__((__unused__)),
                                               StgThreadID spark_tid __attribute__((__unused__)))
{
    if (__builtin_expect((TRACE_spark_full),0)) { traceSparkEvent_(cap, 15, spark_tid); };
    ;
}

static inline void traceSparkCounters(Capability *cap __attribute__((__unused__)))
{
# 883 "rts/Trace.h"
}

static inline void traceEventSparkCreate(Capability *cap __attribute__((__unused__)))
{
    if (__builtin_expect((TRACE_spark_full),0)) { traceSparkEvent_(cap, 35, 0); };
    ;
}

static inline void traceEventSparkDud(Capability *cap __attribute__((__unused__)))
{
    if (__builtin_expect((TRACE_spark_full),0)) { traceSparkEvent_(cap, 36, 0); };
    ;
}

static inline void traceEventSparkOverflow(Capability *cap __attribute__((__unused__)))
{
    if (__builtin_expect((TRACE_spark_full),0)) { traceSparkEvent_(cap, 37, 0); };
    ;
}

static inline void traceEventSparkRun(Capability *cap __attribute__((__unused__)))
{
    if (__builtin_expect((TRACE_spark_full),0)) { traceSparkEvent_(cap, 38, 0); };
    ;
}

static inline void traceEventSparkSteal(Capability *cap __attribute__((__unused__)),
                                        uint32_t victim_cap __attribute__((__unused__)))
{
    if (__builtin_expect((TRACE_spark_full),0)) { traceSparkEvent_(cap, 39, victim_cap); };
    ;
}

static inline void traceEventSparkFizzle(Capability *cap __attribute__((__unused__)))
{
    if (__builtin_expect((TRACE_spark_full),0)) { traceSparkEvent_(cap, 40, 0); };
    ;
}

static inline void traceEventSparkGC(Capability *cap __attribute__((__unused__)))
{
    if (__builtin_expect((TRACE_spark_full),0)) { traceSparkEvent_(cap, 41, 0); };
    ;
}

static inline void traceTaskCreate(Task *task __attribute__((__unused__)),
                                   Capability *cap __attribute__((__unused__)))
{
    ;



    ;


    if (__builtin_expect((TRACE_sched),0)) {
        traceTaskCreate_(task, cap);
    }
   

                                      ;
}

static inline void traceTaskMigrate(Task *task __attribute__((__unused__)),
                                    Capability *cap __attribute__((__unused__)),
                                    Capability *new_cap __attribute__((__unused__)))
{
    ;
    ;
    ;
    ;

    if (__builtin_expect((TRACE_sched),0)) {
        traceTaskMigrate_(task, cap, new_cap);
    }
   
                                                                        ;
}

static inline void traceTaskDelete(Task *task __attribute__((__unused__)))
{
    ;
    if (__builtin_expect((TRACE_sched),0)) {
        traceTaskDelete_(task);
    }
    ;
}

# 1 "rts/EndPrivate.h" 1

#pragma GCC visibility pop
# 971 "rts/Trace.h" 2
# 15 "rts/Schedule.h" 2

# 1 "rts/BeginPrivate.h" 1
# 9 "rts/BeginPrivate.h"
#pragma GCC visibility push(hidden)
# 17 "rts/Schedule.h" 2





void initScheduler (void);
void exitScheduler (
# 23 "rts/Schedule.h" 3 4
                   _Bool 
# 23 "rts/Schedule.h"
                        wait_foreign);
void freeScheduler (void);
void markScheduler (evac_fn evac, void *user);


void scheduleThread (Capability *cap, StgTSO *tso);



void scheduleThreadNow (Capability *cap, StgTSO *tso);




void scheduleThreadOn(Capability *cap, StgWord cpu, StgTSO *tso);
# 48 "rts/Schedule.h"
StgWord raiseExceptionHelper (StgRegTable *reg, StgTSO *tso, StgClosure *exception);


StgWord findRetryFrameHelper (Capability *cap, StgTSO *tso);


StgWord findAtomicallyFrameHelper (Capability *cap, StgTSO *tso);


void scheduleWorker (Capability *cap, Task *task);
# 72 "rts/Schedule.h"
extern volatile StgWord sched_state;
# 106 "rts/Schedule.h"
extern volatile StgWord recent_activity;





extern StgTSO *blocked_queue_hd, *blocked_queue_tl;
extern StgTSO *sleeping_queue;


extern 
# 116 "rts/Schedule.h" 3 4
      _Bool 
# 116 "rts/Schedule.h"
           heap_overflow;






void interruptStgRts (void);

void resurrectThreads (StgTSO *);
# 139 "rts/Schedule.h"
inline void
appendToRunQueue (Capability *cap, StgTSO *tso);

inline void
appendToRunQueue (Capability *cap, StgTSO *tso)
{
    ;
    if (cap->run_queue_hd == ((StgTSO *)(void*)&stg_END_TSO_QUEUE_closure)) {
        cap->run_queue_hd = tso;
        tso->block_info.prev = ((StgTSO *)(void*)&stg_END_TSO_QUEUE_closure);
    } else {
        setTSOLink(cap, cap->run_queue_tl, tso);
        setTSOPrev(cap, tso, cap->run_queue_tl);
    }
    cap->run_queue_tl = tso;
    cap->n_run_queue++;
}




inline void
pushOnRunQueue (Capability *cap, StgTSO *tso);

inline void
pushOnRunQueue (Capability *cap, StgTSO *tso)
{
    setTSOLink(cap, tso, cap->run_queue_hd);
    tso->block_info.prev = ((StgTSO *)(void*)&stg_END_TSO_QUEUE_closure);
    if (cap->run_queue_hd != ((StgTSO *)(void*)&stg_END_TSO_QUEUE_closure)) {
        setTSOPrev(cap, cap->run_queue_hd, tso);
    }
    cap->run_queue_hd = tso;
    if (cap->run_queue_tl == ((StgTSO *)(void*)&stg_END_TSO_QUEUE_closure)) {
        cap->run_queue_tl = tso;
    }
    cap->n_run_queue++;
}



static inline StgTSO *
popRunQueue (Capability *cap)
{
    ;
    StgTSO *t = cap->run_queue_hd;
    ;
    cap->run_queue_hd = t->_link;

    StgTSO *link = *&t->_link;
    if (link != ((StgTSO *)(void*)&stg_END_TSO_QUEUE_closure)) {
        link->block_info.prev = ((StgTSO *)(void*)&stg_END_TSO_QUEUE_closure);
    }
    *&t->_link = ((StgTSO *)(void*)&stg_END_TSO_QUEUE_closure);

    if (cap->run_queue_hd == ((StgTSO *)(void*)&stg_END_TSO_QUEUE_closure)) {
        cap->run_queue_tl = ((StgTSO *)(void*)&stg_END_TSO_QUEUE_closure);
    }
    cap->n_run_queue--;
    return t;
}

static inline StgTSO *
peekRunQueue (Capability *cap)
{
    return cap->run_queue_hd;
}

void promoteInRunQueue (Capability *cap, StgTSO *tso);




static inline void
appendToBlockedQueue(StgTSO *tso)
{
    ;
    if (blocked_queue_hd == ((StgTSO *)(void*)&stg_END_TSO_QUEUE_closure)) {
        blocked_queue_hd = tso;
    } else {
        setTSOLink(&MainCapability, blocked_queue_tl, tso);
    }
    blocked_queue_tl = tso;
}




static inline 
# 227 "rts/Schedule.h" 3 4
             _Bool

# 228 "rts/Schedule.h"
emptyQueue (StgTSO *q)
{
    return (q == ((StgTSO *)(void*)&stg_END_TSO_QUEUE_closure));
}

static inline 
# 233 "rts/Schedule.h" 3 4
             _Bool

# 234 "rts/Schedule.h"
emptyRunQueue(Capability *cap)
{

    ;
    return cap->n_run_queue == 0;
}

static inline void
truncateRunQueue(Capability *cap)
{

    ;
    ;
    ;
    cap->run_queue_hd = ((StgTSO *)(void*)&stg_END_TSO_QUEUE_closure);
    cap->run_queue_tl = ((StgTSO *)(void*)&stg_END_TSO_QUEUE_closure);
    cap->n_run_queue = 0;
}






static inline 
# 258 "rts/Schedule.h" 3 4
             _Bool

# 259 "rts/Schedule.h"
emptyThreadQueues(Capability *cap)
{
    return emptyRunQueue(cap)

        && (emptyQueue(blocked_queue_hd)) && (emptyQueue(sleeping_queue))

    ;
}



# 1 "rts/EndPrivate.h" 1

#pragma GCC visibility pop
# 270 "rts/Schedule.h" 2
# 24 "rts/Capability.c" 2




# 1 "rts/STM.h" 1
# 33 "rts/STM.h"
       
# 42 "rts/STM.h"
# 1 "rts/BeginPrivate.h" 1
# 9 "rts/BeginPrivate.h"
#pragma GCC visibility push(hidden)
# 43 "rts/STM.h" 2







void stmPreGCHook(Capability *cap);
# 61 "rts/STM.h"
StgTRecHeader *stmStartTransaction(Capability *cap, StgTRecHeader *outer);
StgTRecHeader *stmStartNestedTransaction(Capability *cap, StgTRecHeader *outer
);







void stmAbortTransaction(Capability *cap, StgTRecHeader *trec);
void stmFreeAbortedTRec(Capability *cap, StgTRecHeader *trec);
# 83 "rts/STM.h"
void stmCondemnTransaction(Capability *cap, StgTRecHeader *trec);
# 99 "rts/STM.h"
StgBool stmValidateNestOfTransactions(Capability *cap, StgTRecHeader *trec);
# 147 "rts/STM.h"
StgBool stmCommitTransaction(Capability *cap, StgTRecHeader *trec);
StgBool stmCommitNestedTransaction(Capability *cap, StgTRecHeader *trec);
# 157 "rts/STM.h"
StgBool stmWait(Capability *cap, StgTSO *tso, StgTRecHeader *trec);

void stmWaitUnlock(Capability *cap, StgTRecHeader *trec);
# 169 "rts/STM.h"
StgBool stmReWait(Capability *cap, StgTSO *tso);
# 182 "rts/STM.h"
StgClosure *stmReadTVar(Capability *cap,
                        StgTRecHeader *trec,
                        StgTVar *tvar);





void stmWriteTVar(Capability *cap,
                  StgTRecHeader *trec,
                  StgTVar *tvar,
                  StgClosure *new_value);
# 206 "rts/STM.h"
# 1 "rts/EndPrivate.h" 1

#pragma GCC visibility pop
# 206 "rts/STM.h" 2
# 29 "rts/Capability.c" 2
# 1 "rts/RtsUtils.h" 1
# 9 "rts/RtsUtils.h"
       

# 1 "rts/BeginPrivate.h" 1
# 9 "rts/BeginPrivate.h"
#pragma GCC visibility push(hidden)
# 12 "rts/RtsUtils.h" 2





void initAllocator(void);
void shutdownAllocator(void);

void *stgMallocBytes(size_t n, char *msg)
    __attribute__((__malloc__));

void *stgReallocBytes(void *p, size_t n, char *msg);

void *stgCallocBytes(size_t count, size_t size, char *msg)
     __attribute__((__malloc__));

char *stgStrndup(const char *s, size_t n);

void stgFree(void* p);

void *stgMallocAlignedBytes(size_t n, size_t align, char *msg);

void stgFreeAligned(void *p);





int rtsSleep(Time t);
char *time_str(void);
char *showStgWord64(StgWord64, char *, 
# 42 "rts/RtsUtils.h" 3 4
                                      _Bool
# 42 "rts/RtsUtils.h"
                                          );





void printRtsInfo(const RtsConfig);

void checkFPUStack(void);




# 1 "rts/EndPrivate.h" 1

#pragma GCC visibility pop
# 55 "rts/RtsUtils.h" 2
# 30 "rts/Capability.c" 2
# 1 "rts/sm/OSMem.h" 1
# 9 "rts/sm/OSMem.h"
       

# 1 "rts/BeginPrivate.h" 1
# 9 "rts/BeginPrivate.h"
#pragma GCC visibility push(hidden)
# 12 "rts/sm/OSMem.h" 2

void osMemInit(void);
void *osGetMBlocks(uint32_t n);
void osFreeMBlocks(void *addr, uint32_t n);
void osReleaseFreeMemory(void);
void osFreeAllMBlocks(void);
size_t getPageSize (void);
StgWord64 getPhysicalMemorySize (void);
void setExecutable (void *p, W_ len, 
# 20 "rts/sm/OSMem.h" 3 4
                                    _Bool 
# 20 "rts/sm/OSMem.h"
                                         exec);

# 21 "rts/sm/OSMem.h" 3 4
_Bool 
# 21 "rts/sm/OSMem.h"
    osBuiltWithNumaSupport(void);

# 22 "rts/sm/OSMem.h" 3 4
_Bool 
# 22 "rts/sm/OSMem.h"
    osNumaAvailable(void);
uint32_t osNumaNodes(void);
uint64_t osNumaMask(void);
void osBindMBlocksToNode(void *addr, StgWord size, uint32_t node);

static inline size_t
roundDownToPage (size_t x)
{
    size_t size = getPageSize();
    return (x & ~(size - 1));
}

static inline size_t
roundUpToAlign (size_t size, size_t align)
{

    return (size + align - 1) & ~(align - 1);
}

static inline size_t
roundUpToPage (size_t x)
{
    return roundUpToAlign(x, getPageSize());
}
# 70 "rts/sm/OSMem.h"
void *osReserveHeapMemory(void *startAddress, W_ *len);







void osCommitMemory(void *p, W_ len);







void osDecommitMemory(void *p, W_ len);






void osReleaseHeapMemory(void);


# 1 "rts/EndPrivate.h" 1

#pragma GCC visibility pop
# 96 "rts/sm/OSMem.h" 2
# 31 "rts/Capability.c" 2
# 1 "rts/sm/BlockAlloc.h" 1
# 9 "rts/sm/BlockAlloc.h"
       

# 1 "rts/BeginPrivate.h" 1
# 9 "rts/BeginPrivate.h"
#pragma GCC visibility push(hidden)
# 12 "rts/sm/BlockAlloc.h" 2

bdescr *allocLargeChunk (W_ min, W_ max);
bdescr *allocLargeChunkOnNode (uint32_t node, W_ min, W_ max);



extern W_ countBlocks (bdescr *bd);
extern W_ countAllocdBlocks (bdescr *bd);
extern uint32_t returnMemoryToOS(uint32_t n);
# 29 "rts/sm/BlockAlloc.h"
extern W_ n_alloc_blocks;
extern W_ hw_alloc_blocks;

# 1 "rts/EndPrivate.h" 1

#pragma GCC visibility pop
# 32 "rts/sm/BlockAlloc.h" 2
# 32 "rts/Capability.c" 2
# 1 "rts/IOManager.h" 1
# 20 "rts/IOManager.h"
       

# 1 "rts/BeginPrivate.h" 1
# 9 "rts/BeginPrivate.h"
#pragma GCC visibility push(hidden)
# 23 "rts/IOManager.h" 2



void initIOManager(void);







void initIOManagerAfterFork( Capability **pcap);
# 48 "rts/IOManager.h"
void stopIOManager(void);
void exitIOManager(
# 49 "rts/IOManager.h" 3 4
                  _Bool 
# 49 "rts/IOManager.h"
                       wait_threads);
# 66 "rts/IOManager.h"
void wakeupIOManager(void);
# 84 "rts/IOManager.h"
# 1 "rts/EndPrivate.h" 1

#pragma GCC visibility pop
# 84 "rts/IOManager.h" 2
# 33 "rts/Capability.c" 2





Capability MainCapability;

uint32_t n_capabilities = 0;
uint32_t enabled_capabilities = 0;






Capability **capabilities = 
# 48 "rts/Capability.c" 3 4
                           ((void *)0)
# 48 "rts/Capability.c"
                               ;





static Capability *last_free_capability[16];





PendingSync * volatile pending_sync = 0;


uint32_t n_numa_nodes;


uint32_t numa_map[16];





Capability * rts_unsafeGetMyCapability (void)
{



  return &MainCapability;

}
# 247 "rts/Capability.c"
static void
initCapability (Capability *cap, uint32_t i)
{
    uint32_t g;

    cap->no = i;
    cap->node = ((i) % n_numa_nodes);
    cap->in_haskell = 
# 254 "rts/Capability.c" 3 4
                            0
# 254 "rts/Capability.c"
                                 ;
    cap->idle = 0;
    cap->disabled = 
# 256 "rts/Capability.c" 3 4
                            0
# 256 "rts/Capability.c"
                                 ;

    cap->run_queue_hd = ((StgTSO *)(void*)&stg_END_TSO_QUEUE_closure);
    cap->run_queue_tl = ((StgTSO *)(void*)&stg_END_TSO_QUEUE_closure);
    cap->n_run_queue = 0;
# 285 "rts/Capability.c"
    cap->total_allocated = 0;

    cap->f.stgEagerBlackholeInfo = (W_)&__stg_EAGER_BLACKHOLE_info;
    cap->f.stgGCEnter1 = (StgFunPtr)__stg_gc_enter_1;
    cap->f.stgGCFun = (StgFunPtr)__stg_gc_fun;

    cap->mut_lists = stgMallocBytes(sizeof(bdescr *) *
                                     RtsFlags.GcFlags.generations,
                                     "initCapability");
    cap->saved_mut_lists = stgMallocBytes(sizeof(bdescr *) *
                                          RtsFlags.GcFlags.generations,
                                          "initCapability");
    cap->current_segments = 
# 297 "rts/Capability.c" 3 4
                           ((void *)0)
# 297 "rts/Capability.c"
                               ;




    cap->upd_rem_set.queue.blocks = 
# 302 "rts/Capability.c" 3 4
                                   ((void *)0)
# 302 "rts/Capability.c"
                                       ;

    for (g = 0; g < RtsFlags.GcFlags.generations; g++) {
        cap->mut_lists[g] = 
# 305 "rts/Capability.c" 3 4
                           ((void *)0)
# 305 "rts/Capability.c"
                               ;
    }

    cap->weak_ptr_list_hd = 
# 308 "rts/Capability.c" 3 4
                           ((void *)0)
# 308 "rts/Capability.c"
                               ;
    cap->weak_ptr_list_tl = 
# 309 "rts/Capability.c" 3 4
                           ((void *)0)
# 309 "rts/Capability.c"
                               ;
    cap->free_tvar_watch_queues = ((StgTVarWatchQueue *)(void *)&stg_END_STM_WATCH_QUEUE_closure);
    cap->free_trec_chunks = ((StgTRecChunk *)(void *)&stg_END_STM_CHUNK_LIST_closure);
    cap->free_trec_headers = ((StgTRecHeader *)(void *)&stg_NO_TREC_closure);
    cap->transaction_tokens = 0;
    cap->context_switch = 0;
    cap->interrupt = 0;
    cap->pinned_object_block = 
# 316 "rts/Capability.c" 3 4
                              ((void *)0)
# 316 "rts/Capability.c"
                                  ;
    cap->pinned_object_blocks = 
# 317 "rts/Capability.c" 3 4
                               ((void *)0)
# 317 "rts/Capability.c"
                                   ;
    cap->pinned_object_empty = 
# 318 "rts/Capability.c" 3 4
                              ((void *)0)
# 318 "rts/Capability.c"
                                  ;


    cap->r.rCCCS = CCS_SYSTEM;






    cap->r.rCurrentTSO = 
# 328 "rts/Capability.c" 3 4
                        ((void *)0)
# 328 "rts/Capability.c"
                            ;

    traceCapCreate(cap);
    traceCapsetAssignCap(((CapsetID)0), i);
    traceCapsetAssignCap(((CapsetID)1), i);



}
# 346 "rts/Capability.c"
void initCapabilities (void)
{
    uint32_t i;



    traceCapsetCreate(((CapsetID)0), CapsetTypeOsProcess);
    traceCapsetCreate(((CapsetID)1), CapsetTypeClockdomain);


    if (!RtsFlags.GcFlags.numa) {
        n_numa_nodes = 1;
        for (i = 0; i < 16; i++) {
            numa_map[i] = 0;
        }
    } else if (RtsFlags.DebugFlags.numa) {

    } else {
        uint32_t nNodes = osNumaNodes();
        if (nNodes > 16) {
            barf("Too many NUMA nodes (max %d)", 16);
        }
        StgWord mask = RtsFlags.GcFlags.numaMask & osNumaMask();
        uint32_t logical = 0, physical = 0;
        for (; physical < 16; physical++) {
            if (mask & 1) {
                numa_map[logical++] = physical;
            }
            mask = mask >> 1;
        }
        n_numa_nodes = logical;
        if (logical == 0) {
            barf("available NUMA node set is empty");
        }
    }
# 398 "rts/Capability.c"
    n_capabilities = 1;
    capabilities = stgMallocBytes(sizeof(Capability*), "initCapabilities");
    capabilities[0] = &MainCapability;

    initCapability(&MainCapability, 0);



    enabled_capabilities = n_capabilities;




    for (i = 0; i < n_numa_nodes; i++) {
        last_free_capability[i] = capabilities[0];
    }
}

void
moreCapabilities (uint32_t from __attribute__((__unused__)), uint32_t to __attribute__((__unused__)))
{
# 460 "rts/Capability.c"
}






void contextSwitchAllCapabilities(void)
{
    uint32_t i;
    for (i=0; i < getNumCapabilities(); i++) {
        contextSwitchCapability(capabilities[i]);
    }
}

void interruptAllCapabilities(void)
{
    uint32_t i;
    for (i=0; i < getNumCapabilities(); i++) {
        interruptCapability(capabilities[i]);
    }
}
# 877 "rts/Capability.c"
void waitForCapability (Capability **pCap, Task *task)
{


    MainCapability.running_task = task;
    task->cap = &MainCapability;
    *pCap = &MainCapability;
# 920 "rts/Capability.c"
}
# 1146 "rts/Capability.c"
static void
shutdownCapability (Capability *cap __attribute__((__unused__)),
                    Task *task __attribute__((__unused__)),
                    
# 1149 "rts/Capability.c" 3 4
                   _Bool 
# 1149 "rts/Capability.c"
                        safe __attribute__((__unused__)))
{
# 1252 "rts/Capability.c"
}

void
shutdownCapabilities(Task *task, 
# 1255 "rts/Capability.c" 3 4
                                _Bool 
# 1255 "rts/Capability.c"
                                     safe)
{
    uint32_t i;
    for (i=0; i < getNumCapabilities(); i++) {
        ;
        shutdownCapability(capabilities[i], task, safe);
    }



}

static void
freeCapability (Capability *cap)
{
    stgFree(cap->mut_lists);
    stgFree(cap->saved_mut_lists);
    if (cap->current_segments) {
        stgFree(cap->current_segments);
    }



    traceCapsetRemoveCap(((CapsetID)0), cap->no);
    traceCapsetRemoveCap(((CapsetID)1), cap->no);
    traceCapDelete(cap);
}

void
freeCapabilities (void)
{
# 1294 "rts/Capability.c"
    freeCapability(&MainCapability);

    stgFree(capabilities);
    traceCapsetDelete(((CapsetID)0));
    traceCapsetDelete(((CapsetID)1));
}







void
markCapability (evac_fn evac, void *user, Capability *cap,
                
# 1309 "rts/Capability.c" 3 4
               _Bool 
# 1309 "rts/Capability.c"
                    no_mark_sparks __attribute__((__unused__)))
{
    InCall *incall;






    evac(user, (StgClosure **)(void *)&cap->run_queue_hd);
    evac(user, (StgClosure **)(void *)&cap->run_queue_tl);



    for (incall = cap->suspended_ccalls; incall != 
# 1323 "rts/Capability.c" 3 4
                                                  ((void *)0)
# 1323 "rts/Capability.c"
                                                      ;
         incall=incall->next) {
        evac(user, (StgClosure **)(void *)&incall->suspended_tso);
    }
# 1335 "rts/Capability.c"
    stmPreGCHook(cap);
}

void
markCapabilities (evac_fn evac, void *user)
{
    uint32_t n;
    for (n = 0; n < getNumCapabilities(); n++) {
        markCapability(evac, user, capabilities[n], 
# 1343 "rts/Capability.c" 3 4
                                                   0
# 1343 "rts/Capability.c"
                                                        );
    }
}
